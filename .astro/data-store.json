[["Map",1,2,9,10,465,466,636,637],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.1","content-config-digest","14008de2dc18a721","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://elianiva.my.id\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"light-plus\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,30,31,52,53,75,76,94,95,111,112,129,130,149,150,173,174,194,195,212,213,229,230,247,248,263,264,283,284,303,304,320,321,341,342,358,359,373,374,388,389,404,405,417,418,433,434,448,449],"brainly-scraper-ts",{"id":11,"data":13,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":15},{"title":14,"hasImage":15,"date":16,"description":17,"demo":18,"source":19,"type":20,"stack":21,"featured":25},"Brainly Scraper",true,["Date","2020-09-12T00:00:00.000Z"],"A tiny (~2KB) library to scrape data from brainly written in Typescript.",null,"https://github.com/elianiva/brainly-scraper-ts","personal",[22],[23,24],"Typescript","https://typescriptlang.org",false,"**Brainly Scraper** is a tiny (~2KB) library that I made for [my whatsapp bot](https://github.com/elianiva/img-to-sticker-bot) which is now dead. I made this just for fun and learn Typescript.\n\nAfter creating this library, I learned some stuff about HTTP request like headers which allow me to get the data from brainly. If the header isn't present then my request would get rejected.\n\nI also learned that you can query into GraphQL server using `query` object on the request body. I thought you can only get a request from a GraphQL server using GraphQL client like Apollo, urql, and Relay.\n\nThis library might be buggy. I never found an error though, if you're interested with this library then feel free to give it a try.","src/content/projects/brainly-scraper-ts.mdx","90a6003e24cc4abe","brainly-scraper-ts.mdx","ci-inventory-app",{"id":30,"data":32,"body":48,"filePath":49,"digest":50,"legacyId":51,"deferredRender":15},{"title":33,"hasImage":15,"date":34,"description":35,"demo":18,"source":36,"type":37,"stack":38,"featured":25},"Inventory App",["Date","2021-03-26T00:00:00.000Z"],"An Inventory App made with CodeIgniter v4","https://github.com/elianiva/ci-inventaris","assignment",[39,42,45],[40,41],"PHP","https://www.php.net/",[43,44],"CodeIgniter","https://codeigniter.com/",[46,47],"TailwindCSS","https://tailwindcss.com","This app was made using [CodeIgniter](https://codeigniter.com/). It's for one of my final assignment, just like my [previous app](/projects/java-cashier-app)\n\nIt's my first _kinda_ serious app using PHP. I said _kinda_ because I don't like PHP, it's weird and if I could, I wouldn't choose it.\n\nPlease go to [the readme](https://github.com/elianiva/ci-inventaris/blob/master/README.md) if you want some more information about this app.","src/content/projects/ci-inventory-app.mdx","5750d9b729041d73","ci-inventory-app.mdx","covid-info-v2",{"id":52,"data":54,"body":71,"filePath":72,"digest":73,"legacyId":74,"deferredRender":15},{"title":55,"hasImage":15,"date":56,"description":57,"demo":58,"source":59,"type":20,"stack":60,"featured":25},"Covid Info v2",["Date","2021-01-07T00:00:00.000Z"],"A remake of my previous app that shows the current COVID19 data.","https://covid-info-v2.vercel.app","https://github.com/elianiva/covid-info-v2",[61,62,65,68],[23,24],[63,64],"Apexcharts","https://apexcharts.com",[66,67],"Leaflet","https://leafletjs.com",[69,70],"Twind","https://twind.dev","**Covid Info v2** is a remake of my previous version which you can check [over here](https://elianiva.my.id/projects/covid-info).\n\nI made the first version a few months ago, around May 2020. It was my first React app that I've ever made with a third party API instead of static data. It was made with React, Javascript, and Vanilla CSS.\n\nSince that time, I've learned _a lot_ about Javascript. Turns out there's this thing called Typescript which is an _awesome_ thing, it's Javscript but statically typed/strong typed. I also found out about [NextJS](https://nextjs.org) which is basically [React](https://reactjs.org) + more features like SSR, SSG, and a bunch more cool features.\n\nI decided to remake this app to see how far I've learned these technologies. It's also because my friend want to make a similar app, hence I decided to make this so I can help him along the way.\n\nI chose Typescript because it's like a godsend for Javascript developers, it's so pleasant to work with. It provides a better development experience. I also decided to use [twind](https://twind.dev) that I found recently. It's also my first css-in-js library that I've ever used. TwindCSS is basically one of css-in-js solution for [TailwindCSS](https://tailwindcss.com). I chose it because it's really unique in my opinion, instead of shipping the prebuilt CSS to the end user, it ships the compiler. So, no matter how many styles you have, the end result would be ~10KB. Quoting from its official docs.\n\n> Another big advantage we see of shipping the interpreter compiler itself (rather than pre-compiled output) is that the effective size of the CSS for your whole app is deterministic and fixed. The weight of the compiler itself along with your theme file is all that users will ever download, no matter how many styles you use.\n\n> Currently the compiler weighs around 10KB which is smaller than styled-components and the average tailwind output.\n\nI use the API provided by [disease.sh](https://disease.sh/). They have quite a lot of endpoints that you can use. More than enough for my needs.\n\nDesign wise, I took some of it from this [beautiful dribbble shot](https://dribbble.com/shots/10803637-Corona-Virus-Covid-19-Dashboard). It's easy enough to implement since I'm quite good at CSS (at least that's what I think :p) because I am so used to implement a design every week for [svelteception](https://elianiva.my.id/projects/svelteception). All goes well, except for the world map section.\n\nI never made any map related thing, so this is the first time I use a map library like [LeafletJS](https://leafletjs.com). Since I use NextJS which utilize SSR, I can't just import Leaflet as is because it needs a `window` object. At first, I'm using [react-leaflet-universal](https://github.com/masotime/react-leaflet-universal) but I'm not sure if that's the best solution.\nThe next day, I found out that NextJS can import a module _only_ if the page has been rendered on the client side by using its `dynamic` module, I was blown away the first time I found it. I no longer need a thin wrapper like react-leaflet-universal.\n\nI was going to make a feature where if you click on a country, it would zoom the map but ended up not doing it because I have no idea how to do it, I've Google it up and still couldn't find any solution.\n\nInitially, I want to make it responsive/mobile friendly. Twind has this nice feature where you can group tailwindcss directives. It looks something like this `md:(col(start-1 end-2) row(start-2 end-4))`, this saves me a lot of time. After doing that for maybe half and hour, I thought it doesn't look that good in terms of UI/UX so I threw it away.\n\nI use [Vercel](https://vercel.com/) to deploy this app. I really love Vercel because they provide so many features yet it's still free. Deploying NextJS app on Vercel is really easy because NextJS is also made by Vercel so they must have optimised their platform for NextJS app. You can even get analytics if you deploy your NextJS app on Vercel.\n\nHonestly, I am quite proud of this one. I learned a lot along the way, seeing them compared side by side made me happy. I didn't waste a year doing nothing, I made some progress.","src/content/projects/covid-info-v2.mdx","cf20da1e91625d2f","covid-info-v2.mdx","covid-info",{"id":75,"data":77,"body":90,"filePath":91,"digest":92,"legacyId":93,"deferredRender":15},{"title":78,"hasImage":15,"date":79,"description":80,"demo":81,"source":82,"type":20,"stack":83,"featured":25},"Covid Info",["Date","2020-04-22T00:00:00.000Z"],"A simple app to get current covid data.","https://covid-info.now.sh","https://github.com/elianiva/covid-info",[84,87],[85,86],"React","https://reactjs.org",[88,89],"ChartJS","https://chartjs.org","**Covid Info** is the first React app I made that uses a third party API as its data source. This app is also kinda buggy because when I made it, I don't really care about any other feature except the homepage that shows current covid data.\n\nI'm planning on remaking this if I got time for it using Svelte.\n\nimport Update from \"~/components/Update.astro\";\n\n\u003CUpdate date=\"2021-03-01\">\n\nI've made a remake using NextJS. I didn't choose Svelte because I want to explore more stuff about NextJS and I've done quite a bit of Svelte recently, so doing something different is nice. You can check it out [here](https://elianiva.my.id/projects/covid-info-v2)\n\n\u003C/Update>","src/content/projects/covid-info.mdx","22008c3b804546cc","covid-info.mdx","gh-job",{"id":94,"data":96,"body":107,"filePath":108,"digest":109,"legacyId":110,"deferredRender":15},{"title":97,"hasImage":15,"date":98,"description":99,"demo":100,"source":101,"type":20,"stack":102,"featured":25},"GH Jobs",["Date","2021-02-13T00:00:00.000Z"],"Simple app that I made when trying out Svelte-Kit which uses Github Job API","https://gh-job.vercel.app","https://github.com/elianiva/gh-job",[103,106],[104,105],"Svelte-Kit","https://svelte.dev",[23,24],"**GH Job** is a simple app that I made when I was trying out Svelte-Kit. It gets its data from Github Job API and display it using a simple card.\n\nYou can read more about my thoughts about this app and Svelte-Kit in general [here](/posts/trying-out-sveltekit).\n\nIt can filter the result by the title, location, and whether if it's a full-time job or not. It also has dark mode.\n\nIt's pretty basic since I only made this for an experimental purpose.","src/content/projects/gh-job.mdx","f1f6daaf9c58f293","gh-job.mdx","gitgram",{"id":111,"data":113,"body":125,"filePath":126,"digest":127,"legacyId":128,"deferredRender":15},{"title":114,"hasImage":25,"date":115,"description":116,"demo":18,"source":117,"type":118,"stack":119,"featured":15},"Gitgram",["Date","2021-01-05T00:00:00.000Z"],"Never miss out on your Git activities by getting notifications on your Telegram.","https://github.com/teknologi-umum/pesto","open-source",[120,122],[23,121],"https://astro.build",[123,124],"NodeJS","https://reactjs.com","Pesto is a Remote Code Execution Engine that lets you execute any piece of code on a remote server via REST API.\nIt is heavily inspired by Piston. Pesto is not a fork of Piston, it's an entire rewrite from scratch and therefore\nit's not compatible with Piston but should be similar if you're already familiar with Piston.\n\nPesto was written with a fresh start, minimizing the dependencies needed, and system controlled for limited resources usage.\nHence, users will need to register in order to gain access to Pesto's API.\n\nIts landing page is build with Astro. The same technology that powers this website.","src/content/projects/gitgram.mdx","99f5b4fe54964add","gitgram.mdx","graphene",{"id":129,"data":131,"body":145,"filePath":146,"digest":147,"legacyId":148,"deferredRender":15},{"title":132,"hasImage":15,"date":133,"description":134,"demo":135,"source":136,"type":20,"stack":137,"featured":15},"Graphene",["Date","2021-08-20T00:00:00.000Z"],"Lighter Carbon alternative made with Shiki","https://teknologi-umum-graphene.fly.dev","https://github.com/teknologi-umum/graphene",[138,139,142],[23,24],[140,141],"Sharp","https://sharp.pixelplumbing.com/",[143,144],"SolidJS","https://www.solidjs.com/","Graphene is [carbon.now.sh](https://carbon.now.sh) alternative. It's using [Shiki](https://shiki.matsu.io) to highlight the code and [Sharp](https://sharp.pixelplumbing.com/) to generate the image into various formats such as png, jpeg, and webp.\n\nThe simple frontend client and documentation was built using [SolidJS](https://www.solidjs.com/).\n\nBig thanks to [@aldy505](https://github.com/aldy505) and [other contributors](https://github.com/teknologi-umum/graphene/graphs/contributors) for helping me with this :)","src/content/projects/graphene.mdx","b81330a8e3721cad","graphene.mdx","java-cashier-app",{"id":149,"data":151,"body":169,"filePath":170,"digest":171,"legacyId":172,"deferredRender":15},{"title":152,"hasImage":15,"date":153,"description":154,"demo":18,"source":155,"type":37,"stack":156,"featured":25},"Java Cashier App",["Date","2021-03-26T00:00:00.000Z"],"A desktop cashier app made with Java for one of my final assignment","https://github.com/elianiva/kasir-java",[157,160,163,166],[158,159],"Java","https://www.java.com",[161,162],"FlatLAF","https://www.formdev.com/flatlaf",[164,165],"Apache POI","https://poi.apache.org",[167,168],"JasperReports","https://community.jaspersoft.com/projects/jasperreports-library","This was made using Java Swing framework for one of my final assignments at school.\n\nIt's my first time ever to write a Java GUI app, and I'm not going to lie, I don't really enjoy the process.\n\nSome of them are enjoyable, I learn a few new things about Object Oriented Programming, but some of them are frustrating :)\n\nAnyway, please go to [the readme](https://github.com/elianiva/kasir-java/blob/tugas-akhir/README.md) if you want some more information about this app.","src/content/projects/java-cashier-app.mdx","c7504e7aa9935fd3","java-cashier-app.mdx","jisho-lens",{"id":173,"data":175,"body":190,"filePath":191,"digest":192,"legacyId":193,"deferredRender":15},{"title":176,"hasImage":15,"date":177,"description":178,"demo":18,"source":179,"type":20,"stack":180,"featured":15},"Jisho Lens",["Date","2022-06-08T00:00:00.000Z"],"Yomichan for Android with Google Lens-like feature","https://github.com/elianiva/jisho-lens",[181,184,187],[182,183],"Flutter","https://flutter.dev",[185,186],"Riverpod","https://riverpod.dev",[188,189],"Google ML Kit","https://developers.google.com/ml-kit","**Jisho Lens** is an android app to help you learn Japanese. It basically works like Yomichan. I also took the idea of Googe Lens, hence the name Jisho _Lens_. It works by scanning your screen and tries to find any Japanese text and make it clickable. After you click the word, there will be a pop-up about the detail of the word.\n\nI made the app using Flutter and Riverpod as the state manager. I didn’t choose BLoC because that looks a bit too complicated for me who just want a simple state manager. I didn’t choose GetX either because it has too much stuff, I just want a state manager, not a mini-framework that sits on top of Flutter. The reason why I chose Riverpod specifically instead of Provider which is made by the same author is because Riverpod tries to address some issues with Provider, at least that’s what it said on its website. Also, I prefer how Riverpod works since it doesn’t require the `BuildContext` or other Flutter specific things to run.\n\n## Features\n\n### Google Lens-like feature\n\nAs I said previously, I made this app to mimic Google Lens. It scans through your screen to find any Japanese text.\n\n### Dictionary\n\nSince this app has an overlap with a dictionary, I decided to make a dictionary feature with a search bar as well. Nothing really fancy going on, it’s just a dictionary like how you would expect.\n\n## Challenges\n\nWhile making this app, I encountered a bunch of challenges. Thankfully I managed to tackle them all and I’m quite happy with the solution. Here are some of the challenges along with the solution that I came up with.\n\n### Data source\n\nInitially, I want to use [jisho.org](http://jisho.org) API since they’re one of the best Japanese dictionary out there, but then I realised that it doesn’t have a stable API and I want a full offline support. So I ditched that idea and used SQLite populated with the data from JMdict and KANJIDIC instead.\n\nBesides providing full offline support, another advantage of this approach is I get a full control of the raw data and manipulate them however I want. Although this method has a drawback, having a full control also means that I have to parse the raw data by myself, which was quite fun, actually.\n\n### Populating data\n\nSince I took Yomichan as an inspiration for this app, I tried to do the same thing as they do, which is letting the user to import the dictionary and populate the database by them-self. This didn’t end very well.\n\nThe dictionary file is pretty big and inserting hundreds of thousands of data in a single transaction will cause Out of Memory error. I tried to chunk so it became 5k rows per transaction but then it was too slow.\n\nI ended up ditching this idea and decided to pre-populate the database and import the database file instead.\n\n### Furigana distribution\n\nIf you don’t know yet, Furigana are those small kana that you see on top/bottom/side of a kanji, like this for example: \u003Cruby>偽\u003Crp>(\u003C/rp>\u003Crt>にせ\u003C/rt>\u003Crp>)\u003C/rp>物\u003Crp>(\u003C/rp>\u003Crt>もの\u003C/rt>\u003Crp>)\u003C/rp>\u003C/ruby>. Since Japanese has certain rules to read a kanji, meaning that a kanji has multiple readings based on its usage, it’s a bit hard to decide where are these Furigana should be placed using simple conditions. If you know Japanese, of course you can do this manually since you know how to read the individual kanji.\n\nAt first, I thought of making an algorithm to distribute _most_ of them correctly, I thought that would be enough, but then I realised there are just _too many_ edge cases that needs to be handled. I’m pretty sure Yomichan also uses this method, but I’m not going to port their code into Dart.\n\nI was about to give up and just distribute the Furigana as a single continuous word, but then I found [Doubleevil/JmdictFurigana](https://github.com/Doublevil/JmdictFurigana) which basically provides the correct position of the Furigana. You should check it out if you want to know how it works, I think it’s pretty smart and it’s definitely better than my original algorithm.\n\n### Manipulating data source\n\nI use Flutter to make the app so I thought of using Dart to parse the data and insert it into SQLite. I quickly realised it was not a good idea. I then decided to switch to use C#. Why? You might ask. Well, I _really_ like C# but I don’t get that much opportunity of using it. Since this is just a personal project, I thought it would be fun to use it. Plus, .NET has a lot of stuff builtin that can help me interact with json, xml, and gzip. The only dependency I need to install is `Microsoft.Data.Sqlite` which is used to interact with the database.\n\nThe source file is quite big (the JMdict-English is around 8mb and the JmdictFurigana attachment is around 28mb). Loading the entire file into a string and then parse it is definitely not a good idea. I’m glad that I chose .NET to do this because it has a builtin way to parse a json and xml file from a stream. Parsing the json stream is as simple as feeding a stream into `JsonSerializer.Deserialize`, but parsing the xml isn’t as simple.\n\nThe way `XmlReader` works is it walks through the file stream line by line. It’s a forward-only reader, meaning that you can’t go back to look at the previous tag. The rest of the process is left to the end user. I’ve never done this before so this is new to me, but it’s quite fun to do because I get to use LINQ. It’s just not as easy as doing a simple `JsonSerializer.Deserialize.`\n\nThe other challenge is the way I would structure the data in the database. It’s challenging because I need to combine two massive data and I want it to be relatively fast to insert and easy to work with. It took me quite a while, but I got there eventually after a bunch of head scratching.\n\n### Splitting words and lemmatisation\n\nUnfortunately, Google ML Kit Text Recognizer doesn’t split the recognised Japanes texts into individual words. As we all know, Japanese don’t really have spaces to separate words unlike most other languages. Splitting between them isn’t as easy as doing `words.Split(\" \")`. Thankfully, there’s already a tool that can help me do this called [MeCab](https://taku910.github.io/mecab/](https://taku910.github.io/mecab/) and someone made a binding for Dart, neat. It also handles lemmatisation, which is basically extracting the root form of the word. For example, 残した became 残す. This is necessary because the dictionary only has the root form for each word.\n\nAll that was left to do for me is calculating which word should I use when someone pressed a certain area on the screen, just like Google Lens, I thought. As it turned out, it wasn’t that easy. There are too many edge cases to handle because the character width aren’t always the same and sometimes Google ML Kit gives an incorrect `boundingBox` coordinate so they’re slightly misaligned. I ended up doing the alternative, which is when you press a line it will give you several options to choose from. Not exactly ideal but this is better than handling many edge cases and possibly getting false positive results.\n\n### Quick Screen Scan\n\nRecently I discovered that you can add your own custom quicksettings tile by providing your custom `TileService` and setting up some stuff in `AndroidManifest.xml`. I was so excited, this means that I can add a quick scan shortcut without having to screenshot manually. Unfortunately, I need to code some Kotlin code and my laptop just gave up the moment I open Android Studio or Intellij Idea. I was a bit sad to be honest, but oh well, guess I have to delay this feature ¯\\\\\\_(ツ)\\_/¯\n\n## What I learned\n\nThis is my first Flutter app so I learned _a lot_. I learned how Flutter works fundamentally, which is pretty much the same as any other MVVM framework, state management, and a bunch of other Flutter specific knowledge.\n\nI learned how to use SQLite and utilised its full-text search feature. I learned a lot about SQL while making this app, especially about index. My query went from ~3s to ~300ms just by adding an index. Since I populate the database from .NET and the bundled sqlite doesn’t come with ICU support, I need to compile it myself to enable ICU support (the Android version comes with ICU support). I don’t really have any experience with C so the entire process was quite painful.\n\nI also learned how to use `IEnumerable` more efficiently, how to parse an XML stream with LINQ, and some other LINQ queries when I’m writing the db generator using C#.\n\nAll in all, I’m glad that I decided to make this app. Not only that my daily mild frustration disappear, I learned a lot of stuff that I wasn’t even expecting.\n\n## Credits\n\nThese are some other cool projects that helped me a lot during the process of making this app. Definitely check them out!\n\n-   [The JMDict project](https://www.edrdg.org/jmdict/j_jmdict.html) - The main data source\n-   [jisho.org](http://jisho.org) - Great online Japanese dictionary website\n-   [FooSoft/yomichan](https://github.com/FooSoft/yomichan) - One of the reason why I made this app\n-   [Doublevil/JmdictFurigana](https://github.com/Doublevil/JmdictFurigana) - Furigana distribution data\n-   [MeCab](https://taku910.github.io/mecab/) and [dttvn0010/mecab_dart](https://github.com/dttvn0010/mecab_dart) - Japanese word segmentation and Japanese word segmentation binding for Dart\n-   [lrorpilla/Jidoujisho](https://github.com/lrorpilla/jidoujisho) - Similar app with more features\n-   [WeDontPanic/Jotoba](https://github.com/WeDontPanic/Jotoba) - Online Japanese dictionary similar to Jisho","src/content/projects/jisho-lens.mdx","503f9857e9ff65ea","jisho-lens.mdx","kana-board",{"id":194,"data":196,"body":208,"filePath":209,"digest":210,"legacyId":211,"deferredRender":15},{"title":197,"hasImage":15,"date":198,"description":199,"demo":200,"source":201,"type":20,"stack":202,"featured":25},"Kana Board",["Date","2020-06-25T00:00:00.000Z"],"An app to help me memorise Japanese vocab.","https://kana-board.vercel.app","https://github.com/elianiva/kana-board",[203,204,207],[85,86],[205,206],"Redux","https://redux.js.org",[46,47],"**Kana Board** is a simple app that I made with React + Redux. The reason why I made this is to help me memorize Japanese vocabulary. Another reason is that I am learning Redux and todolist app is hella boring to make. I won't use it either since I never arrange my activities :p I just do something whenever I feel like it.\n\nI got this idea from a Youtube video from a channel called Japanese Ammo With Misa. She did this by using a book, but I can't be bothered to grab a pen and write it using my hand because my handwriting is ugly as heck. Most likely I ended up not reading it because I couldn't read it. So I made this app instead.\nBasically, you have some sort of table with 5 columns in it. The first column is used to write the kana of that Japanese word. The second column is used to write the meaning of that word in English. Then the third column is to write an example of that word in a sentence, it will highlight the word that is written in the first column to make it more clear on which part of a sentence that word is used. The fourth column is used to write the context, it explains briefly when to use that word. Finally, the last column is used to write my own example.\n\nI made the table so that it can only be edited when the date of the table creation is the same as your current date. Basically, it's only editable for a day (it's not always 24 hours, it depends on when you create it). I did this because I want to see how many words I learned in a day and I don't want to cheat by adding a new word in a table that is created a week ago.\n\nI don't use this app anymore since I moved to Anki.","src/content/projects/kana-board.mdx","9eec372063bc9731","kana-board.mdx","kanaizu",{"id":212,"data":214,"body":225,"filePath":226,"digest":227,"legacyId":228,"deferredRender":15},{"title":215,"hasImage":15,"date":216,"description":217,"demo":218,"source":219,"type":20,"stack":220,"featured":15},"Kanaizu",["Date","2020-09-29T00:00:00.000Z"],"A japanese kana quiz app built using Routify and TailwindCSS","https://kanaizu.vercel.app","https://github.com/elianiva/kanaizu",[221,224],[222,223],"Routify","https://routify.dev",[46,47],"**Kanaizu** is an app that I made when I was starting to learn Svelte. I made this app because I want to help my friend memorise Japanese kana because we're both learning Japanese at the time I'm writing this. It's also because I want to try Routify. I made this app for about a week, maybe that's way too long but hey, it was my second time so I barely know the basics.\n\nI got the data from [Wikibooks](https://en.wikibooks.org/wiki/JLPT_Guide). It has around ~508 words. I picked them randomly, most of them are N5 and N4. I picked them using a weird method. As you can see, the words that they provide has kanji because that's how you would use it, with kanji. I only want the hiragana or katakana version. So what I did was scrape the data and make this tiny and unefficient script using js that would transform the data that I got from the site which is an array of words into an object that looks something like this.\n\n```json\n{\n\t\"data\": [\n\t\t{\n\t\t\t\"hiragana\": \"たべる\",\n\t\t\t\"romaji\": \"taberu\"\n\t\t},\n\t\t{\n\t\t\t\"hiragana\": \"わかる\",\n\t\t\t\"romaji\": \"wakaru\"\n\t\t}\n\t]\n}\n```\n\nI converted it from kanji to hiragana/katakana using [this tool](https://nihongodera.com/tools/kana-converter). Big thanks for the creator of that tool. It would be _very_ tedious if it didn't exist. Imagine converting hundreds of words manually.\n\nI use Tailwind CSS for this project which means that I have to setup postcss. Again, because this is my second time trying Routify and my first time setting up Tailwind CSS specifically for Routify, as expected, I messed up. I have no idea what I was doing until a few hours later but it's worth it. I learned something new.\n\nI you're interested with this app, go ahead and try it yourself ツ\n\nThere's some inconsistency though, but it's _rarely_ appear. I can't fix it because it's quite unpredictable. Basically, it won't show your score. Just refresh the app if this happen.","src/content/projects/kanaizu.mdx","fd9b0590e0e76b57","kanaizu.mdx","nyaa-si-scraper",{"id":229,"data":231,"body":243,"filePath":244,"digest":245,"legacyId":246,"deferredRender":15},{"title":232,"hasImage":15,"date":233,"description":234,"demo":18,"source":235,"type":20,"stack":236,"featured":25},"Nyaa.si Scraper",["Date","2021-01-17T00:00:00.000Z"],"Scraper for nyaa.si made with Rust and Typescript.","https://github.com/elianiva/nyaa-si-scraper",[237,240],[238,239],"Deno","https://deno.land",[241,242],"Rust","https://www.rust-lang.org/","**Nyaa.si Scraper** is a scraper that I made to play around with Rust and Deno. The idea came from my friend, but he made this using Golang.\n\nIt was a fun little thing to do in my spare time. It's also the first thing I made with Deno. Feel free to try it if you want :)\n\nBoth Rust and Deno version looks the same. Here's how it looks.\n\n![preview](/assets/projects/nyaa-si-scraper/preview.webp)","src/content/projects/nyaa-si-scraper.mdx","2e62c074a41bebc0","nyaa-si-scraper.mdx","old-personal-site",{"id":247,"data":249,"body":259,"filePath":260,"digest":261,"legacyId":262,"deferredRender":15},{"title":250,"hasImage":15,"date":251,"description":252,"demo":253,"source":254,"type":20,"stack":255,"featured":25},"Old Personal Website",["Date","2020-05-02T00:00:00.000Z"],"My old personal website made with Gatsby","https://elianiva-github-io.vercel.app","https://github.com/elianiva/elianiva.github.io",[256],[257,258],"Gatsby","https://gatsbyjs.org","My previous website was made with GatsbyJS. It went through 2 iterations but the one that you're seeing now is the second iteration. The first one is way too ugly to a point where it's not worth to even show it :p\n\nThis is my first website that I've put my whole effort into, I made it around February 2020 and redesign it around May 2020. I'm actually quite surprised that I managed to make this website and maintain it overtime.\n\nI learned a lot during the process of making this, not only about HTML/CSS/JS, but also about CI/CD. I used [TravisCI](https://travis-ci.org) then moved to [Github Action](https://github.com/features/actions) for this.\n\nIt was hosted on Github Page but I now moved it to Vercel just because I'm hosting the rest of my stuff there. It's also nice that I don't have to care about CI/CD.\n\nDon't expect any content there, they're all outdated and saved for historical purpose. Just pretend that they are some lorem ipsum text ;)","src/content/projects/old-personal-site.mdx","98183b55e07f8a10","old-personal-site.mdx","online-library",{"id":263,"data":265,"body":279,"filePath":280,"digest":281,"legacyId":282,"deferredRender":15},{"title":266,"hasImage":15,"date":267,"description":268,"demo":18,"source":269,"type":37,"stack":270,"featured":25},"Online Library",["Date","2021-10-27T00:00:00.000Z"],"An app to help librarian manage the library","https://github.com/elianiva/perpus",[271,274,277],[272,273],"Adonis","https://adonisjs.com",[275,276],"Bootstrap","https://getbootstrap.com",[23,278],"https://typescript.com","A website to help librarian manage the library, sort of.\n\nI don't really enjoy working on this since the spec wasn't clear enough and I have to second guess the requirements. Thankfully all went well.","src/content/projects/online-library.mdx","71cbfab70323f0b9","online-library.mdx","p",{"id":283,"data":285,"body":299,"filePath":300,"digest":301,"legacyId":302,"deferredRender":15},{"title":286,"hasImage":15,"date":287,"description":288,"demo":289,"source":290,"type":20,"stack":291,"featured":15},"P",["Date","2022-06-01T00:00:00.000Z"],"A website to paste your text with syntax highlighting support.","https://p.elianiva.my.id","https://github.com/elianiva/p",[292,293,296],[23,24],[294,295],"CF Workers","https://www.cloudflare.com/workers/",[297,298],"CF KV","https://developers.cloudflare.com/workers/runtime-apis/kv/","**P** (very creative name, I know) is a website where you can paste your text with syntax highlighting support.\n\nThis was made using [Cloudflare Workers](https://www.cloudflare.com/workers/) and [Cloudflare KV](https://developers.cloudflare.com/workers/runtime-apis/kv/) as its storage. I made this because I wanted to learn how to use Cloudflare Workers and Cloudflare KV. Previously I use [Polarite](https://github.com/teknologi-umum/polarite) to paste my text but it suddenly broke because of distributed database is hard or something like that.\n\nI initially thought of using Rust, but I didn't end up using it because I realised that the Rust adapter for Cloudflare KV is just wrapping the JavaScript adapter so there's a bunch of data type conversion back and forth, so in the end I chose Typescript instead.\n\nI also use this to learn how to apply Clean Architecture after reading a book by Robert C. Martin called [Clean Architecture: A Craftsman's Guide to Software Structure](https://www.amazon.co.uk/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164), it was a good book.\nIt might be a bit overkill for this kind of simple project but I found it pretty enjoyable. I like the idea of separating your project into layers, it keeps the project clean and maintainable in my opinion.\n\nThere was a part on that book which discuss why you should depend on an abstraction instead of a concrete implementation. If you do this, you can defer the choice of how you would implement that abstraction later down the road and you can focus more about the core logic at the start. You can also have multiple implementations and choose which one to use at runtime.\n\nIn this project, I used `IStorage` and `IHighlighter` to abstract the storage and the syntax highlighting. I have a `MemoryStorage` class which implements the `IStorage` interface that I use at the start before actually implementing the Cloudflare KV storage. I also have a `DumbHighlighter` that implements `IHighlighter` so that I can test how it handles highlighting for different language without actually implementing the real logic, it just adds a prefix based on the language parameter. It's very nice to work this way.\n\nI added a bunch of `Response` object wrapper because I like AspNetCore style of returning a response. You'd just need to return `Ok(\"response text\")` for 200 response instead of doing `Response(\"response\", { status: 200 })`. They also handle JSON serialisation with proper headers automatically.","src/content/projects/p.mdx","04e2bc7843ac2e47","p.mdx","pesto",{"id":303,"data":305,"body":125,"filePath":317,"digest":318,"legacyId":319,"deferredRender":15},{"title":306,"hasImage":15,"date":307,"description":308,"demo":309,"source":117,"type":118,"stack":310,"featured":15},"Pesto",["Date","2021-01-04T00:00:00.000Z"],"Remote Code Execution Engine that lets you execute any piece of code on a remote server via REST API","https://pesto.teknologiumum.com",[311,313,316],[312,121],"Astro",[314,315],"Go","https://go.dev",[123,124],"src/content/projects/pesto.mdx","3ac2354f92dd5de9","pesto.mdx","prawf",{"id":320,"data":322,"body":337,"filePath":338,"digest":339,"legacyId":340,"deferredRender":15},{"title":323,"hasImage":15,"date":324,"description":325,"demo":326,"source":327,"type":20,"stack":328,"featured":15},"Prawf",["Date","2022-02-19T00:00:00.000Z"],"A Pauli Test Simulation app made with Web Component and RxJS","https://prawf.vercel.app","https://github.com/elianiva/prawf",[329,332,335],[330,331],"Web Component","https://developer.mozilla.org/en-US/docs/Web/Web_Components",[333,334],"RxJS","https://rxjs.dev/",[23,336],"https://www.typescriptlang.org/","**Prawf** is a Pauli Test simulation app made with Web Component and RxJS. You can find the reason why I made this in [the project repo](https://github.com/elianiva/prawf)\n\n## Web Component\n\nI chose Web Component because I want to try to experiment with it. I used it briefly in the past and I have no idea what I'm doing so I want to try to use it again.\n\n## Styling\n\nI was going to use [Tailwind](https://tailwindcss.com/) but then I realised I use Web Component and I have no idea how to set it up. The second option is [Open Props](https://open-props.style/) but then I thought it's a bit overkill for what I'm doing.\n\nSince I don't use Web Component that much, there are probably some questionable things that I've done, and one of them is importing CSS as a string and then including it in the template.\n\nI imported the css string using `?inline` directive from Vite to import a file as a string. The result is... there are quite a lot of unnecessary whitespaces which makes the final HTML bigger. I'm sure I could _probably_ minify it, but it's fine for now.\n\nOne of the things that I like from Web Component is component isolation; meaning that other component won't touch each other, they're isolated. This is good and bad, the good is I don't need to worry about accidentally touching other components, the bad is I duplicated a bunch of CSS because I couldn't use utility classes.\n\nOh, I also added a darkmode with an animated toggle button because why not ツ It isn't persisted, though.\n\n## Reactivity\n\nMaking something Reactive is very easy thanks to RxJS. I don't think I struggle that much in this section. Again, I don't use RxJS that much so there is definitely room for improvement.\n\nFor example, I re-render the entire component instead of modifying the node that I changed because I feel re-rendering the entire thing is a lot simpler and I don't think it slows my app.\n\n## State Management\n\nI use Svelte quite a bit, so I tried to make `svelte/store`-style state management using RxJS Subject. Here's an example.\n\n```typescript\nexport let currentTheme: Theme = \"light\";\nexport const currentTheme$ = new Subject\u003CThemeState>();\ncurrentTheme$.subscribe(({ current }) => {\n\tcurrentTheme = current;\n});\n```\n\nI use a variable to persist the last state because I couldn't find a way to \"get\" the last value from RxJS Subject.\n\n## Routing\n\nI made a Subject to change the route. The way it works is actually pretty simple. Whenever I want to navigate to another page, I just need to emit a path as a string to the Subject and it will change the route using `history.pushState`.\n\n## Chart\n\nI decided to build the chart myself instead of using a library since I only need two; which are lines and bars. I decided to make a smooth curved line. Thanks to [this post](https://francoisromain.medium.com/smooth-a-svg-path-with-cubic-bezier-curves-e37b49d46c74) that I found, I was able to make the chart.\n\n## History and Countdown\n\nI used RxJS `interval` and `timer` for the countdown timer and just re-render every second. I used css transition for the top bar instead of re-rendering every time because I want it to animate smoothly when it gets shorter.\n\nFor the game history, I just pushed an object to a Subject. I also have a `currentRound` Subject that keeps getting updated by an `interval` Observable which tracks the current round.\n\n## Result Calculation\n\nThe result is calculated from the correct answers, incorrect answers, the percentage of the correct answer, answers per round in average, and the standard deviation.\n\nI didn't know how to decide a smoother chart (consistent) is better than a jagged chart (inconsistent). Fortunately, people at [Teknologi Umum](https://t.me/teknologi_umum) pointed me in the right direction, which was to find the standard deviation. It's just simple math, apparently. I was expecting something more involved but no, it's just a quick formula that could be done in less than a minute.","src/content/projects/prawf.mdx","8e02d8672258d971","prawf.mdx","room-tenant-system",{"id":341,"data":343,"body":354,"filePath":355,"digest":356,"legacyId":357,"deferredRender":15},{"title":344,"hasImage":25,"date":345,"description":346,"demo":18,"source":347,"type":37,"stack":348,"featured":25},"Room Tenant System",["Date","2023-12-01T00:00:00.000Z"],"An app to streamline the process of borrowing rooms in JTI building for various events.","https://github.com/integer-class/room-tenant-system",[349,351],[40,350],"https://php.net",[352,353],"MSSQL","https://www.microsoft.com/en-us/sql-server/","A web application to streamline the process of borrowing rooms in JTI building for various events.\nThis application was built using PHP and Microsoft SQL Server.\n\nWe were not allowed to use any framework, so I built the entire thing from scratch using the latest PHP features\nsuch as attributes to annotate the routes and the controllers. It's pretty much inspired from Laravel and ASP.NET Core.\n\nThe application has a simple authentication system, and it allows users to borrow rooms for their events.\nThe admin can approve or reject the requests. Please visit the project repository for more information regarding\nthis project.","src/content/projects/room-tenant-system.mdx","fe75d1a7056f1c41","room-tenant-system.mdx","school-stuff",{"id":358,"data":360,"body":369,"filePath":370,"digest":371,"legacyId":372,"deferredRender":15},{"title":361,"hasImage":15,"date":362,"description":363,"demo":18,"source":364,"type":20,"stack":365,"featured":25},"School Stuff",["Date","2020-07-19T00:00:00.000Z"],"A website where I put some of my school assignment cuz why not.","https://github.com/elianiva/school-log",[366],[367,368],"NextJS","https://nextjs.org","**School Stuff** is a website that I made to write some of my assignment that I got during covid pandemic because I'm way too lazy to write it down on a paper so I ended up making a website for it. I also made this to make it easier to share it with my friend.\n\nI also learned how to make a route using 2 parameters on NextJS. Thanks to [v1rtl](http://github.com/talentlessguy/) who gave me this idea.\n\nThe site is pretty basic. I just need it to write some markdown, nothing fancy going on.\n\nAnd yes, the name is a throw away name.","src/content/projects/school-stuff.mdx","4b3066b3b868d170","school-stuff.mdx","skaga",{"id":373,"data":375,"body":384,"filePath":385,"digest":386,"legacyId":387,"deferredRender":15},{"title":376,"hasImage":15,"date":377,"description":378,"demo":379,"source":380,"type":20,"stack":381,"featured":25},"Skaga",["Date","2020-07-23T00:00:00.000Z"],"SMKN 3 Jember's site remake using NextJS and TailwindCSS","https://skaga.vercel.app","https://github.com/elianiva/skaga",[382,383],[367,368],[46,47],"**Skaga** is a website that I made as an attempt to remake my [school's website](https://smk3jember.sch.id). This is my first website that I built using NextJS. It was a pleasant experience using NextJS for the first time. All goes well and nothing messed up.\n\nThis website is also the first time I made a dropdown for the navbar and surprisingly it works the first time I made it. I'm quite proud of the design of this website. I personally think this is _way better_ than the old one.\n\nInitially, I want to try to integrate it with [strapi](https://strapi.io/) but it got cancelled. I changed my mind because I don't see any point of me doing this. Simple markdown files for the post is enough.\n\nThere's one issue though. I couldn't make the lazy-loaded images work so you'd have to suffer when you visit the website for the first time.\n\nNot all of the content is completed since I just want to make the 'big picture' of the website. It's not going to be used so why would I even bother to complete it.","src/content/projects/skaga.mdx","7df113cd89f143e1","skaga.mdx","svelteception",{"id":388,"data":390,"body":400,"filePath":401,"digest":402,"legacyId":403,"deferredRender":15},{"title":391,"hasImage":15,"date":392,"description":393,"demo":394,"source":395,"type":20,"stack":396,"featured":15},"Svelteception",["Date","2020-09-28T00:00:00.000Z"],"A website where I put the result of a small challenge that I did every week","https://svelteception.vercel.app","https://github.com/elianiva/svelteception",[397,399],[398,105],"Svelte",[222,223],"**Svelteception** is a website that I made to put all of website that I made for a challenge that I did every week with my friends. [NikarashiHatsu](https://github.com/nikarashihatsu/) and [LynSotera](https://github.com/lynsotera/). It's basically converting UI designs that we found on the internet. Initially, we want to make 3 website each week. But man, we're so busy that we only have time to make one :p\n\nI didn't have the idea to make a dedicated site just to showcase all of the design. [NikarashiHatsu](https://github.com/nikarashihatsu/) made his homepage then I thought it was a good idea to have a dedicated website for it. I was going to just put it on the repo readme.\n\nThis challenge has been quite a fun experience so far. I'm looking forward to how many designs that I'll be able to implement before I decided to stop or don't have time to do this anymore.\n\nIf you want to know more about this project, please visit the website :)","src/content/projects/svelteception.mdx","2a8c04703b3fcd19","svelteception.mdx","teknum-bot",{"id":404,"data":406,"body":413,"filePath":414,"digest":415,"legacyId":416,"deferredRender":15},{"title":407,"hasImage":25,"date":408,"description":409,"demo":18,"source":410,"type":118,"stack":411,"featured":15},"Teknologi Umum Bot",["Date","2021-01-02T00:00:00.000Z"],"Teknologi Umum's bot for a more interactive group","https://github.com/teknologi-umum/bot",[412],[123,124],"We made this bot initially for a more interactive group. It's a simple bot that can do a lot of things. It integrates\nwith [teknologi-umum/graphene](https://github.com/teknologi-umum/graphene) to provide code snippet image generation.\nIt can also execute any arbitrary code and return the result thanks to [teknologi-umum/pesto](https://github.com/teknologi-umum/pesto).","src/content/projects/teknum-bot.mdx","6e07ca4c03807774","teknum-bot.mdx","tgif",{"id":417,"data":419,"body":429,"filePath":430,"digest":431,"legacyId":432,"deferredRender":15},{"title":420,"hasImage":15,"date":421,"description":422,"demo":423,"source":410,"type":118,"stack":424,"featured":15},"TGIF",["Date","2021-01-03T00:00:00.000Z"],"An archive of the group chats where we share our thoughts and opinions.","https://tgif.teknologiumum.com",[425,427],[312,426],"https://astro.build/",[143,428],"https://solidjs.com/","We like to chat about various topics, and some of them are worth to be shared. This is our attempt of archiving those conversations.\nKeeping the chat UI format instead of a blog format, we hope to keep the authenticity of the chat and make it somewhat fun to read.","src/content/projects/tgif.mdx","832a22a0a06a230d","tgif.mdx","teknum-blog",{"id":433,"data":435,"body":444,"filePath":445,"digest":446,"legacyId":447,"deferredRender":15},{"title":436,"hasImage":15,"date":437,"description":438,"demo":439,"source":440,"type":118,"stack":441,"featured":15},"Teknologi Umum Blog",["Date","2021-01-01T00:00:00.000Z"],"Teknologi Umum's blog where anyone can write about anything!","https://blog.teknologiumum.com","https://github.com/teknologi-umum/blog",[442,443],[85,124],[367,368],"This is the blog for Teknologi Umum where anyone can write about anything! We use NextJS and React to build this blog.\nWe use this as a platform to share our knowledge and allow for anyone to do the same. If you want to contribute any type\nof content, feel free to do so by submitting a pull request the repository.","src/content/projects/teknum-blog.mdx","5dafea2e6f6716fe","teknum-blog.mdx","umaru-chat",{"id":448,"data":450,"body":461,"filePath":462,"digest":463,"legacyId":464,"deferredRender":15},{"title":451,"hasImage":15,"date":452,"description":453,"demo":18,"source":454,"type":20,"stack":455,"featured":25},"Umaru Chat",["Date","2020-09-19T00:00:00.000Z"],"A realtime chat app made with React, Firebase, and Typescript","https://github.com/elianiva/umaru-chat",[456,457,458],[85,124],[23,24],[459,460],"Firebase","https://firebase.google.com","**Umaru Chat** is a chat app that I made to push my skillset further. I never made a fullstack app before and barely know about backend stuff so what I ended up doing is using BaaS (Backend as a Service) which is Firebase. I also want to try to make a React app using Typescript. Honestly, I proud that I'm able to make this app but at the same time I'm not really proud of this app because it's my first time and obviously the code is a mess.\n\nI don't know the type definition for Firebase so I used `any` which should be avoided when using Typescript. I don't follow any tutorial (which I probably should), I just google stuff up if I got confused and just slapp dem code with the solution that I found from the internet.\n\nThere's some issue with this app which is if you don't leave the room using the **quit** button then the usercount for the room won't go down. I have experienced enough pain that I don't want to touch this app ever again.\n\nBasic chatting feature works though, so it's not a broken app. The reason why I chose the name **Umaru Chat** is because I saw Umaru-chan when I was randomly scrolling twitter and thought \"aight, that'll be my chatapp name\". As you may or may not have known, I can't choose a good name for _anything_.","src/content/projects/umaru-chat.mdx","27c5e057da8656c7","umaru-chat.mdx","bookmarks",["Map",467,468,477,478,487,488,497,498,507,508,517,518,527,528,536,537,546,547,556,557,566,567,576,577,586,587,596,597,606,607,616,617,626,627],"3d-game-shaders",{"id":467,"data":469,"body":473,"filePath":474,"digest":475,"legacyId":476,"deferredRender":15},{"title":470,"url":471,"date":472},"3D Game Shaders for Beginner","https://lettier.github.io/3d-game-shaders-for-beginners/",["Date","2024-02-12T00:00:00.000Z"],"A bunch of tutorials on how to write shaders for 3D games. It covers quite a lot of different types of shaders,\nand it's a great resource for anyone who wants to learn how to write shaders for 3D games.","src/content/bookmarks/3d-game-shaders.mdx","49c1e8132d8d8099","3d-game-shaders.mdx","bloom-filters",{"id":477,"data":479,"body":483,"filePath":484,"digest":485,"legacyId":486,"deferredRender":15},{"title":480,"url":481,"date":482},"Bloom Filters (with Visualisations)","https://samwho.dev/bloom-filters/",["Date","2024-03-06T00:00:00.000Z"],"An introduction to Bloom Filters with visualisations. Bloom Filters isn't quite an easy concept to grasp, so understanding\nhow [Hashing](https://samwho.dev/hashing) works is a good start.","src/content/bookmarks/bloom-filters.mdx","164e14e4e7e17bdc","bloom-filters.mdx","book-of-shaders",{"id":487,"data":489,"body":493,"filePath":494,"digest":495,"legacyId":496,"deferredRender":15},{"title":490,"url":491,"date":492},"Book of Shaders","https://thebookofshaders.com/",["Date","2024-02-14T00:00:00.000Z"],"A very good resource to get started with shaders. It covers a bunch of stuff, although at the time of adding this, it doesn't have a 3D section yet.\nPretty much a book in form of a website.","src/content/bookmarks/book-of-shaders.mdx","b28bff51f3f48cda","book-of-shaders.mdx","clean-code-summary",{"id":497,"data":499,"body":503,"filePath":504,"digest":505,"legacyId":506,"deferredRender":15},{"title":500,"url":501,"date":502},"Clean Code Summary","https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29",["Date","2024-03-06T00:00:00.000Z"],"A short and concise summary of the Clean Code book by Robert C. Martin. It contains some of the most important\nprinciples and practices from the book.","src/content/bookmarks/clean-code-summary.mdx","500bf3484a21e1ca","clean-code-summary.mdx","designsurf",{"id":507,"data":509,"body":513,"filePath":514,"digest":515,"legacyId":516,"deferredRender":15},{"title":510,"url":511,"date":512},"Design Systems Surf","https://designsystems.surf/",["Date","2024-08-10T00:00:00.000Z"],"A website that lists design systems by various companies. Contains a lot of useful demos and stuff.","src/content/bookmarks/designsurf.mdx","339dee1672f34c34","designsurf.mdx","distributed-system-reading-list",{"id":517,"data":519,"body":523,"filePath":524,"digest":525,"legacyId":526,"deferredRender":15},{"title":520,"url":521,"date":522},"Distributed System Reading List","https://ferd.ca/a-distributed-systems-reading-list.html",["Date","2024-02-14T00:00:00.000Z"],"A good reference if you're looking for a list of resource to read regarding distributed systems. The author\nalso added their own comments on each resource, which is a nice touch.","src/content/bookmarks/distributed-system-reading-list.mdx","da3256cadb03e5f9","distributed-system-reading-list.mdx","fix-fedora-deep-sleep",{"id":527,"data":529,"body":532,"filePath":533,"digest":534,"legacyId":535,"deferredRender":15},{"title":530,"url":18,"date":531},"Fix Fedora Deep Sleep",["Date","2024-06-08T00:00:00.000Z"],"My deep sleep was not working when I closed the lid of my laptop since Fedora 40. It was caused by the `mem_sleep` mode\nset to `s2idle` instead of `deep`, no idea what changed it, but here's the solution.\n\nCheck if the current mode is `s2idle`:\n\n```bash\n$ cat /sys/power/mem_sleep\n[s2idle] deep\n```\n\nTo change that to `deep`:\n\n```bash\n$ sudo sh -c 'echo deep > /sys/power/mem_sleep'\n```\n\nIt should now be fixed:\n\n```bash\n$ cat /sys/power/mem_sleep\ns2idle [deep]\n```\n\nAlso, add the following to `/etc/default/grub`:\n\n```ini\nGRUB_CMDLINE_LINUX_DEFAULT=\"mem_sleep_default=deep\"\n```\n\nAnd update grub (you might need to adjust this command to your system):\n\n```bash\n$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg\n```","src/content/bookmarks/fix-fedora-deep-sleep.mdx","d8f54940f3742e44","fix-fedora-deep-sleep.mdx","go-http-service",{"id":536,"data":538,"body":542,"filePath":543,"digest":544,"legacyId":545,"deferredRender":15},{"title":539,"url":540,"date":541},"How to write Go HTTP service","https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/",["Date","2024-02-17T00:00:00.000Z"],"A guide on how to write HTTP service using Go coming from someone with 13 years of experience.\nI think it's a good one, even though I don't really agree with some points, but that's probably\nbecause I never encountered the issue that they had.","src/content/bookmarks/go-http-service.mdx","f919f0877a8c0701","go-http-service.mdx","google-sre-book",{"id":546,"data":548,"body":552,"filePath":553,"digest":554,"legacyId":555,"deferredRender":15},{"title":549,"url":550,"date":551},"The Google SRE Book","https://sre.google/sre-book/introduction/",["Date","2024-03-05T00:00:00.000Z"],"A book about Site Reliability Engineering by Google. It covers several topics such as what is an\nSRE, what they do, and how they do it. It also covers the principles and practices of SRE.","src/content/bookmarks/google-sre-book.mdx","194a3583d434e960","google-sre-book.mdx","hashing",{"id":556,"data":558,"body":562,"filePath":563,"digest":564,"legacyId":565,"deferredRender":15},{"title":559,"url":560,"date":561},"Hashing (with Visualisations)","https://samwho.dev/hashing/",["Date","2024-03-06T00:00:00.000Z"],"A basic introduction to hashing, with some visualisations to help understand the concepts. A great article to read and\neasy to grasp.","src/content/bookmarks/hashing.mdx","5fb70dfe2bdb52bb","hashing.mdx","how-to-read-papers",{"id":566,"data":568,"body":572,"filePath":573,"digest":574,"legacyId":575,"deferredRender":15},{"title":569,"url":570,"date":571},"How to (seriously) read scientific papers","https://www.science.org/content/article/how-seriously-read-scientific-paper",["Date","2024-02-14T00:00:00.000Z"],"A great article on how to read scientific papers. It answers quite a few concerns that I had about reading scientific papers.","src/content/bookmarks/how-to-read-papers.mdx","5e173909fcec06c4","how-to-read-papers.mdx","intro-to-sql",{"id":576,"data":578,"body":582,"filePath":583,"digest":584,"legacyId":585,"deferredRender":15},{"title":579,"url":580,"date":581},"An Introduction to SQL for Wary Data Scientists","https://gvwilson.github.io/sql-tutorial/",["Date","2024-02-14T00:00:00.000Z"],"A good introduction to SQL for those who are new to it. It uses SQLite for the examples, but it should be universal enough\nthat it can be used with any other SQL databases. It's quite comprehensive and covers a lot of ground.","src/content/bookmarks/intro-to-sql.mdx","87c1819e9321fcab","intro-to-sql.mdx","java-vs-go-gc",{"id":586,"data":588,"body":592,"filePath":593,"digest":594,"legacyId":595,"deferredRender":15},{"title":589,"url":590,"date":591},"Go doesn't need Java-style GC","https://www.sobyte.net/post/2022-03/go-does-not-need-a-java-style-gc/",["Date","2024-02-17T00:00:00.000Z"],"It covers some fundamental differences between Go and Java Garbage Collector and why Go doesn't need\nJava-style GC because it doesn't have the same problem that Java has.","src/content/bookmarks/java-vs-go-gc.mdx","7c23050e35734152","java-vs-go-gc.mdx","mastering-programming",{"id":596,"data":598,"body":602,"filePath":603,"digest":604,"legacyId":605,"deferredRender":15},{"title":599,"url":600,"date":601},"Mastering Programming","https://tidyfirst.substack.com/p/mastering-programming",["Date","2024-02-15T00:00:00.000Z"],"A short and well written article listing some tips to becoming a better programmer.\nIt's written sort of like wisdoms in programming, if you will.","src/content/bookmarks/mastering-programming.mdx","815c4bef13d472cf","mastering-programming.mdx","privacy-guide",{"id":606,"data":608,"body":612,"filePath":613,"digest":614,"legacyId":615,"deferredRender":15},{"title":609,"url":610,"date":611},"Privacy Guide","https://www.privacyguides.org/en/",["Date","2024-07-31T00:00:00.000Z"],"Resource for how to protect your privacy. Contains a lot of useful information and has a very good structure.\nCovers quite a lot of topics regarding protecting your privacy.","src/content/bookmarks/privacy-guide.mdx","1b862a6595a51b31","privacy-guide.mdx","ruangguru-engineering-academy",{"id":616,"data":618,"body":622,"filePath":623,"digest":624,"legacyId":625,"deferredRender":15},{"title":619,"url":620,"date":621},"Ruangguru Engineering Academy","https://rea.ruangguru.com/learn",["Date","2024-03-05T00:00:00.000Z"],"Resource by Ruangguru for building a scalable web application. At the time of writing\nit looks pretty bland, but I'm sure it will be updated in the future.","src/content/bookmarks/ruangguru-engineering-academy.mdx","b35e001073f54820","ruangguru-engineering-academy.mdx","toolfolio",{"id":626,"data":628,"body":632,"filePath":633,"digest":634,"legacyId":635,"deferredRender":15},{"title":629,"url":630,"date":631},"Toolfolio","https://toolfolio.io/",["Date","2024-07-31T00:00:00.000Z"],"A bunch of useful tools with various categories.","src/content/bookmarks/toolfolio.mdx","d379424c9a983075","toolfolio.mdx","posts",["Map",638,639,651,652,664,665,676,677,688,689,699,700,711,712,723,724,734,735,745,746,756,757,769,770,780,781,793,794,804,805,816,817,827,828,838,839,849,850,860,861,871,872,882,883,893,894,904,905,916,917,927,928,938,939,950,951,961,962,972,973,983,984,996,997],"2bwm",{"id":638,"data":640,"body":647,"filePath":648,"digest":649,"legacyId":650,"deferredRender":15},{"draft":25,"title":641,"date":642,"description":643,"tags":644},"My impression on two border window manager",["Date","2020-04-01T00:00:00.000Z"],"My impression of a keyboard oriented stacking window manager called Two Border Window Manager or 2BWM",[645,646],"linux","window manager","# Introduction\n\nI've been using Window Manager for the past 8 months, more or less. Starting from i3, I then moved to i3-gaps, then came across BSPWM. During that period, I switched back and forth between i3-gaps and BSPWM and sometimes tried other WM like Openbox, DWM, AwesomeWM, Xmonad. They're all work great, but not quite to my taste.\n\nWell, because of this pandemic and whatnot, we're advised to stay at home. Almost all of public facility such as school, market, etc got closed. This means I have plenty of free time. I decided to use some of my time to try another Window Manager which is 2BWM.\n\n# Why 2BWM?\n\nI chose 2bwm mostly because it has 2 borders. I know that you can make BSPWM have 2 borders but I can't make it work. It uses chwb2 or something like that from wmutils. Another reason is that I want to try a different workflow. i3 and BSPWM is a tiling window manager. I'd assume you already know what a tiling WM is, otherwise [read this](https://en.wikipedia.org/wiki/Tiling_window_manager).\n\nWhat makes me more interested in this WM is, even though it's a floating WM, it can be fully controlled using a keyboard only. You can even move your cursor using a keybind! But I don't really use this feature.\n\n# My Experience\n\n## Installation\n\n2BWM is sort of stacking version of DWM (no offense, if some of you DWM fans or 2BWM fans out there gets offended by this). Just like DWM, it's really minimal, there's no configuration file. You have to edit the `config.h` file in the source code and recompile it to apply the change.\n\nSo, to install 2bwm is you clone the repo which is over [here](https://github.com/venam/2bwm) and follow the instruction to build it.\n\nAt first, I couldn't make anything works. Can't open anything using the keybind. I probably messed up the config or something. There's only a black screen with nothingness. Then I went straight back to BSPWM, saying to myself that I'm not ready for this minimalistic WM.\n\nAfter about 3 days, I tried it one more time. This time, I decided to use other people config first which was really helpful. Then work my way up from there, changing some configuration and adding several keybinds.\n\n## Usage\n\nSo far, it is a _great_ experience. I come to a point where it feels like it's a peak comfy workflow. I never thought floating WM with keyboard control is my thing. I tried Openbox and the only thing I don't like about it, you have to use the mouse. I hate using the mouse, it's way too far. Even though I have a TrackPoint in my Thinkpad, I still don't quite like it.\n\nYou can move a window by using `mod+{h,j,k,l}` and resize it using `mod+shift+{h,j,k,l}`. You can also use the mouse if you want. The teleport feature is what I like the most. You can snap windows to left or right, and 4 corners of your screen.\n\nSo far, I have no issue with this WM. Though, I only use it for about 3 days as of the time this post is written\n\n# Conclusion\n\nEven though this WM size is small, it works wonderfully. Much thank you for the creator of this WM. I'm really glad that there's this WM. If you wonder what's my desktop looks like, you can see it [here](https://www.reddit.com/r/unixporn/comments/fst8sp/2bwm_apple_pie/?utm_source=share&utm_medium=web2x). Also, [here](https://github.com/irrellia/dotfiles) are my dotfiles and [here](https://gist.github.com/irrellia/b50a35aff854d2a0983ee4c6ba29f7f9) is my `config.h` if you want. I think that's about it, thanks for reading everyone and stay safe! I really hope this pandemic ends as soon as possible.","src/content/posts/2bwm.mdx","9ec143cd72a8d515","2bwm.mdx","a-year-of-japanese",{"id":651,"data":653,"body":660,"filePath":661,"digest":662,"legacyId":663,"deferredRender":15},{"draft":25,"title":654,"date":655,"description":656,"tags":657},"A year of Japanese... well, kinda",["Date","2021-10-31T00:00:00.000Z"],"A post where I write my journey on learning Japanese. Man, I forgot how did I learn a foreign language.",[658,659],"japanese","other","[babymetal-link]: https://en.wikipedia.org/wiki/Babymetal\n[hiragana-link]: https://en.wikipedia.org/wiki/Hiragana\n[katakana-link]: https://en.wikipedia.org/wiki/Babymetal\n[repo-link]: https://github.com/elianiva/japanese-stuff\n[refold-link]: https://refold.la\n[seadog-innit]: https://www.youtube.com/watch?v=hsjmZ2ruoqk\n[kym-duolingo]: https://knowyourmeme.com/memes/evil-duolingo-owl\n[srs-link]: https://en.wikipedia.org/wiki/Spaced_repetition\n[refold-anki]: https://refold.la/roadmap/stage-1/a/anki-setup\n[u-stevijs3]: https://www.reddit.com/user/Stevijs3/\n[notion-lang-resource]: https://elianiva.notion.site/a02a4d3879da40f8b45efea5b8fe651c?v=2fd8f60b10824f719b7e675f05b01e4f\n[excel-resource]: https://docs.google.com/spreadsheets/d/1O5ZtAMPoMA8cl15oSc_E3LBODEKhC2-fmTKwoSiHaTk/edit#gid=2089349054\n[anki-link]: https://apps.ankiweb.net/\n[newliberties-site]: https://newliberties.com/\n[discord-link]: https://discord.com/invite/a9Cz4JKV\n\n# Introduction\n\nHello there! I've been learning Japanese for around a year or so and here's what I've been going through.\n\nI'm actually writing this (mostly) as a memo to myself in case I learn a new language in the future.\n\n# Why Japanese?\n\n## Main reason\n\nThe reason I learned Japanese was -- spoiler alert, it wasn't because of anime / manga -- because I loved [Babymetal][babymetal-link] so much back then (I still do! Not as much as when I first discovered them, though). One day I was listening to their music and just randomly thought, hmmm, I might try to learn Japanese, and so I did. I still, to this day, don't know why I had that thought. I enjoy it and never regret it nonetheless.\n\n## Why not another language?\n\nWell, I always wanted to learn a language with a different writing system. My choices were Arabic, Chinese, Korean, and Japanese.\n\nI didn't choose to learn Arabic because being able to read it is enough for me, at least for now. Yes, I can read it, I just don't know (almost all of) their meaning :p\n\nChinese is too complicated, I'm struggling to read kanji with small font, and the amount of pitch accents is just... so that's a no go.\n\nI didn't choose Korean either because it feels 'too blocky' if that even makes sense. The lines are either straight or circle, there aren't that many curved lines. Also, not a fan of the pronunciation.\n\nThat brings me to the last option, which is Japanese. Even though it still has kanji, it also has its own script called [Hiragana][hiragana-link] and [Katakana][katakana-link] which are easier to read in smaller font. Also, I already like to consume Japanese content such as Anime / Manga anyway.\n\n# How I found Japanese\n\n## My great-grandma\n\nIf I remember correctly, I found Japanese when I was like 5 or 6. My great-grandma, who lives through the dark age of Japan colonisation, which is a looong time ago, of course, knows some Japanese. She taught me how to write 田 and 木. Being a 6 y/o me, I didn't completely understand what she was talking about other than it's a letter that looks like a tree which also means 'tree'.\n\n## Doraemon\n\nI used to watch Doraemon on the TV every Sunday, it was a very long time ago haha. I didn't know it was a Japanese show because it was dubbed, but I recognise the writings (not all of them, obviously). It was `のび太` (read: Nobita) which is the name of the main character in the series. `の` became my favourite kana because it was the first letter I know of and it looks cute :p\n\n# What It Feels To Learn A New Language\n\n## It's _kinda_ weird\n\nMy native language is not English, so I had to learn it. I forgot how it feels to learn a new language. It was a very long time ago since the last time I know nothing about English and learn about it. I think I started to 'learn' English when I was 8. I wrote 'learn' in quotes because it doesn't feel like it. I just consume so much English media until I got used to it. Well, of course, there are some school classes in between, but that's about it. I never thought like \"I _have_ to learn English for my future\" or something like that, it's just something that I took for granted until many many years later.\n\nThis time is different, I actually 'try' to learn Japanese. It feels _kinda_ weird, is what I would say. It also feels different than English because I also need to learn Japanese writing system. I'm really enjoying it so far.\n\n# How I learn Japanese\n\n## Learning method I use\n\nI learn Japanese in my free time. I'm not that guy who took like 3 hours a day dedicated to learn Japanese, I can't do that by myself, I'd just procrastinate after an hour or something. Look, I got distracted easily, ok.\n\nI really like [refold.la][refold-link] method of learning. It's basically immersion, the same path I took when I learn English. I only found this awesome website a few months ago, though. Because of this reason, I decided to immerse myself more than I used to. I started to watch Anime more often, read easy Japanese articles, changed my phone language to Japanese, watched vtubers, etc. Basically feed myself with lots of Japanese content.\n\nBased on my experience with English, it's no longer \"hmm, this grammar doesn't seem right\" but more of \"this sentence sounds weird, I never heard anyone said that\". Of course, I still learn the grammar rules, but most of the time I just rely on this method. If it sounds weird, there's something wrong with it.\n\n## No translation between languages\n\nI don't translate between languages in my head, it's just too slow. For example, if I read/heard `りんご`, I wouldn't translate it to `apple` (in English) or `apel` (in Bahasa Indonesia), I would imagine the thing, 🍎!\n\nSame with anything else, I wouldn't translate `右` as `right`, I would think it's _that_ direction. You know what I mean, _right_? \u003Csmall>no pun intended, I swear\u003C/small>.\n\n## That green, psycho bird\n\nYes, I used duolingo. It's good for repetitive tasks like memorising Hiragana or Katakana, but not so much with the grammar. I stopped using it when I've memorised Hiragana and Katakana because it's too gamified for me. Though, I find it fun to watch vtubers (or youtuber, like [this one][seadog-innit]) using it.\n\n> Just in case you didn't get the reference for this section title, [there you go][kym-duolingo]\n\n## 元気ですか？\n\nNo, not _that_ genki, but Genki the book. It's what people usually recommend. I used to do the work and put it on a [repo][repo-link] because I think it feels rewarding to just look back. I stopped doing that anymore, though. I moved the assignments to Notion because all of my notetaking stuff are there.\n\nThe book itself is pretty good, I'd also recommend it if you're going to learn Japanese. I'm pretty sure the first book covers most of N5 and the second book covers most of N4 stuff.\n\n## Anki\n\nI use [Anki][anki-link] to memorise vocabularies. It uses a [Spaced Repetition System][srs-link] which is a pretty common system used for flashcards. Newly introduced and more difficult flashcards are shown more frequently, while older and less difficult flashcards are shown less frequently in order to exploit the psychological spacing effect.\n\nI used to use a prebuilt deck, but then I realised it's not as effective as my own deck because I _built_ the deck so I _know_ what to expect. I made several decks categorised by the source of the word, i.e anime (words from anime/manga), phone (words from my phone), random (any other source, basically), etc.\n\n[Refold][refold-anki] also has a quick guide if you want to get started using Anki.\n\n## Wanikani\n\nI use Wanikani for kanji memorisation. I can actually just use Anki for this but I'm just too lazy to make a deck for it. They have a mnemonic to help you remember the kanji which _should_ make it easier, but not for me. It's easier for me to just remember the shape and assign it to its meaning/reading.\n\nI might create a kanji deck in the future, but for now, Wanikani is good enough.\n\n## r/learnjapanese\n\nI got a lot of resource recommendations here. I made my own list of free resources based on [u/Stevijs3/][u-stevijs3] comment on a thread. You can check it [here][notion-lang-resource] if you're interested, and [here's the original][excel-resource].\n\n## newliberties\n\nI found [this website][newliberties-site] and their [Discord server][discord-link] from r/learnjapanese. I usually ask the people here if I'm not sure with the result of my Google-Fu. It was pretty active when I first joined, there are VC almost every day and watch parties every now and then, but it's less active at the time of writing this. Probably because everyone is now busy, I joined around summer vacation so that makes sense.\n\n# Current Progress\n\nAfter learning Japanese for about a year, more or less, I'm probably at N4 right now. To be honest, I probably could've gone further like N3 if I didn't stop for a few months midway, but I'm still satisfied with my current progress. I can read easy manga like Yotsuba or watch an anime without subtitles.\n\nOh by the way, if you're learning Japanese, I'd recommend you to watch Peppa Pig dubbed in Japanese lmao. I know it sounds like a joke but it's very easy to understand.\n\n# Closing Note\n\nI guess that's probably it. I'll probably make another one when I reached N2 or something. Hope you found something useful from this post and have a nice day! :)","src/content/posts/a-year-of-japanese.mdx","4c240fe62e73e8d6","a-year-of-japanese.mdx","chrome-custom-newtab",{"id":664,"data":666,"body":672,"filePath":673,"digest":674,"legacyId":675,"deferredRender":15},{"draft":25,"title":667,"date":668,"description":669,"tags":670},"Making You Own Custom Startpage For Chrome",["Date","2020-09-15T00:00:00.000Z"],"An attempt of creating a custom startpage so that I don't get bored whenever I open a new tab on chrome.",[671],"website","import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nWell, I've been wanting to make my own homepage or newtab page. I thought this kind of thing is only possible in firefox. You might have seen some cool custom firefox startpage like [this one](https://www.reddit.com/r/startpages/comments/hfuoqg/a_simple_startpage_i_have_been_working_on). Turns out, if you want a custom newtab page on chrome, you have to make an extension for that. Fortunately, it is super simple.\n\n# Making the extension\n\n## Prerequisite\n\nBefore we start, we must prepare several things.\n\n-   Basic knowledge of HTML, CSS and JS (JS isn't required though, it's optional).\n-   Text editor\n-   Chrome based browser (duh? obviously)\n\n## Preparing the project\n\nFirst thing first, make a directory with the name of your choice anywhere you prefer. I'll have mine at `~/codes/chrome-page`. Then inside that directory, create a `manifest.json` file. Fill it with this.\n\n```json\n{\n\t\"name\": \"Startpage\",\n\t\"version\": \"1.0\",\n\t\"description\": \"My personal custom startpage\",\n\t\"manifest_version\": 2,\n\t\"chrome_url_overrides\": {\n\t\t\"newtab\": \"index.html\"\n\t}\n}\n```\n\nIf you want to know this file even more, [google has it covered](https://developer.chrome.com/extensions/manifest) for you. The important part here is the `chrome_url_overrides.newtab` field. You should point that to an HTML file that you want to make as a startpage.\n\n## Making the page\n\nHonestly, nothing much to tell here. You can go as overkill as you want for a startpage or just go ahead and pick one from the internet. I suggest you to go to [r/startpage](https://reddit.com/r/startpage) subreddit for a start. Here's mine.\n\n![old startpage](/assets/posts/chrome-custom-newtab/old.png)\n\nIt's super simple, I just set some vim-like shortcut (prefixed with colon) like `:o` to open a new website, `:s` to do google search, `:gh` to open github, etc. If you want mine, you can get it [here](https://github.com/elianiva/dotfiles/blob/master/misc/codes/chrome-page).\n\n\u003CUpdate date=\"2020-10-17\">\n\nI made a new once since the old one is too minimal. Here's the new one.\n\n\u003C/Update>\n\n![new startpage](/assets/posts/chrome-custom-newtab/new.png)\n\nYou can get it [here](https://github.com/elianiva/dotfiles/blob/master/misc/codes/startpage)\n\n\u003CUpdate date=\"2021-02-16\">\n\nI simplified my previous startpage by removing the icons and changing the font and the background. I also added a random sentence at the top so I will always memorise a word everytime I open a newtab page. There's also a link to [jisho.org](https://jisho.org) in case I got interested on that word.\n\n\u003C/Update>\n\n![newer startpage](/assets/posts/chrome-custom-newtab/newer.webp)\n\nYou can get this new one [here](https://github.com/elianiva/dotfiles/blob/master/codes/startpage) and I have an API that serves random word [here](https://github.com/elianiva/random-jp-api).\n\n## Applying the homepage\n\nTo apply the homepage that you've made, go ahead to `chrome://extensions` and activate **Developer Mode** at the top right corner. A new menu should appeared. Click on the button that says **Load Unpacked**. A file manager will appear, go ahead and navigate to your project directory and click **OK** or **Choose** or whatever your file manager gives you. New extension should appear with the name that you choose earlier on `manifest.json`. Activate it and that's it, your custom startpage should appear whenever you open a new tab.\n\n# Conclusion\n\nMaking a custom startpage for google chrome isn't that hard. I thought it requires some weird trick or something but it's not. Hope you find this post useful and see ya later, have a nice day! ツ","src/content/posts/chrome-custom-newtab.mdx","81952d17f74313f4","chrome-custom-newtab.mdx","combining-adonis-and-svelte-using-inertia",{"id":676,"data":678,"body":684,"filePath":685,"digest":686,"legacyId":687,"deferredRender":15},{"draft":25,"title":679,"date":680,"description":681,"tags":682},"Combining Adonis and Svelte using InertiaJS",["Date","2021-08-29T00:00:00.000Z"],"A short guide to build modern monolithic app using InertiaJS with Adonis and Svelte",[683,671],"svelte","[inertia-link]: https://inertiajs.com\n[adapter-link]: https://inertiajs.com/community-adapters\n[inertia-adonis-link]: https://github.com/eidellev/inertiajs-adonisjs\n[svelte-loader-link]: https://github.com/sveltejs/svelte-loader\n[svelte-preprocess-link]: https://github.com/sveltejs/svelte-preprocess\n\n# Introduction\n\nThese days web apps are usually built with a separate backend and frontend. They communicate through REST API, GraphQL, etc. This is because a SPA framework/library like React, Svelte, or Vue provides a _much_ better DX _and_ UX compared to the old school templating languages like EJS, HBS, Blade, etc.\n\nNow, what if, we combine the old school monolithic approach with those SPA frameworks/libraries? Thankfully, there's [InertiaJS][inertia-link]!\n\nIn this post, I'll try to explain how to get it up and running using Adonis and Svelte, but I won't use Typescript for Svelte to keep it simple.\n\n# What is InertiaJS\n\nQuoting from its website:\n\n> Inertia is a new approach to building classic server-driven web apps. We call it the modern monolith.\n\nBasically, it lets you use a SPA framework/library as the template language for your backend framework of choice, whether it be Laravel, Ruby on Rails, Adonis, [and many more.][adapter-link]\n\nYou should check [their website][inertia-link]! It has a thorough explanation of what it does, who is it for, how it works, etc.\n\nI'll assume you already know Adonis/Svelte since the new hotness here is InertiaJS.\n\n# Installation\n\n## Installing Adonis\n\nFirst thing first, we'll need to create a new adonis app. Simply run\n\n```bash\nnpm init adonis-ts-app@latest your-app-name\n```\n\nIf you're greeted with this prompt, choose `web`.\n\n```\nCUSTOMIZE PROJECT\n❯ Select the project structure …  Press \u003CENTER> to select\n  api   (Tailored for creating a REST API server)\n▸ web   (Traditional web application with server-rendered templates)\n  slim  (A smallest possible AdonisJS application)\n```\n\nPick whatever project name you like. Let's leave it as the default.\n\n```\nCUSTOMIZE PROJECT\n❯ Select the project structure · web\n❯ Enter the project name · my-app-name\n```\n\nYou'll be prompted to set up eslint/prettier or not. Either way is fine, but I personally prefer to set it to true (press `y` for true, `n` for false)\n\n```\nCUSTOMIZE PROJECT\n❯ Select the project structure · web\n❯ Enter the project name · my-app-name\n❯ Setup eslint? (y/N) · true\n❯ Setup prettier? (y/N) · true\n```\n\nWe'll also say true to the Webpack Encore setup.\n\n```\nCUSTOMIZE PROJECT\n❯ Select the project structure · web\n❯ Enter the project name · perpus\n❯ Setup eslint? (y/N) · true\n❯ Setup prettier? (y/N) · true\n❯ Configure webpack encore for compiling frontend assets? (y/N) ‣ true\n```\n\nAfter that, it will set up the project and you'll just need to `cd` to the project directory when it's done. In this case, it's `my-app-name`.\n\n## Installing inertia-adonisjs Adapter\n\nInertia only supports Laravel and Ruby on Rails officially, but there are a lot of [community adapters][adapter-link]. One of them is [inertia-adonisjs][inertia-adonis-link] which we will use in our project. Simply install it like a regular package and configure it using ace.\n\n```bash\n# install the package using npm\nnpm i @eidellev/inertia-adonisjs\n\n# configure the package using ace\nnode ace configure @eidellev/inertia-adonisjs\n```\n\nIt will give you several questions. Make sure you choose Svelte, you can leave the rest of them as default.\n\n```\n❯ Select the view you would like to use · app\n❯ Would you like to install Inertia.js? (Y/n) · true\n❯ Which client-side adapter would you like to set up? …  Press \u003CENTER> to select\n  Vue 2\n  Vue 3\n  React\n▸ Svelte\n```\n\n## Installing Svelte\n\nWe'll need the [svelte-loader][svelte-loader-link] and [svelte-preprocess][svelte-preprocess-link] for our app. As usual, install it using npm.\n\n```bash\nnpm i svelte-loader svelte-preprocess @babel/plugin-syntax-dynamic-import\n```\n\nWe need `@babel/plugin-syntax-dynamic-import` to be able to use the import syntax required for code splitting.\n\n# Configuration\n\n## Webpack configuration\n\nWe'll add svelte-loader and svelte-preprocess to our webpack configuration. Open up `webpack.config.js` in your favourite editor and add these lines.\n\n```javascript\nconst { join } = require(\"path\");\nconst Encore = require(\"@symfony/webpack-encore\");\n// add this line\nconst sveltePreprocess = require(\"svelte-preprocess\");\n\n/****the rest of the config****/\n\n// add this block\nEncore.addLoader({\n\ttest: /\\\\.svelte$/,\n\tloader: \"svelte-loader\",\n\toptions: {\n\t\temitCss: true,\n\t\tpreprocess: sveltePreprocess({}),\n\t},\n});\n\n/****the rest of the config****/\n\nconst config = Encore.getWebpackConfig();\nconfig.infrastructureLogging = {\n\tlevel: \"warn\",\n};\nconfig.stats = \"errors-warnings\";\n// add this line\nconfig.output.chunkFilename = \"js/[name].js?id=[chunkhash]\";\n```\n\n## Inertia configuration\n\nTo use Svelte, we need to initialise our app. To do that, go to `resources/js/app.js` and add this snippet.\n\n```javascript\nimport { createInertiaApp } from \"@inertiajs/inertia-svelte\";\nimport { InertiaProgress } from \"@inertiajs/progress\";\n\nInertiaProgress.init({\n\tshowSpinner: true,\n});\n\ncreateInertiaApp({\n\tresolve: (name) => import(`./Pages/${name}.svelte`),\n\tsetup({ el, App, props }) {\n\t\tnew App({ target: el, props });\n\t},\n});\n```\n\nWe also added `@inertiajs/progress` for the loading progress because SPA app doesn't trigger the browser's loading progress and it can become annoying when your app navigation is slow. This is a bad UX.\n\nOur Svelte files will live inside `resources/js/Pages` directory. When we want to render our app, we'll just reference its name and it will automatically get resolved by the `resolve` function. For example, `Foo` will resolve to `./Pages/Foo.svelte`.\n\nWe use `import` instead of `require` because we want to enable code splitting.\n\n## Adding assets\n\nDon't forget to link the javascript into our main entry point. Otherwise, there won't be anything rendered on the page. Simply add this in `resources/views/app.edge`.\n\n```hbs\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n\u003Chead>\n  \u003Cmeta charset=\"UTF-8\">\n  \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \u003Clink rel=\"icon\" type=\"image/png\" href=\"/favicon.ico\">\n  \u003Ctitle>App Title\u003C/title>\n\n  \u003C!-- add this line -->\n  \u003Cscript src=\"{{ asset('assets/app.js') }}\" defer>\u003C/script>\n\u003C/head>\n\u003Cbody>\n  @inertia()\n\u003C/body>\n\u003C/html>\n```\n\n# Usage\n\nFinally, let's see if it actually works. Create a new Svelte file in `resources/js/Pages/Foo.svelte` with this content.\n\n```svelte\n\u003Cscript>\nexport let text\n\u003C/script>\n\n\u003Ch1>Your Text: {text}\u003C/h1>\n```\n\nOpen `start/routes.ts` and add a new route for our Svelte app.\n\n```javascript\nRoute.get(\"/foo\", async ({ inertia }) => {\n\treturn inertia.render(\"Foo\", { text: \"Hello, World!\" });\n});\n```\n\nAs you can see, passing props is as simple as passing our data to the second argument. This data can come from anywhere, whether it be hardcoded, from the database, etc.\n\nTry running the server using `npm run dev` or `node ace serve --watch`.\n\nIf we open `http://localhost:3333/foo` (3333 is the default port, you can change it in `.env`), you should see a big text saying `Your Text: Hello, World!` which means our app is working!\n\n# References\n\nOf course, always refer to Adonis/Svelte/Inertia for more detailed API references, they all have extensive documentation (and a good website, too).\n\nHere are some references I used when trying this out.\n\n-   [eidellev/inertia-adonisjs](https://github.com/eidellev/inertiajs-adonisjs) - The adapter repository.\n-   [Adonis, Inertia, and Svelte by Eidellev](https://medium.com/@jyrki-grohn/adonis-inertia-and-svelte-5291abedea65) - This one is kinda outdated, that's why I made this post.\n-   [danangponorogo/adonisvelnertia](https://github.com/danangponorogo/adonisvelnertia)\n\n# Closing Note\n\nInertia is an interesting library indeed. It might not be suitable for _every_ use case but if you want to build an app where you want to use a SPA library but don't bother with fetching the data from the API then this is perfect for you.\n\nHopefully this post helped you and have a nice day! :)","src/content/posts/combining-adonis-and-svelte-using-inertia.mdx","e4f65f5a24fa4801","combining-adonis-and-svelte-using-inertia.mdx","comments-widget-using-utterance",{"id":688,"data":690,"body":695,"filePath":696,"digest":697,"legacyId":698,"deferredRender":15},{"draft":25,"title":691,"date":692,"description":693,"tags":694},"Utterances - Comment section that just works",["Date","2021-02-22T00:00:00.000Z"],"I've been wanting to add a comment section to my website because why not",[671],"[gatsby-link]: https://www.gatsbyjs.com/\n[react-link]: https://reactjs.org/\n[svelte-link]: https://svelte.dev/\n[sapper-link]: https://sapper.svelte.dev/\n[mdsvex-link]: https://mdsvex.com/\n[disqus-link]: https://disqus.com/\n[utterances-link]: https://github.com/utterance/utterances\n[utterances-web]: https://utteranc.es/\n[giscus-web]: https://giscus.app/\n[issue-link]: https://github.com/utterance/utterances/issues/427\n\n# Introduction\n\nIf you've been following my website long enough, you might have known that I remake my website quite a while ago. I went from [Gatsby][gatsby-link] which uses [React][react-link] + MD to [Sapper][sapper-link] which uses [Svelte][svelte-link] + [MDsveX][mdsvex-link].\n\nI had a comment section on my old website using [Disqus][disqus-link]. I want to add that to my new website but I think that's not really what I want because it requires a Disqus Account. While I was browsing through Github, I found [Utterances][utterances-link]. It uses Github issues to store the comments, I think this is great! I'm pretty sure most people who visit my website already have a Github account, they wouldn't need to create a new account.\n\n# Installation\n\nAdding **utterances** is really straightforward, you just need to go to [their website][utterances-web], fill the configuration, and grab the snippet. The next step is putting it where you want it to appear. In my case, it's below every post. Here's a short snippet to illustrate what I meant.\n\n```html\n\u003Csection>\n\t\u003Cmain>\n\t\t\u003C!-- This is the main content -->\n\t\t\u003Ch1>Comments\u003C/h1>\n\t\t{#if $theme === \"dark\"}\n\t\t\u003Cdiv>\n\t\t\t\u003Cscript\n\t\t\t\tsrc=\"https://utteranc.es/client.js\"\n\t\t\t\trepo=\"elianiva/elianiva.my.id\"\n\t\t\t\tissue-term=\"pathname\"\n\t\t\t\tlabel=\"Comments\"\n\t\t\t\ttheme=\"dark-blue\"\n\t\t\t\tcrossorigin=\"anonymous\"\n\t\t\t\tasync\n\t\t\t>\u003C/script>\n\t\t\u003C/div>\n\t\t{:else}\n\t\t\u003Cdiv>\n\t\t\t\u003Cscript\n\t\t\t\tsrc=\"https://utteranc.es/client.js\"\n\t\t\t\trepo=\"elianiva/elianiva.my.id\"\n\t\t\t\tissue-term=\"pathname\"\n\t\t\t\tlabel=\"Comments\"\n\t\t\t\ttheme=\"github-light\"\n\t\t\t\tcrossorigin=\"anonymous\"\n\t\t\t\tasync\n\t\t\t>\u003C/script>\n\t\t\u003C/div>\n\t\t{/if}\n\t\u003C/main>\n\u003C/section>\n```\n\nI added an `if-statement` because my website has light-theme and dark-theme and **utterances** doesn't support changing the theme on-the-fly, at least _yet_. It's an [open issue][issue-link]. You could do something similar with CSS where you hide one of the comment sections depending on the active theme.\n\n# Closing Note\n\nI wasn't thinking about making this post but ended up making it so I can test the comment section XD\n\nIt's a lot shorter than usual, but still, thank you if you've read this far. Have a wonderful day! :)\n\nimport Update from \"~/components/Update.astro\";\n\n\u003CUpdate date=\"2022-09-29\">\n\nAs of now, I updated my website to use [Giscus][giscus-web] because I realised that if I use the issues page for comments, it's harder for me to keep track of the actual issues :p\n\n\u003C/Update>","src/content/posts/comments-widget-using-utterance.mdx","e2b7d2b20c92b998","comments-widget-using-utterance.mdx","defx-nvim",{"id":699,"data":701,"body":707,"filePath":708,"digest":709,"legacyId":710,"deferredRender":15},{"draft":25,"title":702,"date":703,"description":704,"tags":705},"Defx, A Dark Powered File Explorer",["Date","2020-02-22T00:00:00.000Z"],"Trying out yet another plugin for neovim called defx.nvim.",[706],"neovim","# Introduction\n\nHi everyone! This time I will talk about a (Neo)vim plugin called [Defx](https://github.com/airblade/defx.nvim). I've been looking for an alternative to [NERDTree](https://github.com/preservim/nerdtree) for quite a while now. I came across this plugin from a telegram channel called \"Vim Indonesia\". Since I have no project that I'm currently working on, why don't I give it a shot?\n\n# Installation\n\nThe installation is pretty simple. You can add this plugin just like any other plugin from your plugin manager. I'm using [vim-plug](https://github.com/junegunn/vim-plug) as my plugin manager. To add a plugin, I would simply add this into my plugin list.\n\n```vim\nif has('nvim')\n  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }\nelse\n  Plug 'Shougo/defx.nvim'\n  Plug 'roxma/nvim-yarp'\n  Plug 'roxma/vim-hug-neovim-rpc'\nendif\n```\n\nAfter doing that, I source my init.vim using `:so ~/.config/nvim/init.vim` and then just run `:PlugInstall` to install it. Make sure your (Neo)vim supports Python 3.\n\n# Configuration\n\n## Keybindings\n\nTo toggle Defx, you'd run `:Defx`. To make it efficient, let's assign that to a keystroke. To do that, I add this into my config\n\n```vim\nnnoremap \u003CC-n> :Defx\n```\n\nFinally, we can just simply press `ctrl+n` to toggle it. Awesome!\n\nYou'll notice that by default it doesn't handle keypress to open a directory, open a file, add a file, etc like NERDTree. You have to add that by yourself. Thankfully, there is [this blog](https://tsarafatma.com/neovim/2020/02/08/defx-file-explorer-for-neovim) that helped me making those keybindings. What you need to do is to add this long lines of vimscript to your config file.\n\n```vim\nautocmd FileType defx call s:defx_my_settings()\nfunction! s:defx_my_settings() abort\n  \" Define mappings\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> \u003CCR> defx#do_action('drop')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> c defx#do_action('copy')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> m defx#do_action('move')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> p defx#do_action('paste')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> l defx#do_action('open')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> E defx#do_action('open', 'vsplit')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> P defx#do_action('open', 'pedit')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> o defx#do_action('open_or_close_tree')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> K defx#do_action('new_directory')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> N defx#do_action('new_file')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> M defx#do_action('new_multiple_files')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> S defx#do_action('toggle_sort', 'time')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> d defx#do_action('remove')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> r defx#do_action('rename')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> ! defx#do_action('execute_command')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> x defx#do_action('execute_system')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> yy defx#do_action('yank_path')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> . defx#do_action('toggle_ignored_files')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> ; defx#do_action('repeat')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> h defx#do_action('cd', ['..'])\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> ~ defx#do_action('cd')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> q defx#do_action('quit')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> \u003CSpace> defx#do_action('toggle_select') . 'j'\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> * defx#do_action('toggle_select_all')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> j line('.') == line('$') ? 'gg' : 'j'\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> k line('.') == 1 ? 'G' : 'k'\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> \u003CC-l> defx#do_action('redraw')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> \u003CC-g> defx#do_action('print')\n  nnoremap \u003Csilent>\u003Cbuffer>\u003Cexpr> cd defx#do_action('change_vim_cwd')\nendfunction\n```\n\nAs usual, don't get intimidated by the long block of code. It's just a bunch of keybinds. You can customize it however you want.\n\n## Using split window\n\nAs you can see, Defx looks way more plain than NERDTree. Let's change that! First thing first, we make it split instead of fullscreen and put it to the left of our screen. To do that, add this to your config.\n\n```vim\n\" Set appearance\ncall defx#custom#option('_', {\n      \\ 'winwidth': 30,\n      \\ 'split': 'vertical',\n      \\ 'direction': 'topleft',\n      \\ 'show_ignored_files': 0,\n      \\ 'buffer_name': 'defxplorer',\n      \\ 'toggle': 1,\n      \\ 'resume': 1,\n      \\ })\n```\n\nLet me quickly explain to you what does what.\n\n**winwidth** : It's pretty straight forward. This field sets the minimum width for the Defx window width.\n\n**split** : This field sets the mode of the split. You can fill this with horizontal or vertical. In our case, it's vertical.\n\n**direction** : This field sets the position of the split. In our case, it's topleft which will make it split to the left. The other possible values are available through `:h defx`.\n\n**show_ignored_files** : This option will decide whether it will display the hidden files or not. In our case, it's not getting displayed.\n\n**buffer_name** : Basically, it sets the buffer name for defx window.\n\n**toggle** : This field makes Defx window toggleable. I recommend you to fill this field with 1.\n\n**resume** : This field makes Defx resume-able. It saves the state of where your cursor is so you don't have to navigate from the root of your project directory again after you close Defx and open it again.\n\nAll right, let's see what we've got so far.\n\n![preview](/assets/posts/defx-nvim/preview.png)\n\nIt looks ok to me, but not quite yet. Let's take it even further by adding some icons to make it eye candy. This next step is optional. If you don't want any icon, you can skip it.\n\n## Adding icons\n\nYou know how file explorer in most text editor right? They have an icon that indicates whether it's a folder or a file. Let's replicate that in our case.\n\nI use a plugin called [defx-icons](https://github.com/kristijanhusak/defx-icons). As the name says, it will add some fancy icons to our file explorer. The installation is the same as Defx installation. Add this line to your config.\n\n```vim\nPlug 'kristijanhusak/defx-icons'\n```\n\nMake sure to source your new config and do `:PlugInstall` after that. Make sure your terminal is using a patched font which you can get from [here](https://www.nerdfonts.com/font-downloads) so the icons will be displayed correctly. The installation process is finished, let's configure it now! It's simple, just add this block of code into your config.\n\n```vim\n\" Set appearance\ncall defx#custom#option('_', {\n      \\ 'winwidth': 30,\n      \\ 'split': 'vertical',\n      \\ 'direction': 'topleft',\n      \\ 'show_ignored_files': 0,\n      \\ 'buffer_name': 'defxplorer',\n      \\ 'toggle': 1,\n      \\ 'columns': 'icons:filename',\n      \\ 'resume': 1,\n      \\ })\n```\n\nAs you can see, I added the columns field to the custom option function. It tells Defx to display the icons from our previous plugin. Now, I want to add those arrow symbol that indicates a directory. Let's add that to our config.\n\n```vim\ncall defx#custom#column('icon', {\n      \\ 'directory_icon': '▸',\n      \\ 'opened_icon': '▾',\n      \\ })\n```\n\nThis block of code creates a new column for the arrow icon. Let's add that to our custom option function.\n\n```vim\n\" Set appearance\ncall defx#custom#option('_', {\n      \\ 'winwidth': 30,\n      \\ 'split': 'vertical',\n      \\ 'direction': 'topleft',\n      \\ 'show_ignored_files': 0,\n      \\ 'buffer_name': 'defxplorer',\n      \\ 'toggle': 1,\n      \\ 'columns': 'icon:indent:icons:filename',\n      \\ 'resume': 1,\n      \\ })\n```\n\nThere we have it, people. We just transformed Defx to look like most IDE/Text Editor file explorer. Let's compare it side by side.\n\n![before](/assets/posts/defx-nvim/before.png)\n![after](/assets/posts/defx-nvim/after.png)\n\n# Conclusion\n\nI think Defx is a good alternative to NERDTree and is worth to try. Some people said that it's faster and lighter than NERDTree, but it's not that significant in my experience. Anyway, let's end this post here. If you get confused, feel free to hit me up! That's it, see ya next time :)","src/content/posts/defx-nvim.mdx","507f7f80c31ee89e","defx-nvim.mdx","es6-array-methods",{"id":711,"data":713,"body":719,"filePath":720,"digest":721,"legacyId":722,"deferredRender":15},{"draft":25,"title":714,"date":715,"description":716,"tags":717},"ES6 high order array methods explained",["Date","2020-07-29T00:00:00.000Z"],"A post where I try to explain ES6 array methods in a simplest way possible that I could think of.",[718],"javascript","# Introduction\n\nECMAScript 6 introduces some new array methods that is useful to loop through an array items. In this post, I'll try to explain how I understand some ES6 high order array methods like `map()`, `filter()`, `reduce()`, `forEach()`, etc. Hopefully you will understand more about these methods after reading this post. Let's get started.\n\n# High Order Array Methods\n\n## Find\n\nThe first method is `Array.prototype.find()`. Just like the name suggest, it will find the item that you are looking for. It will return the item if the function returns true. Here's an example.\n\n```javascript\nconst users = [\n\t{\n\t\tid: 1,\n\t\tname: \"John Doe\",\n\t\tadmin: false,\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Lukas Smith\",\n\t\tadmin: true,\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"Erina Matsumoto\",\n\t\tadmin: false,\n\t},\n];\n\n// will return {id: 1, name: \"John Doe\", admin: false}\nusers.find((user) => user.id === 1);\n```\n\nAs you can see from the example, `Array.prototype.find()` returns the first item because we give it a condition to check if the item that is currently looping has the `id` of 1.\n\nWhat if there are multiple matches? Well, `.find()` will only return the first match it found. So if you would type\n\n```javascript\nuser.find((user) => !user.admin);\n```\n\nIt will return the first match which is `{id: 1, name: \"John Doe\", admin: false}`. If you want it to spit an array with matching condition, then you would use `.filter()` which we will talk about later.\n\n`Array.prototype.find()` will return undefined if the given condition is not fulfilled (the item that you're looking for is not available). You can play around with this [here](https://repl.it/@elianiva/find-method).\n\n## Filter\n\nLike I said earlier, if you want multiple results based off on your condition then you would use `Array.prototype.filter()`. Let's try it with the code below.\n\n```javascript\nconst cities = [\n\t{ name: \"Hiroshima\", country: \"Japan\" },\n\t{ name: \"Sendai\", country: \"Japan\" },\n\t{ name: \"London\", country: \"England\" },\n\t{ name: \"Brighton\", country: \"England\" },\n\t{ name: \"Jakarta\", country: \"Indonesia\" },\n\t{ name: \"Bandung\", country: \"Indonesia\" },\n];\n\n// will return all cities in Japan\ncities.filter((city) => city.country === \"Japan\");\n```\n\nAs you would expect, it returns an array with matching items. The code above will give us this result.\n\n```javascript\n[\n\t{ name: \"Hiroshima\", country: \"Japan\" },\n\t{ name: \"Sendai\", country: \"Japan\" },\n];\n```\n\nYou can play around with the code snippet above [here](https://repl.it/@elianiva/filter-method)\n\n## Some\n\nWhat if you want to check if an array have some condition that you want? Well, `Array.prototype.some()` got you covered. This method checks if an array have _some_ condition that you want. Take a look at this example.\n\n```javascript\nconst items = [\n\t{ name: \"Phone\", discount: true },\n\t{ name: \"Laptop\", discount: false },\n\t{ name: \"Keyboard\", discount: false },\n\t{ name: \"Mouse\", discount: true },\n\t{ name: \"Monitor\", discount: false },\n];\n\n// will return true\nitems.some((item) => item.discount);\n```\n\nAs you can see, it returns `true` because there are _some_ items that is currently in a discount. Go ahead and try to change them all to `false` on [repl.it](https://repl.it/@elianiva/some-method).\n\n## Every\n\nOK great, now you can check whether or not an array has some items that match you requirements. There's also a method that will return `true` if _every_ one of them matches your condition. Check the code below.\n\n```javascript\nconst students = [\n\t{ name: \"Erika\", passed: true },\n\t{ name: \"Himawari\", passed: false },\n\t{ name: \"Irene\", passed: false },\n\t{ name: \"Suzuka\", passed: true },\n\t{ name: \"Riku\", passed: true },\n];\n\n// will return false\nstudents.every((student) => student.passed);\n```\n\nIt returns false because we need _every_ single one of the student passed. As always, you can play around with the code above [here](https://repl.it/@elianiva/every-method).\n\n## ForEach\n\n`Array.prototype.forEach()` is useful if you want to just loop through an array and don't want to return anything. For example, if you just want to `console.log()` every item of an array.\n\n```javascript\nconst songs = [\"Road of Resistance\", \"Pretender\", \"Megitsune\", \"Feel It Still\", \"Arkadia\"];\n\n// will not return anything\nsongs.forEach((song) => console.log(song));\n```\n\nYou can play around with this method [here](https://repl.it/@elianiva/foreach-method).\n\n## Map\n\nSimilar to `.forEach()`, `Array.prototype.map()` will also loop through each item in an array but it will return a new array. Here's an example.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\n// will return multiplied value\nnumbers.map((num) => num * 2);\n```\n\nI use this method more often than `.forEach()` because most of the time I need to process that item and returns a new array with the result. You can play around with this [here](https://repl.it/@elianiva/map-method).\n\n## Reduce\n\nFinally, `Array.prototype.reduce`. This method is quite hard for me to understand initially. It's sort of like merges the array. The first argument is the function handler that takes 2 arguments and the second argument is the initial value. The function's first argument called `accumulator` has the result of current iteration. The second argument called `currentValue` has the current item in an array. Let's look at the code and hope it will make more sense.\n\n```javascript\nconst numbers = [1, 1, 1, 1, 1];\n\n// will return 5\nnumbers.reduce((acc, curr) => acc + curr);\n```\n\nLet's make an analogy of that to make things simpler. Suppose you have a jar. That jar is the `accumulator`. The first time you have it, it's empty. Then you started to pick an item from a box. The box is an array and the item is the `currentValue`. You pick the item one by one, adding the total of the items in the jar (`accumulator`) with the item that you are picking (`currentValue`). Eventually, you will end up with 5 items. Same goes to the code above.\n\nIf you give it a second argument which is `initialValue`, then it will start from that value instead of 0. Just like if you have a jar filled with some items already.\n\n```javascript\nconst numbers = [1, 1, 1, 1, 1];\n\n// will return 10\nnumbers.reduce((acc, curr) => acc + curr, 5);\n```\n\nReduce method is quite hard to understand at first, don't worry. Reduce deserves an article in itself, check out [this article](https://alligator.io/js/finally-understand-reduce/) to understand `reduce()` even more.\n\n# References\n\nThere are so many references for these methods out there already. [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) is one of the best reference out there if you want something more technical and detail. Also checkout [this tweet](https://twitter.com/profulsadangi/status/1288053880010334208) (and follow him too! He shared _a lot_ of useful stuff in a form of simple yet concise sketch).\n\n# Conclusion\n\nThese methods that ES6 introduces is so useful. We no longer need to create a `for loop` that iterates through the whole array and then do something. Let me know what you think about this. See ya next time ツ","src/content/posts/es6-array-methods.mdx","22b28ba24733d217","es6-array-methods.mdx","from-sapper-to-kit",{"id":723,"data":725,"body":730,"filePath":731,"digest":732,"legacyId":733,"deferredRender":15},{"draft":25,"title":726,"date":727,"description":728,"tags":729},"Migrating from Sapper to SvelteKit",["Date","2021-04-14T00:00:00.000Z"],"A post about my experience migrating my blog to SvelteKit.",[683,671],"[pre-link]: /posts/trying-out-sveltekit#introduction\n[beta-link]: https://svelte.dev/blog/sveltekit-beta\n[adder-link]: https://github.com/svelte-add/svelte-adders\n[abbr-link]: https://kit.svelte.dev/docs#modules\n[err-img-link]: /assets/posts/from-sapper-to-kit/error.png\n[svg-link]: https://github.com/vitejs/vite/issues/1204\n[endpoint-link]: https://kit.svelte.dev/docs#routing-endpoints\n\n# Introduction\n\nSvelte-Kit has been hyping me up this last couple of months. You _might_ want to read my [previous post][pre-link] where I write about my very first experience of trying Svelte-Kit. I think it's _good enough_ for me to migrate my website using Sapper to Svelte-Kit.\n\nWhen I migrate my site it wasn't in public beta, but the repo is public on Github. Then a few days later, the Svelte team [opened a public beta][beta-link] for Svelte-Kit. Anyway, here's my entire process, more or less ;)\n\n# Process\n\n## Migration Strategy\n\nI didn't fully follow the migration guide, I started from a clean Svelte-Kit template and move my file one by one from the old website to the new one. The reason why is because I want to refactor my website instead of just migrate it, and it felt easier to do it this way.\n\n## Initial Setup\n\nI found this tool called [svelte-adders][adder-link] which makes my life _so much_ easier. I can add MDSveX and PostCSS in no time using this. Simply run this command and you're good to go.\n\n```\nnpx svelte-add mdsvex\nnpx svelte-add postcss\n```\n\n## File Structure\n\nSvelte-Kit has this alias called `$lib` and [many others][abbr-link]. It made my file structure cleaner and nicer to work with. It prevents me from doing this `../../../../` nonsense. I know that I can create my own alias, but it's nice to have it out of the box.\n\n```javascript\n// you'd do this\nimport asdf from \"$lib/asdf-module\";\n\n// instead of this nonsense\nimport asdf from \"../../../asdf-module\";\n```\n\n## From JS to TS\n\nI've been wanting to move from Javascript to Typescript for quite a while. When I make my website, svelte language server or ESLint didn't have support for Typescript, yet. They both support it now and I think it's a perfect time to move to Typescript.\n\nAs expected, I got _a lot_ of type errors, but they're easily fixable. It felt really good to finally use Typescript for my own website.\n\nOne minor issue though, it seems like MDSveX layouts don't have support for Typescript, at least _yet_. So I didn't use Typescript for those.\n\n## SVGs\n\nI decided to convert _all_ of my SVG assets into Svelte components manually because Vite hasn't support inline-svg, [yet][svg-link]. It was painful to do, but oh well, I can't complain ツ\n\n## Server Routes\n\nIt is called as `endpoints` according to [the docs][endpoint-link]. It looks a bit different from the one in Sapper, but it's pretty straightforward to migrate.\n\n### Sapper\n\n```javascript\nimport { getResources } from \"../../utils/fetch-all.js\";\n\nexport async function get(req, res, next) {\n\tconst { limit, title } = req.query;\n\n\tlet result = getResources(\"post\");\n\n\tif (limit) result = result.slice(0, limit);\n\tif (title) result = result.filter((item) => item.title === title);\n\n\tif (result !== null) {\n\t\tres.setHeader(\"Content-Type\", \"application/json\");\n\t\tres.end(JSON.stringify(result));\n\t\treturn;\n\t}\n\n\tnext();\n}\n```\n\n### Sveltekit\n\n```typescript\nimport { getResources } from \"$lib/utils/fetch-data\";\nimport type { RequestHandler } from \"@sveltejs/kit\";\n\nexport const get: RequestHandler = async ({ query: q }) => {\n\tlet result = getResources(\"post\");\n\n\tconst limit = parseInt(q.get(\"limit\"));\n\tconst title = q.get(\"title\");\n\n\tif (limit) result = result.slice(0, limit);\n\tif (title) result = result.filter((item) => item.title === title);\n\n\tif (result) {\n\t\treturn {\n\t\t\tstatus: 200,\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: result,\n\t\t};\n\t}\n\n\treturn {\n\t\tstatus: 404,\n\t\tbody: \"Not Found\",\n\t};\n};\n```\n\nThe main difference here is, you'd need to call a specific function (`res.end`) to return a response in Sapper, while in Svelte-Kit, you simply return an object and that counts as the response.\n\n## Loading Progress\n\nI had a loading progress bar in my old website which utilises the `preloading` store from `@svelte/app` stores. In Svelte-Kit, I use `$navigating` store, it also provides `from` and `to` property which I think could be useful.\n\n## Error Pages\n\nI had an issue with Svelte-Kit error page where it doesn't want to load the CSS. It was a blocker for a few days, but thankfully it has been solved.\n\nSvelte-Kit also has a new error popup which I believe comes from Vite. It looks similar to NextJS's error popup if you've used NextJS before.\n\n![error][err-img-link]\n\n# Closing Notes\n\nOverall, I think it's pretty easy to do a migration from Sapper to Svelte-Kit. There are some things that I still want to do like using Shiki for code block highlighting since MDSveX now supports custom async highlighter. The Svelte team did a great job making the migration experience as seamless as possible, and I'm grateful for that!\n\nAnyway, thanks for reading my post and have a wonderful day! :)","src/content/posts/from-sapper-to-kit.mdx","df1ae6cd11075a82","from-sapper-to-kit.mdx","github-actions",{"id":734,"data":736,"body":741,"filePath":742,"digest":743,"legacyId":744,"deferredRender":15},{"draft":25,"title":737,"date":738,"description":739,"tags":740},"Using github actions for SSG deployment",["Date","2020-08-01T00:00:00.000Z"],"Utilizing github action to automate boring stuff which is building and deploying SSG manually",[671],"# Introduction\n\nPreviously, I use [Travis CI](https://travis-ci.org) to automatically deploy my site so if I push an update to my repo it will trigger a build and deploy it to github page. Turns out, github has a built in feature for CI/CD called **Github Actions**. In this post, I'll tell you how my experience using it.\n\n# Initial Setup\n\n## Removing Travis CI\n\nBecause my previous site is using [Travis CI](https://travis-ci.org), I need to delete the old `travis.yml`. If you haven't use any CI/CD before then just skip this step.\n\n## Setting up Github Action\n\nTo get started, you will need a file called whatever you want inside `.github/worksflows/` on your root project, I call it `main.yml`. You can also go to **Actions** tab on your repo and you'll find a bunch of preset that github gives you which you can then modify according to your wish.\n\n# Configuration\n\n## File configuration\n\nThe yaml file is pretty simple, here's mine and I'll explain it briefly each part.\n\n```yaml\nname: Build and deploy\n\non:\n    push:\n        branches: master\n\njobs:\n    build-and-deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v2\n\n            - name: setup node\n              uses: actions/setup-node@v2-beta\n              with:\n                  node-version: \"12.x\"\n\n            - name: install deps\n              run: npm install --production\n\n            - name: build site\n              run: npm run build\n\n            - name: deploy site\n              uses: peaceiris/actions-gh-pages@v3\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n                  publish_dir: ./public\n```\n\n-   **name**\n\n    Fill this field with whatever you want, it is used as a name for your action that will show up on github.\n\n-   **on:[action]:[branch]**\n\n    This field is to tell github what action will trigger the github action. For example, I use `push` which will trigger github action if I did a push on `master` branch.\n\n-   **jobs**\n\n    This field will be filled with jobs or commands that github action will do based on previous field.\n\n-   **build**\n\n    This is the job name, fill it with whatever you want. In my case, I fill it with `build-and-deploy`\n\n-   **runs-on**\n\n    This field specify on which platform the action will run. I fill it with `ubuntu-latest`.\n\n-   **steps**\n\n    The steps for your action will go here. There are few steps before deploying my site such as setting up node, installing dependencies, building the site, and then deploy it to github pages.\n\n    -   **name**\n        Fill this with the name of your step, `setup node` for example.\n\n    -   **run**\n        This is where you define a command to run\n\n    -   **uses**\n        If you use an external action, fill this in. It's available [here](https://github.com/marketplace?type=actions)\n\n    -   **with**\n        This is used to pass any additional data such as `node-version`, `GITHUB_TOKEN`, etc.\n\nThose are my brief explanation and how I understand each fields. If you want more details, please visit [this documentation](https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow).\n\n## See it in action\n\nWe've set up the config file, time to see it in action. Push the config file to the remote repo and go to github action tab.\n\n![action tab](/assets/posts/github-actions/1.png)\n\nIf we click one of the action from the list, it will go to its own page which will look like this.\n\n![action page](/assets/posts/github-actions/3.png)\n\nOur action name will show up here. Try to click on that.\n\n![action name](/assets/posts/github-actions/4.png)\n\nIt will show this. The log of our action's jobs.\n\n![action jobs](/assets/posts/github-actions/5.png)\n\n# Conclusion\n\nThe reason why I moved from Travis CI is not because Travis CI is bad or anything. It's just I want to try a new thing, plus it's available on the same site that my repo is hosted. I can just visit one site to check on my repo or my build status.\n\nNot gonna lie, I messed up the first time I did this lol. I messed up the config file (mainly because wrong indentation) and I messed up my repo branch because I had to move my `source` branch to `master` branch and I did it in an overcomplicated way.","src/content/posts/github-actions.mdx","adc04d6e1275cb7d","github-actions.mdx","how-i-memorise-heijitsu",{"id":745,"data":747,"body":752,"filePath":753,"digest":754,"legacyId":755,"deferredRender":15},{"draft":25,"title":748,"date":749,"description":750,"tags":751},"How I Memorise Japanese Weekdays",["Date","2020-09-17T00:00:00.000Z"],"A post where I try to explain how I memorise Japanese weekdays in my own weird way.",[658],"# Introduction\n\nThis will be a short post. I just want to share how I memorise Japanese weekdays (平日) or heijitsu. I am no expert at japanese just to clarify. Maybe someone will find this useful so might as well share my way of memorising it.\n\n# Heijitsu\n\nWeekdays in japanese is called **Heijitsu** or **平日**. It has a **youbi** or **曜日** suffix so in order to memorise it, we only need to memorise the first kanji. Easy enough right?\n\n## Sunday (日曜日)\n\nThe first one is Monday (nichiyoubi). In order to memorise it, I simply take **Sun** in **Sunday** and refer it as **Sun**. The 日 kanji means sun. Also, because I love Babymetal so much, I memorise it as **Su**(nday). Why? you might ask. Well, Metal Galaxy live album is divided into 2 parts and the one that has **Su** in it has a **Sun** background. Maybe it's weird, but meh, I don't care. I mean, it works ツ\n\n## Monday (月曜日)\n\nSecond one is Monday (getsuyoubi). Similar to the first one, I take **Mon** from **Monday** and refer it as **Moon**. The 月 kanji means **Moon** or **Month**. Also, same as before, I also memorise this **Moa** from Babymetal. You might have guessed it. Yes, it has **Moon** background for the album cover. I mean, as long as it works, who cares ツ\n\n## Tuesday (火曜日)\n\nThird one is Tuesday (kayoubi). I memorise this as it is. The kanji **火** (hi) means **Fire**. For some reason I always think this sentence, \"Tuesday is on fire\". I don't know why, but it is what it is.\n\n## Wednesday (水曜日)\n\nFourth one is Wednesday (suiyoubi). I take **Wed** from **Wednesday** and refer it as **Wet** because the kanji **水** means **Water**. Simple enough, nothing weird with this one.\n\n## Thursday (木曜日)\n\nFifth one is Thursday (mokuyoubi). The kanji **木** means **Tree** and **Thurs** to me is similar enough with the word **Tree**. So that's how I memorise it.\n\n## Friday (金曜日)\n\nSixth one is Friday (kinyoubi). The kanji **金** (kane) means **Money** (お金). I memorise it as it is, no weird mnemonic or anything. Friday is 金曜日.\n\n## Saturday (土曜日)\n\nLast one is Saturday (doyoubi). I memorise this as **Saturn day**. The kanji **土** (do or tsuchi) means earth or land. Why do I memorise it as Saturn? You might ask. Well, if you look at the saturn symbol it has a similar shape with **土**.\n\n# Conclusion\n\nThat's about it for this post. Once again, I am no expert at Japanese but I just want to share how I memorise it and maybe someone will find this useful. Thanks for reading this! ツ","src/content/posts/how-i-memorise-heijitsu.mdx","6d9e8327efade1a2","how-i-memorise-heijitsu.mdx","how-i-use-latex-as-a-uni-student",{"id":756,"data":758,"body":765,"filePath":766,"digest":767,"legacyId":768,"deferredRender":15},{"draft":15,"title":759,"date":760,"description":761,"tags":762},"How I use LaTeX as a uni student",["Date","2022-11-01T00:00:00.000Z"],"A post about how I use LaTeX to write documents as a Uni student.",[763,764],"latex","notetaking","# Introduction\n\nHello there! It has been a _very_ long time since I wrote something here. I didn't know being a uni student would make me so occupied with a lot of stuff.\nAnyway, since I am now a uni student I get to use LaTeX more often, which is great!\nOur lecturer didn't told us to use LaTeX specifically, but I've been wanting to have a chance to use it when I was still in high school, and now I have the chance to use it for every assignments.\n\nThere are a lot for me to learn, so I decided to write them all down here so that I won't forget a thing and maybe you can also get something useful from this note!\n\n# What is LaTeX?\n\nFirst of all, if you don't know what LaTeX is, quoting from [its website](https://www.latex-project.org/):\n\n> \"LaTeX is a high-quality typesetting system; it includes features designed for the production of technical and scientific documentation. LaTeX is the de facto standard for the communication and publication of scientific documents.\"\n\nIn a simpler term, it's basically a way to write high-quality document without ever touching a rich text editor such as Microsoft Word by using a language that will be compiled to a `.pdf`. If you know Markdown, LaTeX is like a more complex and fancy version of it.\n\nIt is usually used to write scientific documents where it contains a lot of math equations. Though, I usually use it to write regular documents with some codeblocks. The result looks more neat and it took less time for me compared to using a WYSIWYG editor.\n\n# My LaTeX Setup\n\n## LaTeX Installation\n\nI was previously using ArchLinux, so I can just easily install LaTeX from the package manager. Now, because of several reasons, I'm using Windows and WSL2 Debian on my Laptop. Installing it inside WSL is a breeze but installing it on Windows is a bit cumbersome. I couldn't use `winget` (for some reason?) so I need to grab the [TeXLive installer](https://www.tug.org/texlive/). I didn't know if the installed package is quite big, around 7GB on my machine.\n\nAt first, I decided to install LaTeX inside WSL, but then all my other assignments are more suitable if I put it inside Windows. Opening Windows drive from WSL is sluggish. Although, I still have it installed on both places.\n\n## Editor\n\nIt doesn't matter which editor you use. LaTeX files are just plain text files. As long as you can edit the text, you'll be fine. But, I recommend you to use a text editor that has some sort of autocomplete or suggestion because there are _a lot_ of LaTeX macros that you can use and having a \"smart\" editor will help you.\n\nI used [Neovim](https://neovim.io) as my editor with [VimTeX](https://github.com/lervag/vimtex) plugin before, but now I'm using [Visual Studio Code](https://code.visualstudio.com/) with [Latex Workshop](https://github.com/James-Yu/LaTeX-Workshop) extension.\n\n# LaTeX Basics\n\nI will give a short introductory to LaTeX basic to help you get started. Let's try to make a document with a cover and some contents. To make it easier for me, this section assumes you're using [Visual Studio Code](https://code.visualstudio.com/) with [Latex Workshop](https://github.com/James-Yu/LaTeX-Workshop) installed since that's what I use. For other editor/CLI usage, please google it yourself, sorry :)\n\nThis section only covers what I used through uni, so it won't cover _everything_ but it should be enough to get you started.\n\n## Creating document\n\nLaTeX file have a `.tex` extension. When we compile it, it will produce a lot of auxiliary files so make sure you create the file inside a directory. For example, I'll have mine in `latex-example/my-document.tex`.\n\n### Document Class\n\nIn LaTeX, we have something called `documentclass`. It basically tells the latex compiler which type of document we want to create. I usually use the `article` class because that's what I use LaTeX for, but there are also a bunch of other classes.\n\n| Name         | Description                                                                                                                          |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------ |\n| **article**  | For articles in scientific journals, presentations, short reports, program documentation, invitations, ...                           |\n| **IEEEtran** | For articles with the IEEE Transactions format.                                                                                      |\n| **proc**     | A class for proceedings based on the article class.                                                                                  |\n| **minimal**  | It is as small as it can get. It only sets a page size and a base font. It is mainly used for debugging purposes.                    |\n| **report**   | For longer reports containing several chapters, small books, thesis, ...                                                             |\n| **book**     | For books.                                                                                                                           |\n| **slides**   | For slides. The class uses big sans serif letters.                                                                                   |\n| **memoir**   | For sensibly changing the output of the document. It is based on the book class, but you can create any kind of document with it [1] |\n| **letter**   | For writing letters.                                                                                                                 |\n| **beamer**   | For writing presentations (see [LaTeX/Presentations](https://en.wikibooks.org/wiki/LaTeX/Presentations)).                            |\n\nThe table above lists a few of common document classes, but there are also a lot more of them which you can see [on this CTAN page](https://ctan.org/topic/class).\n\nLet's use the `article` document class. To apply a document class, we use the `\\documentclass` macro. We need to write it at the very top of our file before everything else. Our file should now look like this:\n\n```tex\n\\documentclass{article}\n```\n\nIt is not ready for anything just yet, so don't bother trying to compile it.\n\nIf you use Visual Studio Code with Latex Workshop, you should be able to place your cursor inside the curly braces of `\\documentclass{}` and press `ctrl+space`, it should show a suggestion list for the available document classes.\n\n### Hello World\n\nTo write the content of a document in latex, we use the `\\begin{document}` and `\\end{document}` macro. The `\\begin{}` and `\\end{}` is used to start and end an environment. It marks a section of our document, think of it as a curly braces in some programming languages. There will be other environments that I wlil discuss later in this post, don't worry!\n\nInside the document environment, let's try to write some text. For example, a good ol' `Hello world`. Our LaTeX file should now look like this.\n\n```tex\n\\documentclass{article}\n\n\\begin{document}\nHello World!\n\\end{document}\n```\n\nYou can choose whether or not to indent the text. I usually indent it by a level for any new environments, but I don't do it for the document environment to save space because it's the root environment.\n\n### Compiling\n\nWe can now try to compile our document into a pdf! Since we're using LaTeX workshop, there should be a little play button at the top right corner of the editor.\n\n![hello-world-latex-screenshot](/assets/posts/how-i-use-latex-as-a-uni-student/vscode-hello-world-latex.png)\n\nAfter pressing that button, there should be a bunch of files generated including a pdf file that we can open. It should contain the text `Hello World!`. Nice, we compiled our first LaTeX document.\n\n### Text Styling\n\nWhen we're writing documents, of course, we need more than just 1 style of text. We usually want bold, italic, heading, subheading, etc. When using LaTeX, we can use the macros that it provides. Here are some of them:\n\n#### Section and SubSection Heading\n\nTo create a section heading, we can simply use the `\\section{}` macro and it should create a section heading along with the numbering. We don't need to fiddle around with the section number, which is great! There is also the `\\subsection{}` heading to create a sub section heading. It will automatically derive the section heading number. For example, if we have number **1** for our section heading, the sub section heading should have the number **1.2**.\n\nThere is also a `\\subsubsection{}` macro if you want to go a level deeper. I rarely use this though, usually 2 levels deep is enough for my needs. Just like the subsection heading, it will derive its parent number. For example, if we have a **1.1** sub section number, we should have **1.1.1** sub sub section number.\n\nLet's try to create our first section, subsection, and subsubsection headings! Back to our tex file, let's create 3 types of headings. The first one would be a regular heading, the second one would be a heading with 2 subsection, and the last one would be a heading with 2 subsection with 2 and 3 subsubsections on its subsection.\n\nMake sure you write these inside the document environment.\n\n```tex\n\\section{My first section}\n\n\\section{My second section}\n\n\\subsection{My first subsection}\n\n\\subsection{My second subsection}\n\n\\section{My third section}\n\n\\subsection{My third subsection}\n\n\\subsubsection{My first subsubsection}\n\n\\subsection{My fourth subsection}\n\n\\subsubsection{My second subsubsection}\n\n\\subsubsection{My third subsubsection}\n```\n\nIf we compile our document using the play button again and see the result. Although, Latex Workshop should automatically rebuild your tex file whenever it has any changes. If we check our pdf file again, it should now look like this:\n\n![Latex Headings](/assets/posts/how-i-use-latex-as-a-uni-student/latex-headings.png)\n\n#### Bold Text\n\nTo make our text bold, we can use the `\\textbf{}` macro. For example, to write **this is a bold text**, we can type `\\textbf{this is a bold text}`.\n\n#### Italic Text\n\nThere are two ways of writing an italicised text. The first one is to use `\\textit{}` macro like `\\textit{this is an italic text}`, but you can also the `\\emph{}` macro. The different is that the `\\textit{}` macro will always make the text look italic while the `\\emph{}` macro can be changed. For more details about their differences, you can refer to [this stackexchange comment](https://tex.stackexchange.com/a/1983)\n\n### Table of Contents\n\nThe good thing about LaTeX is we don't need to worry about the formatting details. That includes generating a table of contents. To generate that, we can just invoke the `\\tableofcontents` macro and voila, we have ourself a table of contents filled with our headings.\n\n// TODO(elianiva): finish the article\n\n## Closing Notes\n\nI think that's all for this post. There are a bunch more that I want to write, but I think it'd be better for me to split them into their own post so that this post doesn't get super lengthy. I hope you learned something from this post, thanks for reading!\n\nOh! by the way, you can read this article in form of LaTeX found on [this Github repo](https://github.com/elianiva/latex-basics). Feel free to also use it as a reference :)","src/content/posts/how-i-use-latex-as-a-uni-student.mdx","7069d05e36724bc6","how-i-use-latex-as-a-uni-student.mdx","i-rebuilt-my-site-using-sapper",{"id":769,"data":771,"body":776,"filePath":777,"digest":778,"legacyId":779,"deferredRender":15},{"draft":25,"title":772,"date":773,"description":774,"tags":775},"I rebuilt my site using Sapper from scratch",["Date","2020-10-20T00:00:00.000Z"],"A post where I explain why I migrate my website using Svelte/Sapper",[683,671],"import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nWell, I've been trying out Svelte lately and so far I love it. I finally rebuild my site using Sapper. Previously I was using Gatsby, it was an awesome DX but I want to try something new and fresh.\n\n# Reasons\n\n## Why did I rebuild my site?\n\nOf course, I want to try this new technology called Svelte. If you read my [previous post](https://elianiva.my.id/posts/my-experience-with-svelte), I said that I want to rebuild my website using [Svelte](https://svelte.dev). Using [Sapper](https://sapper.svelte.dev), to be more specific.\n\nI only use my previous website as a blog. A place where I put some random post with the main reason of \"self-documenting\". I also found it useful when you learned something new and you try to explain it to someone else. It makes me understand it even better.\n\n## Why did I choose Svelte/Sapper?\n\nI choose Svelte (or Sapper to be more specific) because it's a unique framework. Actually, [Svelte is a language](https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934). Why didn't I choose something like Vue/Nuxt? Because it's kinda similar to React/Next in my opinion.\n\nThey both use Virtual DOM while Svelte does not. Svelte converts our app into ideal JavaScript at _build time_, rather than interpreting our application code at _runtime_.\n\n> Rethinking Reactivity with Svelte\n\n# My Experience\n\n## How was the development experience?\n\nWell, I came from Gatsby which has _a lot_ of plugins. This time I made it using Sapper which has no plugins. I have to do stuff by myself. It's still a great experience nonetheless.\n\nSvelte is a new technology, meaning that nvim-lsp most likely doesn't support it (yet). nvim-lsp is a built-in lsp client for a text editor that I use which is [Neovim](https://neovim.io). Thankfully, adding an LSP config for that is quite easy so I made one and opened [a pull request](https://github.com/neovim/nvim-lspconfig/pull/385) for it.\n\nBecause of this project, I also have a chance to tinker around even more with Lua stuff in Neovim which I'll talk about in a different post.\n\n## Issues that I encountered\n\nInitially, I want to use [SCSS](https://sass-lang.com/) instead of plain CSS. As always, nothing goes smoothly in our life. It conflicts with `svelte-image` which throws a bunch of errors. To be fair, it doesn't affect anything, it's just hurt for me to see those errors whenever I start the dev server. I decided to just use the good ol' plain CSS.\n\nAnother issue that I encountered is the table of content. You see, the table of content has a list of links that has an href of a heading ID. At the time of writing this, Sapper has an issue where if an URL has an href of `#heading-id` (started with a hash) then it will go to `/#heading-id` instead of adding the href to the end of the URL like `/posts/slug#heading-id`. This issue is currently being tracked [here](https://github.com/sveltejs/sapper/issues/331).\n\nThe solution for it was quite simple, I just need to add this piece of code (thanks to [this comment](https://github.com/sveltejs/sapper/issues/331#issuecomment-706627790)) on my post layout, and poof, the problem's solved.\n\n```javascript\nimport { onMount } from \"svelte\";\nonMount(() => {\n\tdocument.querySelectorAll(\"a\").forEach((a) => {\n\t\tif (!a.hash || !document.querySelectorAll(a.hash).length) return;\n\t\ta.addEventListener(\"click\", (event) => {\n\t\t\tevent.preventDefault();\n\t\t\twindow.location.hash = event.target.getAttribute(\"href\");\n\t\t});\n\t});\n});\n```\n\nYou might want to change `document` to something else because if you use `document` then it will change the `a` behaviour of the entire document. You can see mine [here](https://github.com/elianiva/elianiva.my.id/blob/a0c824de5b372ff210a1e3f44d10ef80e2be4190/src/layouts/post.svelte#L340-L356).\nI also use `decodeURIComponent` to handle Japanese characters.\n\nI also couldn't make [shiki](https://shiki.matsu.io) work with MDsveX. There's nothing wrong with the default highlighter of MDsveX (which is [prismjs](https://prismjs.com)) but I want to use Shiki because it has the same syntax grammar as VScode and it looks better in my opinion. Though, MDsveX will use Shiki in the future version according to [pngwn's comment](https://github.com/pngwn/MDsveX/issues/139#issuecomment-688478536).\n\n# Technologies I Use\n\n## The core\n\nI use Sapper (obviously) for this website. Why did I choose Sapper, you might ask. Well, because Sapper supports SSR. Though at the time of writing this, there has been a Svelte Summit and there's a panel where Rich Harris, the creator of Svelte said that Sapper will be discontinued and Svelte will support SSR instead.\n\nI am so hyped for this. Svelte will also use [Snowpack](https://snowpack.dev) instead of Rollup so it will support Hot Module Reloading. Couldn't wait for it to be released to the Master branch. As of the time of writing this, it's still in a private repo and quite unstable.\n\nIt looks so cool at a first glance. If you want to see it yourself, [there you go](https://www.youtube.com/watch?v=qSfdtmcZ4d0&t=53s). I found a [good article](https://codechips.me/snowpack-svelte-typescript-tailwindcss/) that you might also want to read.\n\nI have an intention of moving this site to Svelte in the future once it supports SSR. Rich Harris said that the future version of Svelte will be quite similar to Sapper so it won't be a hassle to migrate.\n\n## Post and project pages\n\nI use [MDsveX](https://mdsvex.com) as a source for my post and project page. It's basically like [MDX](https://mdxjs.com/) but for Svelte. I use Markdown on my previous site. I chose MDsveX because of [this talk](https://www.youtube.com/watch?v=Tr9wJYvnA24). It was a great talk, props to Svelte Indonesia community. The talk convinced me enough to use MDsveX instead of plain Markdown.\n\nI have two separate layouts which are [post layout](https://github.com/elianiva/elianiva.my.id/blob/master/src/layouts/post.svelte) and [project layout](https://github.com/elianiva/elianiva.me/blob/master/src/layouts/project.svelte). If you want to know the differences, just check it out yourself ツ\n\n## Stylings\n\nAs I mentioned earlier, I was going to use SCSS but got canceled. I use PostCSS instead to utilize its rich plugin ecosystem. Currently, I use [autoprefixer](https://github.com/postcss/autoprefixer) to prefix all of my CSS and [cssnano](https://cssnano.co/) to minify my CSS.\n\n## Optimisation\n\nI use [svelte-image](https://github.com/matyunya/svelte-image) to lazy load the image for my site. Though, I'm having some issues right now. There's a warning which says\n\n```\nCannot process a dynamic value: MustacheTag\n```\n\nThis is caused by passing a variable to `svelte-image` component like this.\n\n```html\n\u003Cimage src=\"{src}\" />\n\n\u003Cscript>\n\texport let src;\n\u003C/script>\n```\n\nIn other words, `svelte-image` doesn't support a dynamic path. I just use `svelte-waypoint` to lazyload my images until this problem got fixed.\n\nThis issue is currently tracked [here](https://github.com/matyunya/svelte-image/issues/6). At the moment, this issue is not possible to fix because of [this reason](https://github.com/matyunya/svelte-image/issues/31#issuecomment-550711822). I really hope this issue will get fixed soon in the future.\n\n\u003CUpdate date=\"2020-11-12\">\n\nI no longer use svelte-image because for some reason, [sharp](https://github.com/lovell/sharp) made the image filesize bigger even though the resolution is smaller.\n\n\u003C/Update>\n\n## Hosting\n\nI use [Vercel](https://vercel.com) to host my site. I used Vercel quite a few in the past and it's been great. It's simple to set up and integrate with Github. It's also free!\n\n# Resources\n\nHere are some resources that helped me make this website. Hope you find this useful ツ\n\n-   https://github.com/iamyuu/iamyuu\n-   https://web.dev/\n-   https://fatihkalifa.com/dark-mode-web\n-   https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\n\n# Conclusion\n\nAll in all, I'm glad that finally decided to rebuild my site using Sapper. It was a great experience. I am really looking forward to `svelte@next` release because man, that thing looks so damn cool.","src/content/posts/i-rebuilt-my-site-using-sapper.mdx","95d9b3c676601d93","i-rebuilt-my-site-using-sapper.mdx","japanese-fts-using-sqlite",{"id":780,"data":782,"body":789,"filePath":790,"digest":791,"legacyId":792,"deferredRender":15},{"draft":25,"title":783,"date":784,"description":785,"tags":786},"Japanese Full-Text Search in SQLite",["Date","2022-05-19T00:00:00.000Z"],"A simple example of how you can make Japanese full-text-search in SQLite.",[658,787,788],"sqlite","csharp","# Introduction\n\nRecently I have been working on an android app that uses SQLite. The app has a feature where you can find an entry of a Japanese word with some details attached using a keyword that you typed in the search bar.\n\nWhen building this feature, I found almost zero results on how to do it. There are some full-text search tutorials for Latin words, but I couldn't find any for Japanese. It needs a special tokenizer called ICU from [the ICU project](http://site.icu-project.org/). Since it's not enabled by default in SQLite on my Linux machine or the one bundled with `Microsoft.Data.Sqlite`, I had to download the source code and compile it with some build flags to make it work. This is where the tricky part comes in. I spent a lot of time trying to figure out how to do it, but because I don't really familiar with C, I missed things that would be obvious to someone with a fair amount of C experience.\n\nHopefully, by the end of this post, you'll know how to do the exact same thing without spending hours of your life trying to figure out how to do it.\n\nThis article assumes that you're somewhat familiar with SQLite and .NET Core so I will not go into much detail about the basics. I will also be using Linux so some parts of the compilation step will be Linux specific.\n\n# What is Full-Text Search\n\nFull-text Search is a technique that allows you to search for a text in a database by providing only parts of them. For example, if I have a text that says \"Never gonna give you up\" and I type \"give\" in the search bar, I can find a row containing that text despite the fact that the word `give` is only in the middle of the text.\n\nThis is different from an exact search that usually looks like this:\n\n```sql\nSELECT text FROM rickroll WHERE text = 'give';\n```\n\nUsing that query, you will only find a row that contains `give`, nothing more, nothing less.\n\nFull-text search is similar to a wildcard search where you can use `%` to search for a text that contains a part of it. For example, if I type `%give%` in the search bar, I can find a row that contains `give` in it.\n\n```sql\nSELECT text FROM rickroll WHERE text LIKE '%give%';\n```\n\nIf wildcard works then why bother with a full-text search? Well, they have some differences. Not only that wildcard is abysmally slow on a large dataset, they're also less accurate. Wildcard only searches for a pattern while full-text-search will search based on the tokenised text. full-text search is also **very** fast compared to wildcard search because it already has an index of our data.\n\nWith wildcard, for example, if you have a pattern `LIKE '%run%'`, not only that it will return any rows that have the word `run`, but it will also return any rows that have the word `running`, `crunch`, `prune`, etc. This is because wildcard search is based on the pattern, not the tokenised text. With full-text search, it will only return rows that have the word `run` and also `running` depending on the tokenizer that you use.\n\n# Why SQLite\n\n> Well, you don't really have that much of an option on android, do you?\n\nI found this tweet the other day...\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"en\" dir=\"ltr\">Also SQLite3’s Full Text Search combined with triggers is absolutely mind blowing.\u003Cbr />\u003Cbr />Indexed 50GB of data in 10 lines of SQL and it queries under 20ms…\u003Cbr />\u003Cbr />This technology exists literally running on our toasters and we still throw Postgres and Elasticsearch at trivial problems.\u003C/p>&mdash; Sebastian Szturo (@SebastianSzturo) \u003Ca href=\"https://twitter.com/SebastianSzturo/status/1515297367335247877?ref_src=twsrc%5Etfw\">April 16, 2022\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n...which inspired me to use the full-text search feature of SQLite. Initially, I was just thinking of a key-value pair database like a dictionary, but I realized that SQLite is a good fit for this because I can do so much more with it, including full-text search.\n\nAlthough, the default SQLite tokenizer, which is \"simple\" and \"porter\", doesn't support Japanese. The one that works with CJK characters is the ICU tokenizer from the [ICU Project](https://icu-project.org/) as I mentioned earlier.\n\n# Simple Example\n\n## Setting up the project\n\nWe're going to make a simple console app using .NET Core and SQLite to store the data. The app will have a database that contains a list of Japanese sentences and we can search through them using a prompt.\n\nFirst, we need to set up the project. I will use the `dotnet` CLI for the entire process. We can run this simple command to get started.\n\n```bash\ndotnet new console -o ProjectName\n```\n\nThat should give us a starting point to work with.\n\n## Disabling implicit using statements\n\nHere's a thing that I like to do when I start a new project. Open up the `.csproj` file and remove the `\u003CImplicitUsings>` line, our `.csproj` file should end up like this:\n\n```xml\n\u003CProject Sdk=\"Microsoft.NET.Sdk\">\n\n  \u003CPropertyGroup>\n    \u003COutputType>Exe\u003C/OutputType>\n    \u003CTargetFramework>net6.0\u003C/TargetFramework>\n    \u003CNullable>enable\u003C/Nullable>\n  \u003C/PropertyGroup>\n\n\u003C/Project>\n```\n\nWe will get a warning from the compiler because our current `Program.cs` file doesn't have any `using` statements. Let's just ignore that for now.\n\nThe reason why I like to do this is that I don't like the implicit `using` that was introduced in .NET 6. I prefer to be explicit with what I use.\n\n## Building SQLite with ICU support\n\nTo build SQLite with ICU support, we need to download the source code of SQLite and compile it with certain compilation flags. You can download the source code of SQLite from [their download page](https://www.sqlite.org/download.html). We want to extract it to a folder inside our project so it'll be easier to find. You can name it whatever you want, but I'll put it inside a directory and call it `./External/sqlite/`.\n\nWe can then compile it using the following commands.\n\n```bash\n# configure the build\nCFLAGS=\"-O3 -DSQLITE_ENABLE_ICU\" CPPFLAGS=`icu-config --cppflags` LDFLAGS=`icu-config --ldflags` ./configure\n\n# build the binary\nmake\n```\n\nThe `-DSQLITE_ENABLE_ICU` is the flag that enables ICU support. You can see the full list of flags from [this page](https://www.sqlite.org/compile.html). We use `icu-config --ldflags` to get the linker flags for ICU.\n\nAfter compiling that, our directory should have the compiled binary called `sqlite3`. That's not what we want for our application, though. We want to use the `sqlite3` as a library, not a standalone executable. This is where it got me the first time, I didn't know there was a directory called `.libs` inside the `sqlite` directory because it was hidden. That's where the libraries are stored. I waste quite some time trying to make the binding in .NET works only to realise that I'm using the wrong binary. There should be an `sqlite3.so` file inside the `.libs` directory. This is what we're going to be using for our application.\n\nSince we put the `sqlite` directory inside our project, there will be a small issue. The `sqlite` directory contains a file called `Replace.cs`. This will cause the compiler to freak out because it's trying to analyse a file called `Replace.cs`. We can ignore this file by adding the following block to the end of our `.csproj` file just before the closing tag `\u003C/Project>`.\n\n```xml\n\u003CItemGroup>\n  \u003C!-- adjust the path to suit your needs -->\n  \u003CCompile Remove=\"./External/sqlite/Replace.cs\" />\n\u003C/ItemGroup>\n```\n\nOf course, if you don't put the `sqlite` directory inside your project, you don't need to do this.\n\n## Preparing the database\n\nWe're going to build a simple console app that lets us search for an example sentence containing a word that we typed in. To do that, we will need a table with three columns, `Id`, `EnglishText`, and `JapaneseText`. The `Id` column will be the primary key and will be auto-incremented. The `EnglishText` column will contain the English version of the text and the `JapaneseText` column will be the Japanese version.\n\nIn our project directory, we will create a `Data` directory where our database will be stored. After doing that, we will run the `sqlite3` CLI to create the database. Make sure you use the `sqlite3` CLI that we just compiled because the one that comes by default might not be compiled with ICU support. We can use our `sqlite3` binary by typing the relative path instead of just `sqlite3`, in my case that would look like this:\n\n```bash\n./External/sqlite/sqlite3 ./Data/dictionary.db\n```\n\nIt will put us in a prompt where we can create the table. I write this in multiline form so it would be easier to read, but we want to make it a single line when we're typing it in the prompt to avoid weird things happening.\n\n```sql\nCREATE TABLE Dictionary (\n  Id INTEGER PRIMARY KEY AUTOINCREMENT,\n  EnglishText TEXT,\n  JapaneseText TEXT\n);\n```\n\nIn order to use the full-text search feature of SQLite, we're going to need a virtual table. It's a different type of table, but how you create the table is quite similar.\n\n```sql\nCREATE VIRTUAL TABLE DictionaryFTS\nUSING fts4(\n  JapaneseText,\n  content='Dictionary',\n  tokenize=icu ja_JP\n);\n```\n\nThe reason why I'm using `FTS4` and not `FTS3` or `FTS5` is because `FTS3` is slower and `FTS5` has several improvements but it's not available on android. For more detail on this, see [the documentation for FTS3/4](https://www.sqlite.org/fts3.html) and [FTS5](https://www.sqlite.org/fts5.html).\n\nThe `tokenize` parameter is the tokenizer that we're going to use. We specify `icu` tokenizer and we use `ja_JP` as the locale because we're working with the Japanese language.\n\nSince we're going to use the data from the regular `Dictionary` table by specifying the `content` column, we need to create a trigger that will update the `DictionaryFTS` table whenever the `Dictionary` table is updated. We can add a trigger using this SQL statement:\n\n```sql\nCREATE TRIGGER Dictionary_Update_FTS\nAFTER INSERT ON Dictionary\nBEGIN\n  INSERT INTO DictionaryFTS(rowid, JapaneseText)\n  VALUES (new.rowid, new.JapaneseText);\nEND;\n```\n\nThis way, whenever we insert a new row in the `Dictionary` table, the `DictionaryFTS` table will be updated as well, which is exactly what we want. If you don't add this trigger you can still query the `DictionaryFTS` table but you won't be able to use the full-text search functionality.\n\nNow, let's add a few data to the `Dictionary` table. We can do that by running this statement:\n\n```sql\nINSERT INTO Dictionary (EnglishText, JapaneseText)\nVALUES (\"I woke up in the morning\", \"朝に起きた\"),\n       (\"I was singing that song\", \"その歌を歌っていた\"),\n       (\"The food was good\", \"食べ物はうまかった\"),\n       (\"What time is it now?\", \"今何時？\"),\n       (\"This is Japanese\", \"これは日本語です\"),\n       (\"That car went too fast\", \"あの車が速すぎた\"),\n       (\"It smells like spring\", \"春の匂いがする\"),\n       (\"It's very cold outside\", \"外には寒いよ\"),\n       (\"Today is Saturday\", \"今日は土曜日です\"),\n       (\"Please tell me\", \"教えてくれ\"),\n       (\"Sorry I don't understand Japanese\", \"日本語分からなくてごめん\"),\n       (\"This is not an apple\", \"これはりんごじゃないよ\"),\n       (\"This book is mine\", \"この本は私のものです\"),\n       (\"I usually sleep around this time\", \"こんな時ごろに寝る\"),\n       (\"Your Japanese is good\", \"日本語上手ですね\"),\n       (\"I like cats\", \"私は猫が好き\"),\n       (\"My cat is white\", \"私の猫が白です\");\n```\n\n\u003Csmall>pardon my japanese :p\u003C/small>\n\nYou can, of course, add a lot more data, but these should be enough for our purpose.\n\nWe can test if the full-text search works by typing this statement:\n\n```sql\nSELECT * FROM DictionaryFTS WHERE JapaneseText MATCH 'です';\n```\n\nYou should see any rows that have the word `です` in it. In this example the result should be these rows:\n\n```\nこれは日本語です\n今日は土曜日です\nこの本は私のものです\n日本語上手ですね\n```\n\nIf you're having difficulties with typing Japanese characters in SQLite prompt, you can type all of the commands in a file and then do this\n\n```bash\n# where `file.sql` is a file that contains SQLite statements\n./External/sqlite/sqlite3 ./Data/dictionary.db \u003C file.sql\n\n# you can also do it directly by passing a string to the `sqlite3` command\n./External/sqlite/sqlite3 ./Data/dictionary.db \"SELECT * FROM table;\"\n```\n\n## Installing SQLite client\n\nSince we're going to work on a simple app, we don't really need a full-fledged package like Entity Framework. We're going to use `Microsoft.Data.Sqlite` package which is a lightweight ADO.NET provider for SQLite, but since we want to use our own version of sqlite3 that we've compiled earlier, we want `Microsoft.Data.Sqlite.Core` instead.\n\nMake sure that you **DON'T** have `Microsoft.Data.Sqlite` installed in your project, otherwise, this wouldn't work. The `Microsoft.Data.Sqlite` package bundles its own sqlite to provide a wider range of compatibility. I also spent quite some time on this step because I didn't realise that. I missed a part of the documentation where it says that `Microsoft.Data.Sqlite` is a package that bundles sqlite.\n\nThe package that we're using is built on top of `SQLitePCLRaw` package, which is a thin wrapper around sqlite. According to [the documentation](https://docs.microsoft.com/en-us/dotnet/standard/data/sqlite/custom-versions), we will need other packages to be installed as well if we want to use a custom version of sqlite.\n\n```bash\ndotnet add package Microsoft.Data.Sqlite.Core\ndotnet add package SQLitePCLRaw.core\ndotnet add package SQLitePCLRaw.provider.dynamic_cdecl\n```\n\nWe should be done with the preparation.\n\n## Using a custom SQlite versionReplace.cs\n\nBefore using any of the `Microsoft.Data.Sqlite` functionality, we need to register our custom sqlite version.\nFirst, we need to add a native library adapter class that implements `IGetFunctionPointer` from `SQLitePCL` namespace. This class will be used to get the pointer to the native sqlite library. I will put this inside a file called `NativeLibraryAdapter.cs` at the root of our project.\n\n```csharp\nusing System;\nusing System.Runtime.InteropServices;\nusing SQLitePCL;\n\nclass NativeLibraryAdapter : IGetFunctionPointer\n{\n    readonly IntPtr _library;\n\n    public NativeLibraryAdapter(string name)\n        => _library = NativeLibrary.Load(name);\n\n    public IntPtr GetFunctionPointer(string name)\n        => NativeLibrary.TryGetExport(_library, name, out var address)\n            ? address\n            : IntPtr.Zero;\n}\n```\n\nNext, we want to register our custom sqlite version. We can do that by adding a few lines of code to our `Program.cs` file.\n\n```csharp\nusing System.IO;\nusing SQLitePCL;\n\n// adjust this path to where your sqlite3.so is stored\nstring sqliteLibPath = Path.GetFullPath(\"./External/sqlite/.libs/libsqlite3.so\");\n\nSQLite3Provider_dynamic_cdecl.Setup(\"sqlite3\", new NativeLibraryAdapter(sqliteLibPath));\nSQLitePCL.raw.SetProvider(new SQLite3Provider_dynamic_cdecl());\n```\n\nMake sure that we do this right at the beginning before doing anything with the database connection.\n\n## Connecting to the database\n\nWe should try to connect to the database. To do that, we can instantiate the `SqliteConnection` class and provide it with the path to the database. We can add this code to our `Program.cs` file. Bare in mind that you should put all `using` statements at the top of the file.\n\n```csharp\nusing Microsoft.Data.Sqlite;\n\nstring databasePath = Path.GetFullPath(\"./Data/dictionary.db\");\nusing var connection = new SqliteConnection($\"Data Source={databasePath}\");\n\n// open the database connection\nconnection.Open();\n```\n\nWe would want to use the keyword `using` to make sure that the connection is disposed when we're done with it.\n\n## Main logic of the app\n\nWhat I want to build for this simple example is a simple search console app where the user is going to be given a prompt that ask for a word and then the app will search the database for the word and display the results.\nI won't be going into the details of how to do this because the main focus is the full-text search functionality.\n\n```csharp\n// close the database connection when we quit the app using Ctrl+C\nConsole.CancelKeyPress += delegate\n{\n    connection.Close();\n    Environment.Exit(0);\n};\n\n// ask the user for a word to look up until they quit the app\nwhile (true)\n{\n    Console.Write(\"== Enter a word (ctrl+c to cancel): \");\n    var word = Console.ReadLine();\n\n    // ask again if the word is empty\n    if (string.IsNullOrEmpty(word))\n    {\n        Console.WriteLine(\"Word can't be empty!\");\n        continue;\n    }\n\n    // create a command to search the database and bind the user input\n    // to the `@word` parameter\n    var command = connection.CreateCommand();\n    command.CommandText = $@\"\n    SELECT\n      Dictionary.EnglishText,\n      Dictionary.JapaneseText\n    FROM Dictionary\n    WHERE Dictionary.JapaneseText IN (\n        SELECT DictionaryFTS.JapaneseText FROM DictionaryFTS\n        WHERE DictionaryFTS MATCH @word\n    );\";\n    command.Parameters.Add(new SqliteParameter(\"@word\", word));\n\n    using var reader = command.ExecuteReader();\n\n    // prints a message when no result was found\n    if (!reader.HasRows)\n    {\n        Console.WriteLine(\"No result was found!\");\n        continue;\n    }\n\n    // print the results in a list\n    while (reader.Read())\n    {\n        Console.WriteLine($\"- {reader[\"EnglishText\"]} => {reader[\"JapaneseText\"]}\");\n    }\n}\n```\n\nWhen you run the app by typing `dotnet run`, you should see something like this:\n\n\u003Cdiv style=\"width:100%;height:0px;position:relative;padding-bottom:46.256%;\">\n\t\u003Ciframe\n\t\ttitle=\"demo video\"\n\t\tsrc=\"https://streamable.com/e/9gyjj3\"\n\t\tframeborder=\"0\"\n\t\twidth=\"100%\"\n\t\theight=\"100%\"\n\t\tallowfullscreen\n\t\tstyle=\"width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;\"\n\t>\u003C/iframe>\n\u003C/div>\n\nAs you can see, when I search for `です`, I get every rows that has `です` in the `JapaneseText` field.\n\n## Highlighting the matched word\n\nWe can highlight the matched word in the result by using the `snippet` function. To do that, we need to change our query a bit.\n\n```sql\nSELECT\n    Dictionary.EnglishText,\n    JapaneseTextSnippet\nFROM Dictionary\nJOIN (\n    SELECT\n        snippet(DictionaryFTS, '[', ']') AS JapaneseTextSnippet,\n        rowid\n    FROM DictionaryFTS\n    WHERE DictionaryFTS MATCH @word\n) AS ResultFTS\n    ON Dictionary.Id = ResultFTS.rowid;\n```\n\nI'm not sure about the performance of this query compared to using `WHERE IN`. If you have any suggestions, please let me know :)\n\nThis query will now select the `JapaneseTextSnippet` column that comes from the `snippet` function. The matched word should be surrounded by `[` and `]`. If you're using the result for the web, you can wrap it with an html tag instead of square brackets, but since we're making a console app, we don't have the luxury of that and have to rely on ANSI escape sequence. You can see [this gist](https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797) for the ANSI escape sequence reference.\n\nThe reason why I don't put the escape sequence inside the `snippet` function is because I had weird things happening when I tried to do that. So, I decided to wrap it in a bracket and then replace the bracket with the escape sequence using C# like this.\n\n```csharp\n// print the results in a list\nwhile (reader.Read())\n{\n  var englishText = reader.GetString(0);\n  var japaneseTextSnippet = reader.GetString(1).Replace(\"[\", \"\u001b[1;31m\").Replace(\"]\", \"\u001b[0m\");\n  Console.WriteLine($\"- {englishText} => {japaneseTextSnippet}\");\n}\n```\n\nThe end result should now look like this:\n\n![result with highlight](https://i.ibb.co/ym9QcW3/image-2022-05-20-16-11-29.png)\n\n# References\n\nHere are some useful resources that helped me that might also be useful to you:\n\n-   [SQLite Virtual Table](https://www.sqlite.org/vtab.html)\n-   [SQLite FTS3 Module](https://www.sqlite.org/fts3.html)\n-   [kemsereylam.com: FTS with SQLite](https://kimsereylam.com/sqlite/2020/03/06/full-text-search-with-sqlite.html)\n-   [abdus.dev: Quick FTS using SQLite](https://abdus.dev/posts/quick-full-text-search-using-sqlite/)\n\nIf you want the full code, you can find the repository at [elianiva/foo-dictionary](https://github.com/elianiva/foo-dictionary)\n\n# Conclusion\n\nDoing a full-text search is actually quite easy. Initially, I thought full-text search requires a fancy technology like Elasticsearch, Algolia, or something like that, but I found that I can do it with SQLite.\nMost of the pain I had to go through came from trying to make the SQLite binding work.\n\nI hope this article helped you to implement full-text search for the Japanese language in your SQLite database. If you have any questions or suggestions, feel free to leave a comment :)\n\nHave a nice day!","src/content/posts/japanese-fts-using-sqlite.mdx","e8003de9d9fa9d4e","japanese-fts-using-sqlite.mdx","japanese-input-method-on-linux",{"id":793,"data":795,"body":800,"filePath":801,"digest":802,"legacyId":803,"deferredRender":15},{"draft":25,"title":796,"date":797,"description":798,"tags":799},"Setting up Japanese input method on Linux",["Date","2020-06-05T00:00:00.000Z"],"Installing fcitx and mozc for Japanese input method so you can type 日本語 on Linux",[645,658],"import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nSo I've been learning Japanese lately then I came across this question, \"How do I input a japanese character on my laptop?\" I use a 12-keys layout to insert japanese characters on my phone. It takes time to adapt but eventually I got comfortable enough with it.\n\nAt first, I tried to change the keyboard layout but it doesn't work. I then came across this combination, **Fcitx** and **Mozc**. It's been a great experience using them, it's also very easy to set up and use.\n\n# Fcitx\n\n## What Is Fcitx?\n\nAccording to [Wikipedia](https://en.wikipedia.org/wiki/Fcitx), **Fcitx** is an input method framework with extension support for the X Window System that supports multiple input method engines.\n\nIt supports multiple input engines like `fcitx-hangul` for Korean, `fcitx-mozc` for Japanese, `fcitx-googlepinyin` for Chinese, and more.\n\nIt also has a lot of addons that you can use like `clipboard` for clipboard management, `spell` for spellchecking, and many more.\n\n## Installation\n\nInstalling Fcitx is pretty simple. It's available on most Linux distro official repository. I use Archlinux so mine will looks like this, you might use another distro but it's basically the same.\n\n```bash\n# Arch\n$ sudo pacman -S fcitx5 fcitx5-gtk fcitx5-qt fcitx5-configtool\n\n# Fedora\n$ sudo dnf install fcitx5 fcitx5-gtk fcitx5-qt fcitx5-configtool\n```\n\n> We're using Fcitx5 since it's the newer version of fcitx\n\nAfter installing it, we need to set some variables for it to work.\n\n## Configuration\n\nTo set our input method to `fcitx`, we need to change our environment variable.\nI set it on `~/.profile`, but you can set it on `~/.xprofile`, `~/.pam_environment`, `~/.xinitrc` or anything that gets sourced on login. You ned to set these variables\n\n-   `~/.pam_environment`\n\n    ```bash\n    GTK_IM_MODULE DEFAULT=fcitx\n    QT_IM_MODULE  DEFAULT=fcitx\n    XMODIFIERS    DEFAULT=\\@im=fcitx\n    SDL_IM_MODULE DEFAULT=fcitx\n    IBUS_USE_PORTAL=1\n    ```\n\n-   `~/.profile` or anything that uses shell syntax\n    ```bash\n    export GLFW_IM_MODULE=\"ibus\"\n    export GTK_IM_MODULE=\"fcitx\"\n    export QT_IM_MODULE=\"fcitx\"\n    export XMODIFIERS=\"@im=fcitx\"\n    export SDL_IM_MODULE=\"fcitx\"\n    export IBUS_USE_PORTAL=1\n    ```\n\n# Mozc\n\n## What Is Mozc?\n\nAccording to the project [home page](https://github.com/google/mozc) itself, Mozc is a Japanese input method editor (IME) designed for multi-platform such as Android OS, Apple OS X, Chromium OS, GNU/Linux and Microsoft Windows. This OpenSource project originates from [Google Japanese Input](http://www.google.com/intl/ja/ime/).\n\nWe need this for `fcitx` that we've installed previously to be able to input Japanese characters.\n\n## Installation\n\nWe are using Fcitx as our input method framework so what we need to install is `fcitx5-mozc`. It's also available on most Linux distro official repository.\n\n```bash\n# Archlinux\n$ sudo pacman -S fcitx5-mozc\n\n# Fedora\n$ sudo dnf install fcitx5-mozc\n```\n\nAfter installing it, it will be available to Fcitx as an input method.\n\n## Configuration\n\nNow what we need to do is set Mozc as Fcitx input method. To do that, open up the `fcitx5-configtool`. It will roughly look like this, it may look different because of your theme.\n\n![fcitx configtool](/assets/posts/japanese-input-method-on-linux/configtool-1.png)\n\nMake sure the checkbox for `Only Show Current Language` is unchecked, otherwise you won't find mozc.\n\n![fcitx configtool](/assets/posts/japanese-input-method-on-linux/configtool-2.png)\n\nFind mozc, click it, then press the top button. Not sure why the icon is missing, probably some weird QT and GTK compatibility issue.\n\nAfter clicking apply, execute `fcitx5` on startup depending on your DE/WM. I put it in `~/.xinitrc` like so.\n\n```bash\nfcitx5 --replace -d &\n```\n\nIf you put it on `~/.xinitrc`, it will get executed when you log in into xorg.\n\nFcitx is toggleable using a keybind that you can change from the `fcitx5-confgitool` which looks like this.\n\n![fcitx configtool](/assets/posts/japanese-input-method-on-linux/configtool-3.png)\n\nYou can change the `Trigger Input Method` to whatever key you like. I personally use `alt+space`.\n\n## Usage\n\nIf you've done configuring it, try to activate it by pressing the keybind that you've defined before then try to type on something. It will look like this.\n\n![fcitx completion preview](/assets/posts/japanese-input-method-on-linux/preview.png)\n\nIt looks like an autocomplete from a text editor. The way it works is if you write `romaji`, it auto converts it to `hiragana` which you can then press `TAB` to scroll the options.\n\nFor example, if you write `watashi` then it will show `わたし` and if you continue pressing `TAB` it will be the kanji form of it which is `私`. This also applies to `katakana`.\n\n# Closing Note\n\nAll in all, I'm pretty satisfied with this setup. I don't have to learn a new keyboard layout to insert Japanese characters. I can just write romaji and it will turn into hiragana, katakana, or kanji.\n\nAnyway, thanks for reading this post. I hope you find this post useful and have a good day!","src/content/posts/japanese-input-method-on-linux.mdx","ad1b07f75f3717f5","japanese-input-method-on-linux.mdx","making-of-my-site-2",{"id":804,"data":806,"body":812,"filePath":813,"digest":814,"legacyId":815,"deferredRender":15},{"draft":25,"title":807,"date":808,"description":809,"tags":810},"The process of making my website (Part 2)",["Date","2020-02-13T00:00:00.000Z"],"Continuation of my previous post which is me telling my experience about how I made my blog using Gatsby",[811,671],"react","# Introduction\n\nHello everyone, I hope you all doing great! Welcome to my second part of my process of creating this blog using Gatsby SSG. Last time, I tell you about the design process in Figma which you can read over [Here](https://irrellia.github.io/blog/making-of-my-site). In this part, I will talk about my 'coding' process.\n\n# Preparation\n\nI initialize the Gatsby project using gatsby-cli. To install gatsby-cli is dead simple, you just need to run `npm i gatsby-cli -g` and there you have it. Then I initialize gatsby project using `gatsby new \u003Cproject-name>` command. After having the project created, I ran `gatsby develop` to start the development server. Now everything is set up, it's time to jump to my favorite text editor of all time which is Neovim.\n\n# Coding Session\n\n## Cleaning Up\n\nFirst thing first, I make my gatsby project to be a plain project by deleting unnecessary stuff like images, header and footer. After cleaning up, I installed [PostCSS](https://postcss.org) and [Autoprefixer](https://github.com/postcss/autoprefixer). Basically, it adds prefix for browser compatibility to my css so I don't have to add it manually.\n\n## Header and Footer\n\nAs per usual, I make the mobile version first. I started by making the fixed navbar. I quite struggle on the hamburger menu since I never make an animated hamburger menu, but thanks to [This](https://codepen.io/erikterwan/pen/EVzeRP) I figure it out. It uses checkbox to decide the hamburger state, I never use that technique before. Props to the author for that pen.\n\nAfter finishing the navbar, I made the overlay menu when you click the hamburger and gave it a fade effect when opening and closing. Mobile navbar is completed, so I moved to footer. When I first made the footer, I hardcoded the links of my social media to the JSX but after watching videos about Gatsby [Here](https://www.youtube.com/watch?v=8t0vNu2fCCM), it is better to use the graphql query to load the links from gatsby-config. I highly recomend checking that out if you don't know what Gatsby JS is and want to get started\n\n## Pages\n\nAfter finishing Navbar and Footer, It is time to make the about page because it's the easiest.\n\nI added the slight move up animation when you go to the home page to make it look a bit nice. I didn't create the posts list yet on home page because I haven't created any post. I made the archives page after that, just the layout of it so all of the buttons on the navbar have a destination page. Then I make the post page which is the most challenging part for me.\n\nFirst of all, I installed gatsby-transformer-remark which will transform my markdown files to html that can be used for the blog post. I made the place holder posts just to make sure that it's all working also to use it as a placeholder for the latest posts list.\n\n## Dealing with Images\n\nI use gatsby-image to display the card image on the card component to improve my website performance. Gatsby-image is just great. It blurs your image when it's not fully loaded so it doesn't messed up your dom and you won't see those grey backgrounds or weird stutter that you usually see when the image isn't fully loaded.\n\nThe card component that I made contains several stuff that comes from graphql query which takes data from markdown frontmatter. After finishing the card component, I made the page template for each post. When I made it, I changed my mind from being a colorful website to a monochromatic website.\n\nI hosted the image on [Cloudinary](https://cloudinary.com) so it doesn't take my repository space just for images. If you have a better solution, feel free to hit me up!\n\n## Stylings the page\n\nI make the css for my blog page, it was just a simple thing, nothing really special except for the typography. I changed some of my initial mockup design because I think it doesn't look that good. Who would've thought that choosing a font for your website could be so difficult. I went through several iteration to find the one that I like the most.\n\nI also added the table of contents to make it easier for the user when navigating through my blog posts.\n\n![table of content](/assets/posts/making-of-my-site-2/toc.png)\n\nAfter making the TOC, I added the `\u003Cpre>` tag which I really like from a blog using a plugin called `gatsby-remark-prismjs`. As the name says, it utilize [Prism JS](https://prismjs.com) to highlight my code. When I designing the page, I didn't think that I could make this feature. But it is so simple, like stupid simple. You just add the plugin and the theme, that's it. I made the theme on [this site](http://k88hudson.github.io/syntax-highlighting-theme-generator/www/). It was _very_ helpful. Here's an example of prismjs in action.\n\n```javascript\nconst a = \"this is\";\nconst b = \"just a\";\nconst c = \"test\";\nconst thing = `${a} ${b} ${c}`;\nconsole.log(thing);\n```\n\n```bash\n$ sudo pacman -S neovim\n```\n\n## Testing\n\nFinally, I can test the page using the real markdown and not stupid placeholder that I made lol. I decided to use my previous post which is the design process in figma. All looks good. I moved to other features.\n\n## Tags, category, and pagination\n\nMy blogs have tags and category for each of them. So, making a page that index all of the tags and category would be a good idea. It was quite a simple process by utilizing node api that can be configured in `gatsby-node.js` file just like when I made the blog page.\n\nAs for the pagination, it was a bit tricky. I found a good tutorial that helped me made the pagination. [Here it is.](https://nickymeuleman.netlify.com/blog/gatsby-pagination/)\n\n## Making the desktop site\n\nThe mobile version is finished. (Yay!) I can finally make the desktop version. First thing first, I changed to navbar to make it more suitable for the desktop. I removed the hamburger and changed it to text menu that has a hover effect.\n\n![navbar](/assets/posts/making-of-my-site-2/card.png)\n\nAfter doing that, I made the card component to be side by side. Here's what I mean.\n\n![card](/assets/posts/making-of-my-site-2/card.png)\n\n## Themes\n\nNow this is what I liked the most. Creating another theme brings you to another perspective of your website. Of course I make the light theme that is switchable automatically by default according to the time of the day and manually. Since I didn't use CSS variables from the start, I have to replace all of the colours in css manually to variables to be able to make the switch for the theme. (Duh, silly me.)\n\nI utilize react context for storing the colours variables. Big thanks to [this article](https://medium.com/better-programming/react-context-api-part-1-dark-theme-3f00666cbacb) for making the theme toggler possible for me. I changed quite a bit of the colours from my design earlier.\n\n# Conclusion\n\nThe coding process took the longest time to do. According to github, it took around about 17 days. Well, it wouldn't be that long if I'm not being a lazy person lol. I also got a lot of school stuff (homework, etc). Like, _a lot_.\n\nAlright, let's end this post since it's quite a lengthy one. The next part is about deploying to github pages and other stuff. See ya next time!","src/content/posts/making-of-my-site-2.mdx","be61e22ff0b01425","making-of-my-site-2.mdx","making-of-my-site-3",{"id":816,"data":818,"body":823,"filePath":824,"digest":825,"legacyId":826,"deferredRender":15},{"draft":25,"title":819,"date":820,"description":821,"tags":822},"The process of making my website (Part 3)",["Date","2020-02-14T00:00:00.000Z"],"Last post where I talk about my experience about how I made my website using Gatsby",[811,671],"# Introduction\n\nHi everyone. Welcome to the last part of the 3 part series. This time, I will talk about how I deploy my site to Github Pages. It's a simple yet a fun process. So, let's get into the first step shall we.\n\n# Deployment\n\n## Manually using gh-pages\n\nFirst of all, I installed `gh-page` package from npm by executing\n\n```bash\n$ npm install gh-pages\n```\n\nand creating a custom script to my `package.json` like so:\n\n```json\n\"deploy\": \"gatsby build && gh-pages -d public -b master\",\n```\n\nand to deploy my site, I would simply run `npm run deploy`. It will automatically deploy my site to github pages.\n\nBut, I have to move my source code to other branch because the `master` branch will be used for the compiled code/the actual site. So I made a new branch called `source`. Everything seems great, until something bothers me.\n\n## The life saver: TravisCI\n\nInitially, what I want to do is `commit` to the repo, `push` it, and `deploy` it manually. Could you imagine how frustrating it is to do all of those things? It would be tedious. Then, I came across an article that talk about TravisCI. [Here it is](https://okitavera.me/article/github-pages-static-site-generator-and-travisci/) if you want to read it yourself, it was a good one.\n\nAfter configuring TravisCI, I can just simply push to the repo and TravisCI will build the site for me automatically. Isn't that cool?\n\n# Special Thanks\n\nBefore I end this blog, I have quite a list of people that I want to say thank you. Big thanks even! So, here we go.\n\n-   [ypraw.github.io](https://ypraw.github.io)\n\n    Thanks to him, I know that you can host your page on github. I used to use random free hosting service to host my static site. He's also the reason why I choose Gatsby JS because his site also using it.\n\n-   [addy-dclxvi.github.io](https://addy-dclxvi.github.io)\n\n    Because of him, I know there is this thing called Static Site Generator. He's using Hugo for his site.\n\n-   [okitavera.me](https://okitavera.me)\n\n    She is my main inspiration for the design of this site. Her site is just beautiful. She's using Eleventy for her website.\n\n-   [bandithijo.com](https://bandithijo.com)\n\n    He is the reason why I decided to make my own blog. It looks like a fun thing to do. He's using Jekyll for his site.\n\n-   [epsi-rns.github.io](https://epsi-rns.github.io)\n\n    His site is filled with quality content that makes me want to make it as well. He's using Jekyll for his site.\n\n-   You\n\n    If you've gone this far, I just wanna say a big thanks for reading my article. I hope you're having a nice day :)","src/content/posts/making-of-my-site-3.mdx","0d7767268e532853","making-of-my-site-3.mdx","making-of-my-site",{"id":827,"data":829,"body":834,"filePath":835,"digest":836,"legacyId":837,"deferredRender":15},{"draft":25,"title":830,"date":831,"description":832,"tags":833},"The process of making my website (Part 1)",["Date","2020-02-12T00:00:00.000Z"],"A post where I try to explain my experience of how I made my website using React and Gatsby",[811,671],"# Introduction\n\nHi everyone, welcome to my first post. So for the last few weeks I've been interested on this new stack called JAMstack. Many people use it to make their own personal blog by utilizing Static Site Generator (SSG) such as Hugo, Hexo, Eleventy, Gatsby, Jekyll, you name it. They usually hosted it on github pages, netlify, or other headless CMS. As a curious person that likes to tinker around with new stuff (also because I have no life), I decided to make my own personal blog.\n\nI choose Gatsby as my SSG of choice because it is based on React JS, a framework that I'm already familiar with. I will divide this post into several part, starting from designing the frontend on Figma, coding the actual website using React, deploying it to Github Pages with the help of Travis.\n\n# Design process\n\nI started to design the site on Figma. If you don't know what Figma is, it's basically a web based software to create mockups or wireframe before you make the actual website to make your life easier. If you haven't tried it yet, then go ahead try it [HERE](https://figma.com/)\n\nI want to make my website looks minimalist and clean, so I approach it by using a flat design, lots of squares, sans-serif font, and sharp edges. I also want my blog to have 2 themes (dark and light).\n\n## Mobile design\n\nFirst, I make the design for mobile. Because I'm using Figma, I can use Figma Mirror app from Google Play Store to do a live preview on my phone. It is very helpful because I have a budget monitor which isn't quite accurate in terms of colours and my phone have a quite decent colour accuration. I started to make the Home then the About page, the Archives page, the actual Post page that you're currently in, the Posts List page that contains all of my posts.\n\n## Colour choice\n\nI do the dark theme first because I'm a huge fan of dark themed website (or anything, really). I am no expert at choosing colours, so I took the colours from a pretty popular colour scheme called Palenight from Material Themes. I fell in love with this colours. My text editor which is Neovim use this colour scheme. It is so comfortable to look at.\n\nAfter making the dark one for the mobile, I made the light one. Again, I took the colour scheme from Material Themes and changed it a bit. Here's the screenshot that I took after finishing the mobile layout.\n\n![finished mobile layout](/assets/posts/making-of-my-site/mobile-finished.png)\n\n## Responsive design\n\nI've finished the mobile layout (YAY!), now it is time to make the desktop one. Again, I started out by making the dark themed first then convert it to light theme. Since I've created the mobile version, it is easier to make the desktop one. After done by that, I quite happy with the result\n\n![finished desktop layout](/assets/posts/making-of-my-site/finished-partial.png)\n\nEventhough I liked the result, there's one thing that seems wrong. The light theme doesn't look really 'Light'. It still has those dark parts for the code blocks. I think asking for people's opinion is a good idea because several minds is better than one, so I asked my friends on Facebook and they said it's better to make the light theme pure white. So I changed the code blocks to white.\n\nThe next day, I checked my design again and I think there's a few parts that doesn't seem right. They are the READ MORE button and the date on the post page so I changed them. Here's the difference between them.\n\n![no button card](/assets/posts/making-of-my-site/no-button.png)\n\n![button card](/assets/posts/making-of-my-site/button.png)\n\nAfter making 2 version of my website (mobile and desktop), I think the design process is finished and the fun and challenging part begins!\n\n# Conclusion\n\nDesigning a mockup for your own website isn't as easy I though it would, but it sure was quite a fun process. It took 4 days because I also have quite a bit of school stuff that I have to do. Alright, I don't want to make this post a lenghty one so I'm gonna end it right here. See ya next post where I'll talk about the fun part. Bye!","src/content/posts/making-of-my-site.mdx","957527e6f8cf8f1a","making-of-my-site.mdx","my-experience-with-svelte",{"id":838,"data":840,"body":845,"filePath":846,"digest":847,"legacyId":848,"deferredRender":15},{"draft":25,"title":841,"date":842,"description":843,"tags":844},"My Experience Trying Out Svelte For The First Time",["Date","2020-09-27T00:00:00.000Z"],"Phew lads, I finally tried svelte after a while and boi oh boi do I love it",[683,671],"import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nPhew lads, I finally tried using Svelte and boi oh boi was it an awesome experience. I've been holding my self to try svelte because the editor that I'm using which is **Neovim** doesn't support svelte really well back then. I decided to try it again this time and it works great now.\n\n# Why Svelte?\n\nIf you don't know, I usually use React for building a website. I love React and its concept but I want to try something else that is different. Why not Vue? you might ask. Well, to be honest it's hard for me to wrap around my head on how Vue works. It's also because Svelte is quite a new library and it is unique. It doesn't use Virtual DOM like most of SPA framework does.\n\nTo be fair, Svelte is [actually a language](https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934) that compiles to pure javascript that we all know and _~~hate~~_ love. There are other languages that also tries to desribe interactive user interface such as [Imba](https://www.imba.io/), [Elm](https://elm-lang.org/), [Marko](https://markojs.com/) and many more.\n\n# My Experience\n\n## Almost feel like not using any framework\n\nMy first impression was like, man, this is just like a vanilla html with some sugar on top of it. It looks similar to Vue syntax but more flexible so to speak. Vue's html has to be placed inside of `&lt;template/&gt;` tag whereas Svelte isn't. You can place it literally anywhere. Take a look at this.\n\n```html\n\u003Cstyle>\n\t.heading {\n\t\tcolor: aqua;\n\t}\n\u003C/style>\n\n\u003CNavbar title=\"An epic title\">\n\t\u003Ch1 class=\"heading\">\n\t\t{heading}\n\t\t\u003Ch1>\n\t\t\t\u003Cdiv>\n\t\t\t\t\u003Cp>{paragraph}\u003C/p>\n\t\t\t\u003C/div>\n\t\t\t\u003Cfooter />\n\n\t\t\t\u003Cscript>\n\t\t\t\timport Footer from \"./_components/Footer.svelte\";\n\t\t\t\tlet heading = \"This is a heading\";\n\t\t\t\tlet paragraph = \"This is a heading\";\n\t\t\t\u003C/script>\n\t\t\u003C/h1>\n\t\u003C/h1>\u003C/Navbar\n>\n```\n\nIt looks very similar to pure html isn't it? I also prefer Svelte syntax over Vue syntax because it looks more similar to React. What I mean by that is, if you want to run a javascipt expression, they both uses `{}`. For example.\n\n```html\n\u003C!-- React -->\n\u003CCounter count=\"{count}\" />\n\n\u003C!-- Svelte -->\n\u003CCounter count=\"{count}\" />\n\u003C!-- or shorthand if you prefer -->\n\u003CCounter {count} />\n\n\u003C!-- Vue -->\n\u003CCounter v-bind:count=\"count\" />\n```\n\n## What I've made with Svelte\n\nI've made 2 websites using Svelte. The first one is [Three Of Something](https://three-of-something.vercel.app/) which is a place where I put the result of small challenge where I implement a UI design that I found to code. I do this challenge every week with both of my friends, [NikarashiHatsu](https://github.com/nikarashihatsu) and [LynSotera](https://github.com/LynSotera). Here's a screenshot of the homepage.\n\n![three of  something](/assets/posts/my-experience-with-svelte/tos.png)\n\nGo visit the website if you're interested ツ\n\nThe second website that I made is [Kanaizu](https://kanaizu.vercel.app/). It's basically some sort of quiz app where you need to type the correct romaji for the shown kana. The main reason of why I made this app is because I want to learn more about Svelte and to help my friend memorise Japanese kana. Here's the homepage of it.\n\n![kanaizu](/assets/posts/my-experience-with-svelte/kanaizu.png)\n\nAgain, go visit the website if you're interested ツ\n\nTo be fair, I made those using [Routify](https://routify.dev/). Basically, **Routify handles the routing**. I didn't use [Sapper](https://sapper.dev) because it's too much for what I need. I just need a basic routing and Routify is perfect.\n\n## What I've learned so far\n\nAfter making those 2 sites, I of course learned some new stuff and I'm so happy that I finally decided to try Svelte.\n\n### Components\n\nOn React, a component is a function that returns a JSX. It looks something like this.\n\n```javascript\nexport default () => \u003Cp>Hello World!\u003C/p>;\n```\n\nOn Svelte, the whole file is a component. It uses `.svelte` extension and the syntax is basically a superset of HTML. It looks something like this.\n\n```html\n\u003Cstyle>\n\t/* some stylings */\n\u003C/style>\n\n\u003Cdiv>I'm an HTML\u003C/div>\n\n\u003Cscript>\n\t// some logic goes here\n\u003C/script>\n```\n\nThe order doesn't really matter but I prefer `style-markup-script` because I like the markup to be in the middle of the stylings and the script.\n\n### Props\n\nApparently, props in svelte is just an exported `let` variable. So what you would do to make a prop is something like this.\n\n`Counter.svelte`\n\n```html\n\u003Cdiv>{count}\u003C/div>\n\n\u003Cscript>\n\texport let count;\n\u003C/script>\n```\n\n`App.svelte`\n\n```html\n\u003Cdiv>\n\t\u003CCounter count=\"{1}\" />\n\u003C/div>\n\n\u003Cscript>\n\timport Counter from \"./counter.svelte\";\n\u003C/script>\n```\n\n### Scoped stylings\n\nStyling in Svelte is scoped! Because you write the styling on the same file as the rest of the component, it became scoped. You can still change the global styling using `:global()` though.\n\n### Global state\n\nNext thing that I learned is global state or store. Usually in React, I need `React.Context` to store a global state. On Svelte, I need to use `svelte/store`. Global state is much simpler in Svelte in my opinion. Here's a comparison between them.\n\n`context.js`\n\n```javascript\nimport React, { createContext, useState } from \"react\";\n\nexport const CountContext = createContext(null);\n\nexport const CountProvider = ({ children }) => {\n\tconst [count, setCount] = useState(0);\n\treturn \u003CCountContext.Provider value={{ count, setCount }}>{children}\u003C/CountContext.Provider>;\n};\n```\n\n`app.js`\n\n```javascript\nimport React, { useContext } from \"react\";\nimport { CountProvider, CountContext } from \"./context\";\n\nexport default () => {\n\tconst { count, setCount } = useContext(CountContext);\n\treturn (\n\t\t\u003CCountProvider>\n\t\t\t\u003Cp>{count}\u003C/p>\n\t\t\t\u003Cbutton onClick={() => setCount(count + 1)}>Increment\u003C/button>\n\t\t\t\u003Cbutton onClick={() => setCount(count - 1)}>Decrement\u003C/button>\n\t\t\u003C/CountProvider>\n\t);\n};\n```\n\nWell, it looks like a lot but it's actually quite simple if you know how React Context works. Now let's compare it with Svelte.\n\n`stores.js`\n\n```javascript\nimport { writable } from \"svelte/store\";\n\nexport const count = writable(0);\n```\n\n`app.svelte`\n\n```html\n\u003Cp>{$count}\u003C/p>\n\u003Cbutton on:click=\"{count.update(n\" =\"\">n + 1)}>Increment\u003C/button>\n\u003Cbutton on:click=\"{count.update(n\" =\"\">n - 1)}>Decrement\u003C/button>\n\n\u003Cscript>\n\timport { count } from \"./stores\";\n\u003C/script>\n```\n\nI mean, just look at how simple it is. Bare in mind that this post isn't meant to explain every single thing that Svelte has to offer so please refer to the [official website](https://svelte.dev/tutorial/writable-stores) for more explanation ツ\n\nActually, Svelte also has [Context API](https://svelte.dev/tutorial/context-api). Since I'm still learning, please read [this article](https://medium.com/better-programming/6-ways-to-do-component-communications-in-svelte-b3f2a483913c) for better understanding. It's such a good article and you should definitely check it out!\n\n### Animation and transition directive\n\nSvelte provides [animation](https://svelte.dev/tutorial/animate) and [transition](https://svelte.dev/tutorial/transition) that you can use to animate your components. The usage is also simple, what you would do is just something like this.\n\n`Transition.svelte`\n\n```html\n\u003Cbutton on:click=\"{isVisible\" =\"!isVisible}\">Toggle\u003C/button>\n{#if isVisible}\n\u003Cp transition:fade>This text is visible\u003C/p>\n{/if}\n\n\u003Cscript>\n\timport { fade } from \"svelte/transition\";\n\tlet isVisible = false;\n\u003C/script>\n```\n\nThe transition directive is triggered whenever an element leaves or enter the DOM tree. More details about transition directive is available [here](https://svelte.dev/docs#transition_fn).\n\nI used transition for [Kanaizu](https://kanaizu.vercel.app) but I haven't tried the animate directive since I haven't found the use case for it.\n\n### Logic blocks\n\nLast one is logic blocks. On React, you can use curly braces `{}` to write some Javascript logics and return something that will get rendered. Here's an example.\n\n```javascript\nimport React, { useState } from \"react\";\n\nexport default function Counter() {\n\tconst [isVisible, setVisible] = false;\n\treturn (\n\t\t\u003Cdiv>\n\t\t\t{isVisible && \u003Cdiv>I'm Visible!\u003C/div>}\n\t\t\t\u003Cbutton onClick={() => setVisible(!isVisible)}>Toggle\u003C/button>\n\t\t\u003C/div>\n\t);\n}\n```\n\nIt's a little bit different on Svelte. It looks something like this.\n\n```html\n{#if isVisible}\n\u003Cp>I'm Visible!\u003C/p>\n{/f}\n\u003Cbutton on:clock=\"{isVisible\" =\"!isVisible}\">Toggle\u003C/button>\n\n\u003Cscript>\n\tlet isVisible = false;\n\u003C/script>\n```\n\nI like them both so it doesn't really matter. There's also quite a few on [Svelte's docs](https://svelte.dev/docs#if).\n\n# Conclusion\n\nWell, I fell in love with this _language_. It's so simple yet it's so good. Sorry if the highlighting looks weird in this post because I couldn't make it work for Svelte or JSX syntax :p\n\nI want to rebuild this blog using [Sapper](https://sapper.dev) + [MDSveX](https://mdsvex.com/) in the future. Don't get me wrong, [Gatsby](https://www.gatsbyjs.com/) is great. I just want to try out something new. \u003Ci style=\"color: #eaeaea\">Svelte's bundle size is also smaller compared to React, that's also why ツ\u003C/i>\n\n\u003CUpdate date=\"2020-11-01\">\n\nIf you're reading this then you're currently at my 'new' website that I mentioned earlier =)\n\n\u003C/Update>\n\nThanks for reading this! You should definitely try Svelte, you wouldn't regret it. Anyway, have a good day folks! =)","src/content/posts/my-experience-with-svelte.mdx","995a74ea0783e5e4","my-experience-with-svelte.mdx","my-nvim-lsp-setup",{"id":849,"data":851,"body":856,"filePath":857,"digest":858,"legacyId":859,"deferredRender":15},{"draft":15,"title":852,"date":853,"description":854,"tags":855},"My setup for Neovim's builtin LSP client",["Date","2020-12-18T00:00:00.000Z"],"A post where I explain about my setup for Neovim's builtin LSP",[706],"[lsp-guide-vscode]: https://code.visualstudio.com/api/language-extensions/language-server-extension-guide\n[lsp-website]: https://microsoft.github.io/language-server-protocol/\n[tj-vimconf]: https://www.youtube.com/watch?v=C9X5VF9ASac\n[nvim-lspconfig]: https://github.com/neovim/nvim-lspconfig\n[nvim-compe]: https://github.com/hrsh7th/nvim-compe\n[packer-nvim]: https://github.com/wbthomason/packer.nvim\n[coc-nvim]: https://github.com/neoclide/coc.nvim\n[lspsaga-nvim]: https://github.com/glepnir/lspsaga.nvim\n[telescope-nvim]: https://github.com/nvim-telescope/telescope.nvim\n[lsp-init-lua]: https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/modules/lsp/init.lua\n[vim-vsnip]: https://github.com/hrsh7th/vim-vsnip\n[snippets-nvim]: https://github.com/norcalli/snippets.nvim\n[completion-nvim]: https://github.com/nvim-lua/completion-nvim\n[tj-twitch]: https://www.twitch.tv/teej_dv\n[null-config]: https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/plugins/null-ls.lua\n[null-ls]: https://github.com/jose-elias-alvarez/null-ls.nvim\n[lsp-mappings]: https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/modules/lsp/mappings.lua\n[diagnostic-nvim]: https://github.com/nvim-lua/diagnostic-nvim\n[big-pr]: https://github.com/neovim/neovim/pull/12655\n\nimport Update from \"~/components/Update.astro\";\n\n# What is LSP and Why?\n\n> **20-08-2021**: This post is no longer maintained because I've changed my config quite a bit since I wrote this and I don't feel like updating it :p\n\nIf you don't already know what LSP is, well, LSP is a Language Server Protocol and it was created by Microsoft. It's a better implementation of language support for a text editor. Instead of having to implement it for every language on every text editor, we only need a server for a specific language and a client for a text editor that can speak to the server.\n\nImagine the editor as `X` and language feature as `Y`, the first solution would take `X*Y` to implement because it needs to implements _every_ language features for _every_ editor. The second solution which is the LSP way would only take `X+Y` because it would only take a server for the language and a client that can speak to that server. The server can be used for any text editor that has a client and the client can speak to any LSP server. No more reinventing the wheel, great!\n\nHere are some resources that explain LSP _way better_ and in more detail.\n\n-   [LSP guide for VScode][lsp-guide-vscode]\n-   [Official page for LSP][lsp-website]\n-   [TJ's talk about LSP on Vimconf 2020][tj-vimconf]\n\n# Neovim builtin LSP client\n\nI use Neovim's built-in LSP client which only available on the `master` branch of Neovim at the time of writing this. I was using [coc.nvim][coc-nvim] but it was slow on my machine because it uses node and it's a remote plugin which adds some overhead. It still works great nonetheless, it's just slow on my machine.\n\nThe new neovim's built-in LSP client is written in Lua and Neovim ships with LuaJIT which makes it super fast.\n\n# Configuration\n\n## nvim-lspconfig\n\nNeovim has a repo with LSP configuration for a various language called [nvim-lspconfig][nvim-lspconfig], this is _NOT_ where the LSP client lives, the client already ships with Neovim. It's just a repo that holds the configuration for the client.\n\nI have this piece of code on my config to install it. I use [packer.nvim][packer-nvim]\n\n```lua\nuse {'neovim/nvim-lspconfig', opt = true} -- builtin lsp config\n```\n\n## Setup\n\nI have a directory filled with LSP related config. Here's some snippet that sets up the LSP.\n\n```lua\nlocal custom_on_attach = function()\n  mappings.lsp_mappings()\n\nend\n\nlocal custom_on_init = function(client)\n  print('Language Server Protocol started!')\n\n  if client.config.flags then\n    client.config.flags.allow_incremental_sync = true\n  end\nend\n\nnvim_lsp.gopls.setup{\n  on_attach = custom_on_attach,\n  on_init = custom_on_init,\n}\n```\n\nI made a `custom_on_attach` function to attach LSP specific mappings. I also made a custom `on_init` function to notify me when the LSP is started and enable `incremental_sync`. Though, I'm not sure if `on_init` is the correct thing that I'm looking for. Sometimes it notifies me when the LSP server hasn't even started yet :p\n\n\u003CUpdate date=\"2021-02-04\">\n\nI've updated my config to use a _better_ way to set them up. Basically, I have a key-value pair table, each item is a table with the server name as its key. This way, I wouldn't need to copy and paste `nvim_lsp.lsp_name.setup{...}`.\n\n\u003C/Update>\n\nYou can find the full content of this file [here][lsp-init-lua]\n\n## Mappings\n\nHere are some of my LSP related mappings which you can find in the file [here][lsp-mappings]\n\n```lua\nlocal remap = vim.api.nvim_set_keymap\nlocal M = {}\n\nlocal signature = require(\"lspsaga.signaturehelp\")\n-- other LSP saga modules\n\nM.lsp_mappings = function()\n  if type == \"jdtls\" then\n    nnoremap({ \"ga\", require(\"jdtls\").code_action, { silent = true } })\n  else\n    nnoremap({ \"ga\", require(\"plugins._telescope\").lsp_code_actions, { silent = true } })\n  end\n\n  inoremap({ \"\u003CC-s>\", signature.signature_help, { silent = true } })\n  -- some other mappings here\nend\n\nreturn M\n```\n\n## Language-specific config\n\nI have most of my LSP config to be default but I gave several LSP an option like `tsserver`, `svelteserver`, or `sumneko_lua`.\n\n### tsserver\n\nI have my `tsserver` to be started on every JS/TS file regardless of its directory. The default config will only start when it found `package.json` or `.git`.\n\n````lua\nnvim_lsp.tsserver.setup{\n=======\nI have my `tsserver` to be started on every JS/TS file regardless of its directory. With the default config, it will only start when it found `package.json` or `.git` which marks the root directory for the LSP.\n\n```lua\n-- inside the `servers` table\ntsserver = {\n>>>>>>> 06f717c (I ACCIDENTALLY DELETED MY LOCAL REPOSITORY LMAO HELP)\n  filetypes = { 'javascript', 'typescript', 'typescriptreact' },\n  on_attach = custom_on_attach,\n  on_init = custom_on_init,\n  root_dir = function() return vim.loop.cwd() end\n}\n````\n\n### svelteserver\n\nI disabled its HTML emmet suggestion and removed `>` and `\u003C` from `triggerCharacters`. They're so annoying to me.\n\n```lua\n-- inside the `servers` table\nsvelteserver = {\n  on_attach = function(client)\n    mappings.lsp_mappings()\n\n    client.server_capabilities.completionProvider.triggerCharacters = {\n      \".\", '\"', \"'\", \"`\", \"/\", \"@\", \"*\",\n      \"#\", \"$\", \"+\", \"^\", \"(\", \"[\", \"-\", \":\"\n    }\n  end,\n  on_init = custom_on_init,\n  handlers = {\n    [\"textDocument/publishDiagnostics\"] = is_using_eslint,\n  },\n  filetypes = { 'html', 'svelte' },\n  settings = {\n    svelte = {\n      plugin = {\n        -- some settings\n      },\n    },\n  },\n}\n```\n\n### sumneko_lua\n\n[lua-language-server][lua-ls] is a bit different because I compiled it from source so it needs some extra setup.\n\n```lua\nlocal sumneko_root = os.getenv(\"HOME\") .. \"/repos/lua-language-server\"\n\n-- inside the `servers` table\nsumneko_lua = {\n  cmd = {\n    sumneko_root .. \"/bin/Linux/lua-language-server\",\n    \"-E\",\n    sumneko_root .. \"/main.lua\",\n  },\n  on_attach = custom_on_attach,\n  on_init = custom_on_init,\n  settings = {\n    Lua = {\n      runtime = { version = \"LuaJIT\", path = vim.split(package.path, \";\") },\n      diagnostics = {\n        enable = true,\n        globals = {\n          \"vim\", \"describe\", \"it\", \"before_each\", \"after_each\",\n          \"awesome\", \"theme\", \"client\", \"P\",\n        },\n      },\n      workspace = {\n        preloadFileSize = 400,\n      },\n    },\n  },\n}\n```\n\n## Diagnostic\n\nI was using [diagnostic-nvim][diagnostic-nvim] before [this big PR][big-pr] got merged which makes diagnostic-nvim redundant. Here's some of my diagnostic config.\n\n```lua\nvim.lsp.handlers[\"textDocument/publishDiagnostics\"] = vim.lsp.with(\n  vim.lsp.diagnostic.on_publish_diagnostics, {\n    virtual_text = {\n      prefix = \"»\",\n      spacing = 4,\n    },\n    signs = true,\n    update_in_insert = false,\n  }\n)\n\nvim.fn.sign_define('LspDiagnosticsSignError', { text = \"\", texthl = \"LspDiagnosticsDefaultError\" })\nvim.fn.sign_define('LspDiagnosticsSignWarning', { text = \"\", texthl = \"LspDiagnosticsDefaultWarning\" })\nvim.fn.sign_define('LspDiagnosticsSignInformation', { text = \"\", texthl = \"LspDiagnosticsDefaultInformation\" })\nvim.fn.sign_define('LspDiagnosticsSignHint', { text = \"\", texthl = \"LspDiagnosticsDefaultHint\" })\n```\n\nI set the prefix for `virtual_text` to be `»` because I don't really like the default one and enabled `signs` for the diagnostic hint. I also made it to only update the diagnostic when I switch between insert mode and normal mode because it's quite annoying when I haven't finished typing and get yelled at by LSP because it expects me to put `=` after a variable name that I haven't even finished typing yet.\n\n## Linting and Formatting\n\nI recently started using [null-ls][efm-ls] to run [eslint](https://eslint.org) and formatters like [prettier](https://prettier.io) and [stylua](https://github.com/johnnymorganz/stylua).\n\nYou can get my full config for `null-ls` [here][null-config]\n\n## Diagnostic Conflict\n\nWhen I use efm-langserver, the diagnostic that comes from the LSP (like `tsserver`) and external linter that efm-langserver uses are conflicting. So, I made a custom function for it to check if there's a file like `.eslintrc.js`, it will turn off the diagnostic that comes from LSP and use ESlint instead.\n\n\u003CUpdate date=\"2021-01-01\">\n\nI've found a better way from one of [TJ's][tj-twitch] stream to do this which looks like this.\n\n\u003C/Update>\n\n```lua\nlocal is_using_eslint = function(_, _, result, client_id)\n  if is_cfg_present(\"/.eslintrc.json\") or is_cfg_present(\"/.eslintrc.js\") then\n    return\n  end\n\n  return vim.lsp.handlers[\"textDocument/publishDiagnostics\"](_, _, result, client_id)\nend\n```\n\nI've overridden the `vim.lsp.handlers[\"textDocument/publishDiagnostics\"]` anyway so reusing it would also works and it looks way cleaner.\n\n## Completion and Snippets\n\nI use a completion and snippet plugin to make my life easier. For completion, I use [nvim-compe][nvim-compe], previously I was using [completion-nvim][completion-nvim] but I had some issues with it such as path completion sometimes not showing up and flickering.\n\nSnippet wise, I use [vim-vsnip][vim-vsnip]. I was going to use [snippets.nvim][snippets-nvim] but it doesn't integrate well enough with LSP's snippet.\n\nHere's some of my `nvim-compe` config\n\n```lua\nlocal remap = vim.api.nvim_set_keymap\n\nvim.g.vsnip_snippet_dir = vim.fn.stdpath(\"config\")..\"/snippets\"\n\nrequire(\"compe\").setup({\n  enabled              = true,\n  debug                = false,\n  min_length           = 2,\n  preselect            = \"disable\",\n  source_timeout       = 200,\n  incomplete_delay     = 400,\n  allow_prefix_unmatch = false,\n\n  source = {\n    path     = true,\n    calc     = true,\n    buffer   = true,\n    vsnip    = true,\n    nvim_lsp = true,\n    nvim_lua = true,\n  },\n})\n\nUtil.trigger_completion = function()\n  if vim.fn.pumvisible() ~= 0 then\n    if vim.fn.complete_info()[\"selected\"] ~= -1 then\n      return vim.fn[\"compe#confirm\"]()\n    end\n  end\n\n  local prev_col, next_col = vim.fn.col(\".\") - 1, vim.fn.col(\".\")\n  local prev_char = vim.fn.getline(\".\"):sub(prev_col, prev_col)\n  local next_char = vim.fn.getline(\".\"):sub(next_col, next_col)\n\n  -- minimal autopairs-like behaviour\n  if prev_char == \"{\" and next_char == \"\" then return Util.t(\"\u003CCR>}\u003CC-o>O\") end\n  if prev_char == \"[\" and next_char == \"\" then return Util.t(\"\u003CCR>]\u003CC-o>O\") end\n  if prev_char == \"(\" and next_char == \"\" then return Util.t(\"\u003CCR>)\u003CC-o>O\") end\n  if prev_char == \">\" and next_char == \"\u003C\" then return Util.t(\"\u003CCR>\u003CC-o>O\") end -- html indents\n\n  return Util.t(\"\u003CCR>\")\nend\n\nremap(\n  \"i\",\n  \"\u003CCR>\",\n  \"v:lua.Util.trigger_completion()\",\n  { expr = true, silent = true }\n)\nremap(\n  \"i\",\n  \"\u003CTab>\",\n  table.concat({\n    \"pumvisible() ? \\\"\u003CC-n>\\\" : v:lua.Util.check_backspace()\",\n    \"? \\\"\u003CTab>\\\" : compe#confirm()\",\n  }),\n  { silent = true, noremap = true, expr = true }\n)\n\nremap(\n  \"i\",\n  \"\u003CS-Tab>\",\n  \"pumvisible() ? \\\"\u003CC-p>\\\" : \\\"\u003CS-Tab>\\\"\",\n  { noremap = true, expr = true }\n)\nremap(\n  \"i\",\n  \"\u003CC-Space>\",\n  \"compe#complete()\",\n  { noremap = true, expr = true, silent = true }\n)\n```\n\nYou can get the full config for my completion setup [here](https://github.com/elianiva/dotfiles/blob/5f813d893ff5a5928bac52995d6b4f806a8b3d2a/nvim/.config/nvim/lua/plugins/_completion.lua)\n\n# Closing Note\n\nI'm pretty pleased with my current setup. Kudos to Neovim's developer that brings LSP client to be a built-in feature! These are of course some other great LSP client alternatives for (Neo)vim, definitely check them out!\n\n-   [coc.nvim](https://github.com/neoclide/coc.nvim) (highly recommend this if you're just getting started)\n-   [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\n-   [vim-lsp](https://github.com/prabirshrestha/vim-lsp)\n-   [ALE](https://github.com/dense-analysis/ale)\n\nHere's my [whole LSP config](https://github.com/elianiva/dotfiles/tree/master/nvim/.config/nvim/lua/modules/lsp) if you want them. If you've read this far then thank you and have a wonderful day :)","src/content/posts/my-nvim-lsp-setup.mdx","e6d33be870e3c0a4","my-nvim-lsp-setup.mdx","my-opinion-on-nix",{"id":860,"data":862,"body":867,"filePath":868,"digest":869,"legacyId":870,"deferredRender":15},{"draft":15,"title":863,"date":864,"description":865,"tags":866},"My opinion on Nix, The package Manager",["Date","2021-05-13T00:00:00.000Z"],"I really like Nix, it's great and all, but I don't think I'm going to use it, \u003Cem>yet\u003C/em>.",[645,659],"[mj-link]: https://github.com/mjlbach\n[nix-website]: https://nixos.org/\n[fhs-wiki]: https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard\n[nix-basic]: https://nixos.org/guides/nix-pills/basics-of-language.html\n[shell-intro]: https://ghedam.at/15978/an-introduction-to-nix-shell\n[direnv-link]: https://direnv.net/\n[lorri-link]: https://github.com/target/lorri\n[hm-link]: https://github.com/nix-community/home-manager\n[nixgl-link]: https://github.com/guibou/nixGL\n\nimport Update from \"~/components/Update.astro\";\n\n# Introduction\n\nI've been trying to dive into Nix recently and it has been pleasant. The reason is, let's say [_someone_][mj-link] mentioned it a little bit _too_ much and got me interested.\n\nIf you don't know about Nix, it's a declarative, purely functional lazily evaluated language _and_ a package manager, and there's also NixOS which is a distribution entirely based on Nix. I won't explain what they are in this post, so please refer to their [official website][nix-website].\n\nThis post is going to be focused on my opinion about it so please take it with a grain of salt ;)\n\n\u003CUpdate date=\"2021-08-15\">\n\n~~I've decided to use Nix to manage my dotfiles and most of my packages since I moved to Fedora. I still use `dnf` for GUI packages since they don't play nicely when installed through Nix.~~\n\nI'm back to Arch, but I kept using Nix.\n\nHere's my [flake.nix](https://github.com/elianiva/dotfiles/blob/master/flake.nix) in case you want it ;)\n\n\u003C/Update>\n\n\u003CUpdate date=\"2021-11-24\">\n\nI stopped using Nix\n\n\u003C/Update>\n\n# NixOS\n\nMy very first introduction to Nix is actually using it from NixOS. It's a very unique Linux distribution, it doesn't use [FHS][fhs-wiki] which has its pros and cons.\n\nImagine, your entire system is like a git repo. You configure the system declaratively using a file in `/etc/configuration.nix`. It's super easy to configure services, packages, etc. You can also _rollback_ to a previous _generation_. Similar to how you'd do `git revert`.\n\nBecause you can configure everything from `/etc/configuration.nix`, there is _too_ much abstraction. I think it's good because it simplifies things and makes it easier because everything is centralised, but it's also not good because you no longer know which configuration goes to where.\n\nAlso, you lose the ability to run a normal binary because Nix uses a non-standard filesystem structure. You can _patch_ them, but that seems like a bit of a chore to me.\n\n# Nix, The Language\n\n## Purely Functional\n\nThe language is purely functional and lazily evaluated. Some people say that its syntax is quirky, but I don't really think it is. Its syntax is quite similar to Haskell.\n\nQuick and (overly) simplified explanation is, it adheres to the concept of functional programming which I really like. In Nix, everything (well, _mostly_. You still have a primitive data type) is basically a function with exactly one argument. If you want to insert multiple arguments, you'd need to use currying. It looks something like this.\n\n```nix\n# define the function\nsum = x: y: x + y;\n\n# call the function\nsum 2 5\n```\n\n..and here's an equivalent in Javascript\n\n```javascript\n// define the function\nconst sum = (x) => (y) => x + y;\n\n// call the function\nsum(2)(5);\n```\n\nIt feels easier on the eyes than the traditional `foo()` function invocation but it can also be a bit confusing at times. Learning Nix made me understand this concept, I used to be so confused why would anyone need currying and now I understand why :)\n\n## Lazy Evaluation\n\nThe code won't be evaluated if it's not being used. I personally think this is a cool concept. You can create an infinite list but you only take 20 of them, then it's going to be evaluated as if it's a list with a length of 20.\n\nThis concept also exists in Haskell (and probably _most_ functional language). Might be a bit confusing for someone who never used a lazily evaluated language, though.\n\n## Overall\n\nI don't think the syntax is quirky, it's unique in my opinion and I like it. If you want to know more about its syntax, please refer to [this page][nix-basic] as it's the official page and it explains them very well and thoroughly!\n\n# Nix, The Package Manager\n\n## The Good\n\nOne of the nicest thing out of many things about Nix package manager is you can execute an isolated shell and it can be easily reproduced. You can use `shell.nix` or `default.nix` and execute `nix-shell` on that directory. You can read [this article][shell-intro] or the [official wiki](https://nixos.wiki/wiki/Development_environment_with_nix-shell) to understand what it does\n\nYou can also execute a package temporarily using `nix-shell -p \u003Cpkgname>` without installing it. It's super cool!\n\nIt's also cross-platform, you can install it on MacOS or any GNU/Linux distribution, though I'm not sure about the non-systemd distribution. This makes it easy reproducibility on any OS -- Except Windows, that is. You can use WSL2 on Windows, however.\n\n## The Not-So-Good\n\nNow, the problem with this is since every package is 'isolated', _some_ of them like `telegram-desktop` won't work properly. It couldn't pick up the system theme, resulting in an ugly cursor. I know this is a minor issue, but it bothers me more than it should lol.\n\nAnother example is `fcitx5` which is an IME that I use to type 日本語. I don't know if it's my setup, but it doesn't seem to be able to find its addons like `mozc` -- I can switch my input method, but it has no effect when I'm typing.\n\nThe absolute deal-breaker for me though, is any package that uses OpenGL can't be used outside of NixOS without some sort of [wrapper][nixgl-link]. I don't really like adding a wrapper just to achieve this.\n\nThey work flawlessly on NixOS when I tried it, but I guess it's because the entire system is _designed_ for them.\n\nAlso, when it's downloading something, there is no progress bar which makes it seems like it doesn't do anything when it's downloading a big package. I have a slow connection and I got confused when it's trying to download something big.\n\n## Overall\n\nI actually enjoy writing Nix build files, it's really exciting to write them. It's also pretty satisfying when it successfully built the package.\n\n# Other Nix-Related Tools\n\n## Lorri and Direnv\n\nOther than plain Nix, I also tried [direnv][direnv-link] and [lorri][lorri-link] briefly. I think it's super useful if you have multiple projects using Nix.\n\nThough, since I don't have a project using Nix and most of my stuff is using Node or Rust and all of them are a one-man-project -- meaning that I'm the only one who works on it, I don't think using Nix is going to bring any advantage.\n\n## Home Manager\n\nI used [home-manager][hm-link] for a few days and it has been great! It's almost like `configuration.nix` for your current user instead of system-wide.\n\nI stopped using it though because I don't use Nix _that_ often (yet) and I don't have multiple machines so using it's probably a bit overkill.\n\n# TL;DR\n\nSo, here's a summary of what I think about Nix. Again, please take them with a grain of salt as this is my personal opinion and I might be completely wrong ;)\n\n## Why Nix is good\n\n-   The language is good. Yes, there are some quirks but every language have their own quirks.\n-   The package manager is great! It provides a hermetic build environment. It's super useful when you're working with many people.\n-   It can be used on multiple operating systems. This is great if you're working with someone who uses a different operating system.\n-   You became more nerdy than most people around you :p\n\n## Why I won't use it\n\n-   I'm not going to use it for now since I don't work collaboratively with several people (yet ;) and most of the time I code in NodeJS related stuff, Rust, and Lua, so using it won't bring any significant benefit. I think it would be beneficial when I do some serious low level programming that requires a bunch of system dependencies that needs to be easily reproducible.\n-   I already have a package manager; which is Pacman. Using both Pacman and Nix seems like a weird setup to me. If I use MacOS, I would definitely use Nix.\n-   I have a slow connection and low storage. Some packages from Pacman get duplicated in Nix; I know this is necessary for reproducibility but I'm not trying to reproduce it anywhere at the moment.\n-   I don't want to fall _too_ deep into yet another rabbit hole ;)\n\n# Conclusion\n\nOverall, I like Nix. I can't wait to be able to use it for a real-world situation -- As you may or may not know, I'm still in High School when I write this and there's almost no high-schooler who thinks Nix is worth investing your time into :p\n\nAlso, here's some good articles that I've read about Nix that you _might_ want to read if you're interested.\n\n-   [nix-shell with ZSH](https://msitko.pl/blog/2020/04/22/isolated-ennvironments-with-nix-shell-and-zsh.html)\n-   [How to learn Nix](https://ianthehenry.com/posts/how-to-learn-nix/)\n-   [Nix by example](https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55)\n-   [How to get started with Nix](http://alessandromarrella.com/fed7de08.html)\n-   [Using Nix in my development environment](https://ejpcmac.net/blog/about-using-nix-in-my-development-workflow/)\n\nAnyway, thanks for reading my post, and have a wonderful day! :)","src/content/posts/my-opinion-on-nix.mdx","c0823cae942c5536","my-opinion-on-nix.mdx","neovim-lua-statusline",{"id":871,"data":873,"body":878,"filePath":879,"digest":880,"legacyId":881,"deferredRender":15},{"draft":25,"title":874,"date":875,"description":876,"tags":877},"How I made my Neovim statusline in Lua",["Date","2020-11-29T00:00:00.000Z"],"A post where I explain how I made my custom statusline in Lua",[706],"import Update from \"~/components/Update.astro\";\n\n[gitsigns-link]: https://github.com/lewis6991/gitsigns.nvim\n[nerdfont-link]: https://nerdfonts.com\n[alacritty-link]: https://github.com/alacritty/alacritty\n[short-circuit]: https://en.m.wikipedia.org/wiki/Short-circuit_evaluation\n[nvim-web-devicons]: https://github.com/kyazdani42/nvim-web-devicons\n[lsp-status]: https://github.com/nvim-lua/lsp-status.nvim\n[bufferline-lua]: https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/plugins/nvim-bufferline.lua\n[autocmd]: https://github.com/neovim/neovim/pull/12378\n[appearances-lua]: https://github.com/elianiva/dotfiles/blob/934fe3dd54aab909c396bf0fafae285946fa7fb5/nvim/.config/nvim/lua/modules/_appearances.lua\n[expressline]: https://github.com/tjdevries/express_line.nvim\n[galaxyline]: https://github.com/glepnir/galaxyline.nvim\n[neoline]: https://github.com/adelarsq/neoline.vim\n[spec-file]: https://github.com/elianiva/icy.nvim/blob/d946e6d783c1903e92cfe46a7a955732ee6d9988/lua/lush_theme/icy.lua\n[new-line]: https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/modules/statusline.lua\n\n# Introduction\n\nHello there! So, I've been playing around with the latest Neovim feature and\nthat is it can now use Lua for its config. Quite a while ago I wrote [this post](https://elianiva.my.id/posts/vim-statusline) where I explain how I made my statusline. Now, it's time to update that post using Lua :)\n\n# Prerequisite\n\nIf you want to follow along, then these are the prerequisite.\n\n-   Neovim 0.5 (we need this version for lua support)\n-   [gitsigns.nvim][gitsigns-link]\n-   [nerdfont][nerdfont-link]\n-   [nvim-web-devicons][nvim-web-devicons]\n-   Terminal that supports true colour (I use [Alacritty][alacritty-link])\n-   Patience\n-   Googling skills in case something doesn't work correctly :p\n\n# Creating The Statusline\n\n## Initial Setup\n\nI wrote my statusline on `~/.config/nvim/lua/modules/_statusline.lua` along with my other lua modules so it will get picked up by Neovim and I can import it by using `require('modules._statusline')`\n\n## First Function\n\nI create an empty table for my statusline and alias for `vim.fn` and `vim.api` to make it shorter. You can call it whatever you want, I call it `M` since this variable is just a 'temporary' table that I'm going to use for a metatable. My current file now looks something like this.\n\n```lua\nlocal fn = vim.fn\nlocal api = vim.api\nlocal M = {}\n```\n\nThis first function is going to be a helper function that will return `true` of `false` based on the current window width. I use this to decide whether or not a component should display a full or a truncated version of it.\n\n```lua\nM.trunc_width = setmetatable({\n  -- You can adjust these values to your liking, if you want\n  -- I promise this will all makes sense later :)\n  mode       = 80,\n  git_status = 90,\n  filename   = 140,\n  line_col   = 60,\n}, {\n  __index = function()\n    return 80 -- handle edge cases, if there's any\n  end\n})\n\nM.is_truncated = function(_, width)\n  local current_width = api.nvim_win_get_width(0)\n  return current_width \u003C width\nend\n```\n\nThis function calls `vim.api.nvim_win_get_width` for the current active window which will return its width. This function will return `true` if the current window width is less than the passed argument thus telling a component to truncate its content.\n\n\u003CUpdate date=\"2021-02-26\">\n\nThanks @Evgeni for the suggestion on creating a table for each section truncation width, it's easier to keep track of which component has how many width.\n\n\u003C/Update>\n\n## Highlight groups\n\nI have this table that contains a string for the highlight group. I can then concatenate one of its items with a component and apply the highlight group for that component.\n\n```lua\nM.colors = {\n  active        = '%#StatusLine#',\n  inactive      = '%#StatuslineNC#',\n  mode          = '%#Mode#',\n  mode_alt      = '%#ModeAlt#',\n  git           = '%#Git#',\n  git_alt       = '%#GitAlt#',\n  filetype      = '%#Filetype#',\n  filetype_alt  = '%#FiletypeAlt#',\n  line_col      = '%#LineCol#',\n  line_col_alt  = '%#LineColAlt#',\n}\n```\n\nI made the highlight groups on my `~/.config/nvim/lua/modules/_appearances.lua` along with my other hl-group definitions, but here's the important snippet.\n\n\u003CUpdate date=\"2021-07-23\">\n\nNow since I made my own colourscheme using Lush, I defined them directly in the [spec file][lush-theme]\n\n\u003C/Update>\n\n```lua\nlocal set_hl = function(group, options)\n  local bg = options.bg == nil and '' or 'guibg=' .. options.bg\n  local fg = options.fg == nil and '' or 'guifg=' .. options.fg\n  local gui = options.gui == nil and '' or 'gui=' .. options.gui\n\n  vim.cmd(string.format('hi %s %s %s %s', group, bg, fg, gui))\nend\n\n-- you can of course pick whatever colour you want, I picked these colours\n-- because I use Gruvbox and I like them\nlocal highlights = {\n  {'StatusLine', { fg = '#3C3836', bg = '#EBDBB2' }},\n  {'StatusLineNC', { fg = '#3C3836', bg = '#928374' }},\n  {'Mode', { bg = '#928374', fg = '#1D2021', gui=\"bold\" }},\n  {'LineCol', { bg = '#928374', fg = '#1D2021', gui=\"bold\" }},\n  {'Git', { bg = '#504945', fg = '#EBDBB2' }},\n  {'Filetype', { bg = '#504945', fg = '#EBDBB2' }},\n  {'Filename', { bg = '#504945', fg = '#EBDBB2' }},\n  {'ModeAlt', { bg = '#504945', fg = '#928374' }},\n  {'GitAlt', { bg = '#3C3836', fg = '#504945' }},\n  {'LineColAlt', { bg = '#504945', fg = '#928374' }},\n  {'FiletypeAlt', { bg = '#3C3836', fg = '#504945' }},\n}\n\nfor _, highlight in ipairs(highlights) do\n  set_hl(highlight[1], highlight[2])\nend\n```\n\nYou can define this using VimL but I prefer doing it in Lua because 99% of my config is in Lua and I don't really like using VimL.\n\n## Separators\n\nSince I use [nerdfont](https://nerdfonts.com), I have fancy symbols that I can use. I use these symbols as a separator.\n\n```lua\n-- I keep this here just in case I changed my mind so I don't have to find these icons again when I need them\n-- you can of course just store one of them if you want\nM.separators = {\n  arrow = { '', '' },\n  rounded = { '', '' },\n  blank = { '', '' },\n}\n\nlocal active_sep = 'blank'\n```\n\nI use the arrow separator, either one is fine. It will look empty here because my website doesn't use Nerdfont.\n\n\u003CUpdate date=\"2021-01-30\">\n\nI now use the blank separator.\n\n\u003C/Update>\n\n## Mode Component\n\nThe first component for my statusline is the one that shows the current mode.\n\n```lua\nM.modes = setmetatable({\n  ['n']  = {'Normal', 'N'};\n  ['no'] = {'N·Pending', 'N·P'} ;\n  ['v']  = {'Visual', 'V' };\n  ['V']  = {'V·Line', 'V·L' };\n  ['\u0016'] = {'V·Block', 'V·B'};\n  ['s']  = {'Select', 'S'};\n  ['S']  = {'S·Line', 'S·L'};\n  ['\u0013'] = {'S·Block', 'S·B'};\n  ['i']  = {'Insert', 'I'};\n  ['ic'] = {'Insert', 'I'};\n  ['R']  = {'Replace', 'R'};\n  ['Rv'] = {'V·Replace', 'V·R'};\n  ['c']  = {'Command', 'C'};\n  ['cv'] = {'Vim·Ex ', 'V·E'};\n  ['ce'] = {'Ex ', 'E'};\n  ['r']  = {'Prompt ', 'P'};\n  ['rm'] = {'More ', 'M'};\n  ['r?'] = {'Confirm ', 'C'};\n  ['!']  = {'Shell ', 'S'};\n  ['t']  = {'Terminal ', 'T'};\n}, {\n  __index = function()\n      return {'Unknown', 'U'} -- handle edge cases\n  end\n})\n\nM.get_current_mode = function()\n  local current_mode = api.nvim_get_mode().mode\n\n  if self:is_truncated(self.trunc_width.mode) then\n    return string.format(' %s ', modes[current_mode][2]):upper()\n  end\n\n  return string.format(' %s ', modes[current_mode][1]):upper()\nend\n```\n\nYou probably notice that `V·Block` and `S·Block` look empty but they're not. It's a special character of `C-V` and `C-S`. If you go to (Neo)vim and press `C-V` in insert mode twice, it will insert something like `^V`. It's not the same as `^V`, I thought they're the same but they're not.\n\nWhat that code does is creates a key-value pair table with string as a key and a table as its value. I use the table's key to match what `vim.api.nvim_get_mode().mode` returns.\n\nDepending on the current window width, it will return different output. For example, if my current window isn't wide enough, it will return `N` instead of `Normal`. If you want to change when it will start to change then adjust the argument that is passed to the `is_truncated` function. Remember that `trunc_width` table from earlier? We use `mode` value here so that my Mode component will get truncated if my window width is less than `80`.\n\n\u003CUpdate date=\"2021-02-26\">\n\nThanks to @Evgeni for pointing me out, I moved the `mode` table outside of the function because previously I was putting it inside a function which will get created every time the function is executed.\n\n\u003Cbr />\nAlso, since I moved from `vim.fn.mode` to `vim.api.nvim_get_mode().mode`, there are *a lot* of missing keys on my `mode`\ntable; Hence a metatable is used so it will give me an `Unknown` mode instead of throwing an error when there's no matching\nkey on the table. (Also thanks @Evgeni :)\n\n\u003C/Update>\n\n## Git Status Component\n\nI use [gitsigns.nvim][gitsigns-link] to show the git hunk status on `signcolumn`. It provides some details like how many lines have been changed, added, or removed. It also provides the branch name. So, I'd like to integrate this functionality into my statusline.\n\n```lua\nM.get_git_status = function(self)\n  -- use fallback because it doesn't set this variable on the initial `BufEnter`\n  local signs = vim.b.gitsigns_status_dict or {head = '', added = 0, changed = 0, removed = 0}\n  local is_head_empty = signs.head ~= ''\n\n  if self:is_truncated(self.trunc_width.git_status) then\n    return is_head_empty and string.format('  %s ', signs.head or '') or ''\n  end\n\n  return is_head_empty\n    and string.format(\n      ' +%s ~%s -%s |  %s ',\n      signs.added, signs.changed, signs.removed, signs.head\n    )\n    or ''\nend\n```\n\nWhat that code does is it gets the git hunk status from [gitsigns.nvim][gitsigns-link] and store it on a variable. I use fallback here because it doesn't get set on initial `BufEnter` so I'll get a `nil` error if I don't do that.\n\nThe next bit is it checks if the branch name exists or not (basically checking if we're in a git repo or not), if it exists then it will return a formatted status that will look something like this.\n\n![gitstatus](/assets/posts/neovim-lua-statusline/gitstatus.png)\n\nIf the current window isn't wide enough, it will remove the git hunk summary and just display the branch name.\n\nIf you get confused with `and` and `or`, it's similar to ternary operator. `cond and true or false` is the same as `cond ? true : false` because `and` and `or` is a [short circuit][short-circuit] in Lua.\n\n## Filename Component\n\nMy next component is a filename component. I'd like to be able to see the filename without having to press `\u003CC-G>` every time I want to check the filename and its full path.\n\n```lua\nM.get_filename = function(self)\n  if self:is_truncated(self.trunc_width.filename) then return \" %\u003C%f \" end\n  return \" %\u003C%F \"\nend\n```\n\nDepending on the current window width, it will display an absolute path, relative path to our `$CWD`, or just the current filename.\n\nThe `%\u003C` is to tell the statusline to truncate this component if it's too long or doesn't have enough space instead of truncating the first component.\n\n## Filetype Component\n\nI want to see the filetype of the current buffer, so I'd like to include this on my statusline as well.\n\n```lua\nM.get_filetype = function()\n  local file_name, file_ext = fn.expand(\"%:t\"), fn.expand(\"%:e\")\n  local icon = require'nvim-web-devicons'.get_icon(file_name, file_ext, { default = true })\n  local filetype = vim.bo.filetype\n\n  if filetype == '' then return '' end\n  return string.format(' %s %s ', icon, filetype):lower()\nend\n```\n\nIt gets a value from `vim.bo.filetype` which will return a filetype and I transform it to lowercase using the `lower()` method. If the current buffer doesn't have a filetype, it will return nothing.\n\nI also use [nvim-web-devicons][nvim-web-devicons] to get the fancy icon for the current filetype.\n\n## Line Component\n\nEven though I have `number` and `relativenumber` turned on, I'd like to have this on my statusline as well.\n\n```lua\nM.get_line_col = function(self)\n  if self:is_truncated(self.trunc_width.line_col) then return ' %l:%c ' end\n  return ' Ln %l, Col %c '\nend\n```\n\nIt will display something like `Ln 12, Col 2` which means the cursor is at Line 12 and Column 2. This component also depends on the current window width, if it's not wide enough then it will display something like `12:2`.\n\n## LSP Diagnostic\n\nI use the built-in LSP client and it has the diagnostic capability. I can get the diagnostic summary using `vim.lsp.diagnostic.get_count(bufnr, severity)`.\n\n```lua\nM.get_lsp_diagnostic = function(self)\n  local result = {}\n  local levels = {\n    errors = 'Error',\n    warnings = 'Warning',\n    info = 'Information',\n    hints = 'Hint'\n  }\n\n  for k, level in pairs(levels) do\n    result[k] = vim.lsp.diagnostic.get_count(0, level)\n  end\n\n  if self:is_truncated(self.trunc_width.diagnostic) then\n    return ''\n  else\n    return string.format(\n      \"| :%s :%s :%s :%s \",\n      result['errors'] or 0, result['warnings'] or 0,\n      result['info'] or 0, result['hints'] or 0\n    )\n  end\nend\n```\n\nI got this section from [this repo][lsp-status] with some modification. It will be hidden when the current window width is less than `120`. I don't personally use this because I use a small monitor.\n\n\u003CUpdate date=\"2021-07-23\">\n\nI display this at my `tabline` instead since nvim-bufferline now supports custom section. [Here's][bufferline-lua] the relevant file for that. It will show the available diagnostics at the top right corner of the screen and update them in real-time.\n\n\u003C/Update>\n\n# Different Statusline\n\nI want to have 3 different statusline for different states which are _Active_ for the currently active window, _Inactive_ for the inactive window, and _Explorer_ for the file explorer window.\n\n## Active Statusline\n\nI combine all of my components as follows.\n\n```lua\nM.set_active = function(self)\n  local colors = self.colors\n\n  local mode = colors.mode .. self:get_current_mode()\n  local mode_alt = colors.mode_alt .. self.separators[active_sep][1]\n  local git = colors.git .. self:get_git_status()\n  local git_alt = colors.git_alt .. self.separators[active_sep][1]\n  local filename = colors.inactive .. self:get_filename()\n  local filetype_alt = colors.filetype_alt .. self.separators[active_sep][2]\n  local filetype = colors.filetype .. self:get_filetype()\n  local line_col = colors.line_col .. self:get_line_col()\n  local line_col_alt = colors.line_col_alt .. self.separators[active_sep][2]\n\n  return table.concat({\n    colors.active, mode, mode_alt, git, git_alt,\n    \"%=\", filename, \"%=\",\n    filetype_alt, filetype, line_col_alt, line_col\n  })\nend\n```\n\nThe `%=` acts like a separator. It will place all of the next components to the right, since I want my filename indicator to be in the middle, I put 2 of them around my filename indicator. It will basically center it. You can play around with it and find which one you like.\n\n## Inactive Statusline\n\nI want this inactive statusline to be as boring as possible so it won't distract me.\n\n```lua\nM.set_inactive = function(self)\n  return self.colors.inactive .. '%= %F %='\nend\n```\n\nIt's just displaying the full path of the file with a dimmed colour, super simple.\n\n## Inactive Statusline\n\nI have [nvim-tree.lua][nvim-tree-lua] as my file explorer and I want to have different statusline for it, so I made this simple statusline.\n\n```lua\nM.set_explorer = function(self)\n  local title = self.colors.mode .. '   '\n  local title_alt = self.colors.mode_alt .. self.separators[active_sep][2]\n\n  return table.concat({ self.colors.active, title, title_alt })\nend\n```\n\n## Dynamic statusline\n\nI use metatable to set the statusline from autocmd because the `:` symbol conflicts with VimL syntax. I'm probably going to change this once Neovim has the ability to define autocmd using Lua natively.\n\n```lua\nStatusline = setmetatable(M, {\n  __call = function(statusline, mode)\n    return self[\"set_\" .. mode](self)\n  end\n})\n\napi.nvim_exec([[\n  augroup Statusline\n  au!\n  au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline('active')\n  au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline('inactive')\n  au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline('explorer')\n  augroup END\n]], false)\n```\n\nThis auto command runs every time we enter or leave a buffer and set the corresponding statusline. It needs to be done using VimL because it doesn't have lua version _yet_. It's currently a [work in progress][autocmd] at the time of writing this post.\n\n# Result\n\nHere's how the entire file looks.\n\n```lua\nlocal fn = vim.fn\nlocal api = vim.api\n\nlocal M = {}\n\n-- possible values are 'arrow' | 'rounded' | 'blank'\nlocal active_sep = 'blank'\n\n-- change them if you want to different separator\nM.separators = {\n  arrow = { '', '' },\n  rounded = { '', '' },\n  blank = { '', '' },\n}\n\n-- highlight groups\nM.colors = {\n  active        = '%#StatusLine#',\n  inactive      = '%#StatuslineNC#',\n  mode          = '%#Mode#',\n  mode_alt      = '%#ModeAlt#',\n  git           = '%#Git#',\n  git_alt       = '%#GitAlt#',\n  filetype      = '%#Filetype#',\n  filetype_alt  = '%#FiletypeAlt#',\n  line_col      = '%#LineCol#',\n  line_col_alt  = '%#LineColAlt#',\n}\n\nM.trunc_width = setmetatable({\n  mode       = 80,\n  git_status = 90,\n  filename   = 140,\n  line_col   = 60,\n}, {\n  __index = function()\n      return 80\n  end\n})\n\nM.is_truncated = function(_, width)\n  local current_width = api.nvim_win_get_width(0)\n  return current_width \u003C width\nend\n\nM.modes = setmetatable({\n  ['n']  = {'Normal', 'N'};\n  ['no'] = {'N·Pending', 'N·P'} ;\n  ['v']  = {'Visual', 'V' };\n  ['V']  = {'V·Line', 'V·L' };\n  ['\u0016'] = {'V·Block', 'V·B'}; -- this is not ^V, but it's \u0016, they're different\n  ['s']  = {'Select', 'S'};\n  ['S']  = {'S·Line', 'S·L'};\n  ['\u0013'] = {'S·Block', 'S·B'}; -- same with this one, it's not ^S but it's \u0013\n  ['i']  = {'Insert', 'I'};\n  ['ic'] = {'Insert', 'I'};\n  ['R']  = {'Replace', 'R'};\n  ['Rv'] = {'V·Replace', 'V·R'};\n  ['c']  = {'Command', 'C'};\n  ['cv'] = {'Vim·Ex ', 'V·E'};\n  ['ce'] = {'Ex ', 'E'};\n  ['r']  = {'Prompt ', 'P'};\n  ['rm'] = {'More ', 'M'};\n  ['r?'] = {'Confirm ', 'C'};\n  ['!']  = {'Shell ', 'S'};\n  ['t']  = {'Terminal ', 'T'};\n}, {\n  __index = function()\n      return {'Unknown', 'U'} -- handle edge cases\n  end\n})\n\nM.get_current_mode = function(self)\n  local current_mode = api.nvim_get_mode().mode\n\n  if self:is_truncated(self.trunc_width.mode) then\n    return string.format(' %s ', self.modes[current_mode][2]):upper()\n  end\n  return string.format(' %s ', self.modes[current_mode][1]):upper()\nend\n\nM.get_git_status = function(self)\n  -- use fallback because it doesn't set this variable on the initial `BufEnter`\n  local signs = vim.b.gitsigns_status_dict or {head = '', added = 0, changed = 0, removed = 0}\n  local is_head_empty = signs.head ~= ''\n\n  if self:is_truncated(self.trunc_width.git_status) then\n    return is_head_empty and string.format('  %s ', signs.head or '') or ''\n  end\n\n  return is_head_empty and string.format(\n    ' +%s ~%s -%s |  %s ',\n    signs.added, signs.changed, signs.removed, signs.head\n  ) or ''\nend\n\nM.get_filename = function(self)\n  if self:is_truncated(self.trunc_width.filename) then return \" %\u003C%f \" end\n  return \" %\u003C%F \"\nend\n\nM.get_filetype = function()\n  local file_name, file_ext = fn.expand(\"%:t\"), fn.expand(\"%:e\")\n  local icon = require'nvim-web-devicons'.get_icon(file_name, file_ext, { default = true })\n  local filetype = vim.bo.filetype\n\n  if filetype == '' then return '' end\n  return string.format(' %s %s ', icon, filetype):lower()\nend\n\nM.get_line_col = function(self)\n  if self:is_truncated(self.trunc_width.line_col) then return ' %l:%c ' end\n  return ' Ln %l, Col %c '\nend\n\n\nM.set_active = function(self)\n  local colors = self.colors\n\n  local mode = colors.mode .. self:get_current_mode()\n  local mode_alt = colors.mode_alt .. self.separators[active_sep][1]\n  local git = colors.git .. self:get_git_status()\n  local git_alt = colors.git_alt .. self.separators[active_sep][1]\n  local filename = colors.inactive .. self:get_filename()\n  local filetype_alt = colors.filetype_alt .. self.separators[active_sep][2]\n  local filetype = colors.filetype .. self:get_filetype()\n  local line_col = colors.line_col .. self:get_line_col()\n  local line_col_alt = colors.line_col_alt .. self.separators[active_sep][2]\n\n  return table.concat({\n    colors.active, mode, mode_alt, git, git_alt,\n    \"%=\", filename, \"%=\",\n    filetype_alt, filetype, line_col_alt, line_col\n  })\nend\n\nM.set_inactive = function(self)\n  return self.colors.inactive .. '%= %F %='\nend\n\nM.set_explorer = function(self)\n  local title = self.colors.mode .. '   '\n  local title_alt = self.colors.mode_alt .. self.separators[active_sep][2]\n\n  return table.concat({ self.colors.active, title, title_alt })\nend\n\nStatusline = setmetatable(M, {\n  __call = function(statusline, mode)\n    if mode == \"active\" then return statusline:set_active() end\n    if mode == \"inactive\" then return statusline:set_inactive() end\n    if mode == \"explorer\" then return statusline:set_explorer() end\n  end\n})\n\n-- set statusline\n-- TODO: replace this once we can define autocmd using lua\napi.nvim_exec([[\n  augroup Statusline\n  au!\n  au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline('active')\n  au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline('inactive')\n  au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline('explorer')\n  augroup END\n]], false)\n\n----[[\n--  NOTE: I don't use this since the statusline already has\n--  so much stuff going on. Feel free to use it!\n--  credit: https://github.com/nvim-lua/lsp-status.nvim\n--\n--  I now use `tabline` to display these errors, go to `_bufferline.lua` if you\n--  want to check that out\n----]]\n-- Statusline.get_lsp_diagnostic = function(self)\n--   local result = {}\n--   local levels = {\n--     errors = 'Error',\n--     warnings = 'Warning',\n--     info = 'Information',\n--     hints = 'Hint'\n--   }\n\n--   for k, level in pairs(levels) do\n--     result[k] = vim.lsp.diagnostic.get_count(0, level)\n--   end\n\n--   if self:is_truncated(120) then\n--     return ''\n--   else\n--     return string.format(\n--       \"| :%s :%s :%s :%s \",\n--       result['errors'] or 0, result['warnings'] or 0,\n--       result['info'] or 0, result['hints'] or 0\n--     )\n--   end\n-- end\n```\n\nAnd here's the result.\n\n![result](/assets/posts/neovim-lua-statusline/result.png)\n\nAlso a [preview video](https://streamable.com/arzm3q) for a better demonstration. As you can see in the video, they change their appearance based on the window width.\n\nThat's the active statusline, I don't think I need to put a screenshot for the inactive one because nothing is interesting going on there :p.\n\nHere's [my statusline file](https://github.com/elianiva/dotfiles/blob/master/nvim/.config/nvim/lua/modules/_statusline.lua) for a reference.\n\n\u003CUpdate date=\"2021-06-17\">\n\nI've changed [my statusline][new-line] quite a bit so it won't look the same as the one you see in this post.\n\n\u003C/Update>\n\nThere are also some great statusline plugins written in lua if you want to get started quickly such as [tjdevries/express_line.nvim][expressline], [glepnir/galaxyline.nvim][galaxyline], [adelarsq/neoline.vim][neoline] and so on.\n\n# Closing Note\n\nI really like how it turned out, Lua support on Neovim is probably the best update I've ever experienced. It makes me want to play around with Neovim's API even more. Kudos to all of Neovim contributors!\n\nAnyway, thanks for reading, and gave a great day! :)","src/content/posts/neovim-lua-statusline.mdx","d8da852c2179dd0f","neovim-lua-statusline.mdx","my-spotify-tui-setup",{"id":882,"data":884,"body":889,"filePath":890,"digest":891,"legacyId":892,"deferredRender":15},{"draft":25,"title":885,"date":886,"description":887,"tags":888},"My /comfy/ and less bloated spotify-tui setup",["Date","2020-06-03T00:00:00.000Z"],"Since I use my terminal quite often, why don't I use spotify inside my terminal as well ツ",[645],"# Introduction\n\nHi! This time I will explain about how I setup my spotifyd + spotify-tui to enjoy music from spotify without their resource heavy app. It's not Spotify's fault, it's Electron. Not that I hate it, I think it's awesome. It just feels heavy on my machine. I still have 4GB of RAMs lol, so that's reasonable.\n\n# Spotifyd\n\n## What Is Spotifyd?\n\nSpotifyd is the daemon that is used to run spotify-tui. So, basically spotify-tui is just a front-end for spotify that needs some sort of daemon. You can use spotify-tui with any official Spotify client. For example, spotify-tui will read your phone as an available device but that will be a hassle having to open spotify on your phone to use spotify on your desktop.\n\nSpotifyd provides a service that can be used to play spotify. It's more lightweight and supports more platform than the official client. You can check their [github page](https://github.com/Spotifyd/spotifyd/) for more details.\n\n## Installation\n\nI'm using Arch so I will use the almighty AUR to make my life easier. If you're on any other distro, you can either take the binary or build it yourself. To install it on Arch (or any Arch based distro), you can use any AUR helper or download the `PKGBUILD` and run `makepkg -si`.\n\n```bash\n# yay\n$ yay -S spotifyd-full\n\n# trizen\n$ trizen spotifyd-full\n```\n\nI personally use `spotifyd-full` from AUR. Spotify-full is spotifyd with all feature flags enabled. If you want a minimal install, you can use `spotifyd` instead. If you don't like to wait for it to compile, just take one with `-bin` suffix. For more details on feature flags, you can refer to their [github page](https://github.com/Spotifyd/spotifyd/blob/master/README.md#feature-flags).\n\n## Configuration\n\nConfiguring spotifyd is quite easy actually, they gave you a [default configuration](https://github.com/Spotifyd/spotifyd#configuration) to help you get going. Here's mine.\n\n```ini\n[global]\nusername = \u003Cyour username>\npassword = \u003Cyour password>\n# password_cmd = command_that_writes_password_to_stdout\n# use_keyring = true\nbackend = pulseaudio\n# device = alsa_audio_device\n# control = alsa_audio_device\n# mixer = PCM\nvolume_controller = alsa_linear\ndevice_name = arch\nbitrate = 320\ncache_path = /home/elianiva/.config/spotifyd\nno_audio_cache = false\nvolume_normalisation = true\nnormalisation_pregain = -4\ndevice_type = computer\n```\n\nI'll explain the configuration briefly.\n\n-   **Username**\n\n    Fill this field with your _real_ username. You can get one from [here](https://www.spotify.com/us/account/set-device-password/) and it's roughly looks like **21zu9n5i8jtipipiwxrfyglhohmq**. It's **NOT** your usual username that you can change, this username is given by Spotify.\n\n-   **Password**\n\n    Fill this field with your spotify device password which you can make by visiting [this link](https://www.spotify.com/us/account/set-device-password/). If you want to put this configuration on github or something like that, **DO NOT USE THIS METHOD**. If you use this method, don't include it on your repo.\n\n-   **Password Cmd**\n\n    Fill this field with a program that outputs your password through stdout. `pass` can do this. For more details, you can check out [their website](https://www.passwordstore.org/). I personally don't use this so I can't give you any guide.\n\n-   **Use Keyring**\n\n    Fill this field if you want spotifyd to look up any password on your machine. I don't have any experience with keyrings and such so I can't give you any guide on this. It's explained on [spotifyd readme](https://github.com/Spotifyd/spotifyd#configuration-file) though, so you can check that.\n\n-   **Backend**\n\n    As the name suggest, this field sets the backend used by spotifyd. I use pulseaudio because pulseaudio is able to set per-app volume. I know that ALSA can do that as well but it's just way too much tinkering.\n\n-   **Device**\n\n    This field sets the device that is used for ALSA to stream audio to which can be listed by running `aplay -L`. If you are using pulseaudio like me, just comment this section.\n\n-   **Control**\n\n    This field sets the controller that is used for ALSA to control its audio to. If you are using pulseaudio like me, you can comment this section as well.\n\n-   **Mixer**\n\n    This field sets the ALSA that is used by spotifyd. Again, you can comment this is you're using pulseaudio.\n\n-   **Volume Controller**\n\n    This field sets the volume controller for spotifyd. Available options are `alsa`, `alsa_linear` and `softvol`.\n\n-   **Device Name**\n\n    This field sets the device name for spotifyd. You can fill this with whatever you want.\n\n-   **Bitrate**\n\n    This field sets the bitrate for your audio. Available options are **96**, **160**, and **320**. I use 320 which is the highest option available cuz why not ツ\n\n-   **Cache Path**\n\n    This field defines where to put the cached audio. It can't accept `~` or `$HOME` for home directory shorthand, so you have to fill the full path like `/home/username/`.\n\n-   **No Audio Cache**\n\n    If this field sets to true, spotifyd won't cache the audio. I set this to false because I want my audio to be cached so it loads faster and it saves _a lot_ of bandwith.\n\n-   **Volume Normalisation**\n\n    This field set whether or not spotifyd normalize the volume of an audio that you're playing. I enable this because I want all my song to be played with the same volume.\n\n-   **Normalisation Pregain**\n\n    Basically, it sets how loud or quiet the song will be. The higher you set it, then it will be louder and vice versa. For example, if you set it `-10` which is the default option then it won't be as loud as if you set it to `-4`. You might tinker around with this to get what you like.\n\n-   **Device Type**\n\n    This sets the device type for spotifyd that is displayed on Spotify clients. You can fill this whatever you want, but I set mine to `computer` because it's a computer. Other available options are `unknown`, `computer`, `tablet`, `smartphone`, `speaker`, `tv`, `avr` (Audio/Video Receiver), `stb` (Set-Top Box), and `audiodongle`.\n\nNow that spotifyd has been configured, let's move on to spotify-tui itself.\n\n# Spotify TUI\n\n## What Is Spotify Tui?\n\nSpotify TUI is a spotify client or frontend based on Terminal User Interface written in Rust. It's an awesome alternative for the official Spotify client.\n\nI like this software because it's lightweight and it's based on TUI which can be controlled fully with a keyboard. I also like its UI, it's simple and straight forward. For more details about this software, you can visit their [github page](https://github.com/Rigellute/spotify-tui).\n\n## Installation\n\nInstalling spotify-tui is pretty straight forward. I use Arch so I can just use AUR. If you're on the other distro, check out their [readme](https://github.com/Rigellute/spotify-tui/blob/master/README.md) for installation.\n\n```bash\n# yay\n$ yay -S spotify-tui\n\n# trizen\n$ trizen spotify-tui\n```\n\nAfter installing it, the executable binary is called `spt`. I got confused the first time I installed it because I missed the part where it says\n\n> The binary executable is `spt`\n\nSo don't get confused when you type `spotify-tui` and nothing happens.\n\n## Authentication\n\nSpotify-tui needs to be authenticated by spotify. Don't worry though, it's super simple. Just run `spt` and fill out the needed field which are:\n\n-   **Client ID**\n\n    Your spotify client ID which can be acquired from [Spotify Dashboard](https://developer.spotify.com/dashboard/applications) then click on `Create a Client iD`. Then go to `Edit Settings`, add `http://localhost:8888/callback` to Redirect URIs\n\n-   **Client Secret**\n\n    Your spotify client secret which available on the same website as your spotify client ID.\n\nAfter filling those out, you will get redirected to Spotify website that ask for your permissions.\n\n## Configuration\n\nThere's a lot of spotify-tui configuration which can make this post longer. I use the default configuration for it and satisfied enough. If you want to configure it yourself, please refer to [their guide](https://github.com/Rigellute/spotify-tui/blob/master/README.md#configuration).\n\n# Conclusion\n\nThere we have it. Spotifyd + Spotify-tui. A Lightweight alternative for the official spotify client. Unfortunately, this setup doesn't support offline mode yet. I would really like to see this feature implemented. Huge thank you goes to the developers of spotifyd and spotify-tui. Anyway, thanks for reading my post and have a nice day!","src/content/posts/my-spotify-tui-setup.mdx","398e93ee29fef50c","my-spotify-tui-setup.mdx","my-suckless-setup",{"id":893,"data":895,"body":900,"filePath":901,"digest":902,"legacyId":903,"deferredRender":15},{"draft":25,"title":896,"date":897,"description":898,"tags":899},"My Setup Using Suckless Software",["Date","2020-06-04T00:00:00.000Z"],"A post where I fully explain about my setup using suckless's softwares",[645,646],"import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nHi! In this post, I'll go through about my current setup using suckless programs. Some people like suckless software (including me) and some of them hate it, whether if it's because they don't like patching stuff, or they don't like suckless philosophy which they don't want to exceed a certain number of lines.\n\n# Window Manager\n\n## DWM (Dynamic Window Manager)\n\nSuckless has a window manager called DWM which stands for Dynamic Window Manager. It has less than ~2000 SLOC and to be honest, I don't really care about the lines of code limit. I just like this Window Manager purely because of its features.\n\nDWM has 3 layouts by default. They are tiling with master and stack layout, floating, and monocle. One of the reasons I chose DWM is because of the master and stack layout. There are some WM with master and stack layout except DWM, but I don't like them as much as DWM. For example, I don't want AwesomeWM because I don't fancy writing config in Lua.\n\n\u003CUpdate date=\"2020-10-27\">\n\nlmao guess who's suddently got so obsessed with Lua and decided to use AwesomeWM\n\n\u003C/Update>\n\nAnother example is Xmonad, that's an instant big no. It has a ton of Haskell dependencies and its config file is written in Haskell which I never heard of until I found out this WM. I'm not saying that it's bad, I just don't want to write Haskell.\n\n## Installation\n\nSuckless way of installing software is compiling it from the source. It's so easy, you literally need to run 2 commands and then you're done. I use [DWM 6.2](https://dl.suckless.org/dwm/dwm-6.2.tar.gz)\n\nI always went with the tarball because the git version always gave me a headache when I patch it. To install DWM, you need to `cd` into dwm directory and run\n\n```bash\n$ make && sudo make install\n```\n\nThat's it. DWM is compiled and installed. It only took a couple of seconds on my X220.\n\n## Patching\n\nOne of the suckless key features is patching. To add new functionality, you need to patch it your own. I honestly like this concept. They gave you a bare minimum software that you can add some features by patching it on your own.\n\nI personally use 5 of them and a little bit of tweaking on `dwm.c` file. Here are those patches.\n\n-   [**Actual Fullscreen**](https://dwm.suckless.org/patches/actualfullscreen/)\n\n    As its name suggests, it enables actual fullscreen behaviour instead of toggling the bar off and go to monocle mode.\n\n-   [**Per Tag**](https://dwm.suckless.org/patches/pertag/)\n\n    This patch enables per tag behaviour which means if you enable floating mode on the first tag, it won't be applied to another tag. I like this behaviour more than DWM's default behaviour which applies to all of the available tags.\n\n-   [**Status2d**](https://dwm.suckless.org/patches/status2d/)\n\n    This patch gives you a new syntax for statusbar colour. It also capable of drawing rectangles to your statusbar but I personally don't use it. I only use it for changing my statusbar icon colour.\n\n-   [**Vanity Gaps**](https://dwm.suckless.org/patches/vanitygaps/)\n\n    The most essential feature of a window manager for me. If a tiling window manager doesn't have this feature, I won't use it. It makes me feel less claustrophobic.\n\n-   [**Swallow Patch**](https://dwm.suckless.org/patches/swallow/)\n\n    I recently use this patch to fix the usual behaviour when you open a program that spawns another window from terminal, the terminal window doesn't do anything but it stays there. If you close it, the program will also get killed. This patch allows you to spawn a program from terminal and that program will take the terminal window instead of spawning a new one. If you close the program, your terminal still there.\n\n-   **Centered**\n\n    I modify the original isCenter patch so I don't have to define which class that needs to be centered, I just apply it globally. If you interested in how it looks, here it is.\n\n    ```cpp\n    // center floating window\n    if (c->x == selmon->wx) c->x += (c->mon->ww - WIDTH(c)) / 2 - c->bw;\n    if (c->y == selmon->wy) c->y += (c->mon->wh - HEIGHT(c)) / 2 - c->bw;\n    ```\n\n    Place it inside `manage(Window w, XWindowAttributes *wa)` function in between of `wc.border_width = c->bw;` and `XConfigureWindow(dpy, w, CWBorderWidth, &wc);`, then recompile it. That's it, you're done.\n\n-   **No Monocle Border**\n\n    I don't like any border when in monocle mode so I tried to use no border patch and it doesn't work, I don't know why. So I add this code that I found on the internet instead.\n\n    ```cpp\n    if ((&monocle == c->mon->lt[c->mon->sellt]->arrange) && (!c->isfloating)) {\n          wc.border_width = 0;\n          c->w = wc.width += c->bw * 2;\n          c->h = wc.height += c->bw * 2;\n      }\n    ```\n\n    Add that to `resizeclient(Client *c, int x, int y, int w, int h)` function after `wc.border_width = c->bw;` then recompile it.\n\n-   **Change Bar Height**\n\n    By default, DWM define bar height by calculating font size and adding 2px on top and bottom. It looks ugly to me, I want to be able to define my bar height. So I replaced some code with this.\n\n    ```cpp\n    // previous\n    bh = drw->fonts->h + 2;\n\n    // new\n    bh = user_bh ? user_bh : drw->fonts->h + 2;\n\n    // config.h\n    static const int user_bh = 28;\n    ```\n\nThose are all of my patches. I tried to make it as minimal as possible but keeping the look and feel that I like. If you don't know how to apply a patch, here's an example.\n\n```bash\n$ patch -p1 \u003C ./path/to/patch.diff\n```\n\nMake sure you're currently on the DWM directory, otherwise it wouldn't work. As you can see, applying a patch is simple.\n\n## Statusbar\n\nFor the status bar itself, I use [DWM Blocks](https://github.com/torrinfail/dwmblocks) and [Lemonbar](https://github.com/expectocode/bar). Why do I use 2 status bars you might ask. Well, I'll explain later because it's quite a stupid reason.\n\nI use **DWM Blocks** because it's able to update each module with different intervals. For example, I update my `date` module every 1 minute and I can set my `cpu` module to update every 2 seconds. All of my modules are written in `dash`, a lightweight POSIX shell. You can check all of my modules [here](https://github.com/elianiva/dotfiles/tree/master/scripts/.scripts/statusbar).\n\nNow, the reason I use **Lemonbar** is that I want to draw a bottom border for DWM status bar. It's stupid, yes I'm fully aware of that. I can't find any patch to draw a border on DWM statusbar and I'm not familiar with C, so I use this trick instead.\n\nIt's simple, you just need to draw Lemonbar with full width, how many px of height you want, and fill the offsetY matching your DWM statusbar height. Here's what I did on my autostart.\n\n```bash\necho \"\" | lemonbar -g x1+0+28 -d -B \"#82aaff\" -p &\n```\n\nIt's stupid, but hey, it works. I won't complain ツ.\n\n# App Launcher\n\n## Dmenu\n\nDmenu is a piece of software to find a program name and execute it. But it's more than that. Basically, you pipe it some lines then it spits back the line you've chosen to stdout. Let me give you an example of that.\n\n```bash\necho \"yes\\nno\" | dmenu\n```\n\nThat simple command is echo-ing `yes` and `no` and piping it to dmenu. It will give you a dmenu prompt that you can type to choose the option or simply move the selection. If you press `ESC`, it will close dmenu prompt, but if you select one of them, it will give your selection to stdout which you can then process it however you want.\n\n## Installation\n\nJust like any other suckless software, the way you should install it is by compiling it from the source. I use the [tarball](https://dl.suckless.org/tools/dmenu-4.9.tar.gz) of it. You know the drill, `cd` to that directory and run\n\n```bash\n$ make && sudo make install\n```\n\nOut of the box, it's very usable already. But, it looks ugly to me. I want to add just 1 patch to make it look a bit better.\n\n## Patching\n\nAs I said, I only use 1 patch for dmenu and that patch is...\n\n-   [**Lineheight**](https://tools.suckless.org/dmenu/patches/line-height/).\n\n    It gives dmenu the ability to set the line-height by changing the `line-height` variable. I set it to 28 and my font size is 11.\n\n    ```c\n    static unsigned int lineheight = 28;\n    ```\n\n# Terminal\n\n## ST (Simple Terminal)\n\nSuckless have a terminal called **ST** or **Simple Terminal** or **Suckless Terminal**. It's the best terminal in my opinion. It supports true colour, ligatures, box drawing, unicode support, and more stuff that you can achieve by applying some patches.\n\n\u003CUpdate date=\"2020-10-27\">\n\nSome of you might think it's the best, but then I came across [Alacritty](https://github.com/alacritty/alacritty) and it's instantly became my new \"best terminal\" out there.\n\n\u003C/Update>\n\nIt's _ultra_ minimal out of the box. You don't even have a scroll feature builtin. It's reasonable because not everyone needs a scroll feature. For example, if you use **tmux** then the scroll feature would be redundant.\n\n## Installation\n\nAs usual, I use the tarball version and it's currently at v0.8.3 which you can get from [here](https://dl.suckless.org/st/st-0.8.3.tar.gz). `cd` into that directory and run\n\n```bash\n$ make && sudo make install\n```\n\nThere you have it, a barebone installation of ST. To be honest, I can't use ST without applying some patches. I need some features that are provided by patches.\n\n## Patching\n\nI use quite a lot of patches for ST. Mainly for the appearance. Here's my list of patches.\n\n-   [**Boxdraw**](https://st.suckless.org/patches/boxdraw)\n\n    This patch allows a line to be drawn gapless. I use this so that lines like tmux borders, fzf pop-up border, stuff like gotop, ytop, etc. This patch makes them look _way_ better.\n\n-   [**Bold is not bright**](https://st.suckless.org/patches/bold-is-not-bright/)\n\n    This patch makes bold font the same colour as the regular font. I hate it when bold letters have a different colour than the regular ones.\n\n-   [**Clipboard**](https://st.suckless.org/patches/clipboard)\n\n    This patch makes ST use the same clipboard that the browser uses. I don't like the default ST behaviour.\n\n-   [**Scrollback**](https://st.suckless.org/patches/scrollback/)\n\n    This patch enables scrolling on **ST** like most terminal out there. I can't use ST without this feature because I don't use **tmux** that often.\n\n-   [**Font2**](https://st.suckless.org/patches/font2/)\n\n    This patch makes ST be able to set a fallback font. For example, I use Iosevka which doesn't support CJK characters so I use Noto Sans CJK for the fallback to be able to render them properly.\n\n-   [**Ligatures**](https://st.suckless.org/patches/ligatures/)\n\n    This is my favorite patch out of all of them. I can enjoy those sweet ligatures on ST rather than having to change to Kitty. It's a bit buggy though if you scroll up the prompt will follow you. It doesn't bother that much so I ignore that.\n\n-   [**Xresources**](https://st.suckless.org/patches/xresources/)\n\n    This patch makes ST apply colours from `.xresources`. I like this approach rather than changing its `config.h` to change the colour scheme.\n\n-   **Palenight Colour Scheme**\n\n    I change the default colour scheme on my build to Palenight. It's such a great colour scheme and I love it.\n\n# Tips\n\n## Handling Rejected Patch\n\nSometimes when you are patching, the patch has a conflict with another patch. It's easy to solve actually, it tells you where you have to fix it on the log message. It also gives you a file with a `.rej` suffix that contains all of the rejected changes. Here's an example of it.\n\n```diff\n--- dwm.c\n+++ dwm.c\n@@ -163,6 +163,7 @@ static void detach(Client *c);\n static Monitor *dirtomon(int dir);\n static void drawbar(Monitor *m);\n static void drawbars(void);\n+static int drawstatusbar(Monitor *m, int bh, char* text);\n static void enternotify(XEvent *e);\n static void expose(XEvent *e);\n static void focus(Client *c);\n@@ -237,7 +238,7 @@ static void zoom(const Arg *arg);\n\n /* variables */\n static const char broken[] = \"broken\";\n-static char stext[256];\n+static char stext[1024];\n static int screen;\n static int sw, sh;           /* X display screen geometry width, height */\n static int bh, blw = 0;      /* bar geometry */\n```\n\nAll you need to do is find some lines that match the surrounding of the line with `-` or `+` prefix, then replace it according to it. As you can see on the 7th line, there's a line with `+` prefix. That means you need to add it to the original file which in this case is `dwm.c`. All you have to do is fine that surrounding lines and place it there. If it has a `-` prefix, you need to remove it.\n\n## Using VCS\n\nI found that using VCS like **Git** is quite useful if you want to add a patch but don't want to ruin your current build. Make a new branch of your current build and then patch it, that way you can always go to the other branch if you messed up. If you don't know how to set up a repo, [this might help](https://opensource.com/article/18/1/step-step-guide-git) you getting started.\n\n## Enabling colour emoji support\n\nBy default, suckless software doesn't support colour emoji like this 👌. You have to remove the code that blocks it and install `libxft-bgra`. The file is called `drw.c` and the part that you need to remove is\n\n```c\n/* Do not allow using color fonts. This is a workaround for a BadLength\n * error from Xft with color glyphs. Modelled on the Xterm workaround. See\n * https://bugzilla.redhat.com/show_bug.cgi?id=1498269\n * https://lists.suckless.org/dev/1701/30932.html\n * https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=916349\n * and lots more all over the internet.\n */\nFcBool iscol;\nif(FcPatternGetBool(xfont->pattern, FC_COLOR, 0, &iscol) == FcResultMatch && iscol) {\n    XftFontClose(drw->dpy, xfont);\n    return NULL;\n}\n```\n\nAfter removing that, make sure you got `libxft-bgra` installed. Otherwise, it won't work.\n\n## Desktop files\n\nIf you noticed, there's no .desktop files after installing suckless software. You can either add it yourself or apply a patch for it. I prefer adding it myself. Here's an example of my `dwm.desktop` located on `/usr/share/xsessions/`\n\n```\n[Desktop Entry]\nName=dwm\nComment=dynamic window manager\nExec=dwm\nType=Application\n```\n\nI don't need ST desktop entry since I launch ST using keybind or dmenu which doesn't need it. If you launch it from **Rofi** or something like that, you'll need the desktop entry file.\n\n# Resources\n\nIf you want to get all of my suckless builds, you can get it on my [ Github repo ](https://github.com/elianiva/suckless/) and [here](https://github.com/elianiva/dotfiles/blob/master/scripts/.scripts/) are my scripts.\n\n# Conclusion\n\nI like the suckless software because it works great and I like their way of distributing their stuff. They give you a barebones software that you can add some features through patches. This can get overwhelming since they have _a lot_ of patches, like _a lot_.\n\nAll right then, thanks for reading this lengthy post. I hope you learn something new from this. Have a nice day!","src/content/posts/my-suckless-setup.mdx","a703d1d3fefa6b89","my-suckless-setup.mdx","path-alias-in-javascript-and-typescript",{"id":904,"data":906,"body":912,"filePath":913,"digest":914,"legacyId":915,"deferredRender":15},{"draft":25,"title":907,"date":908,"description":909,"tags":910},"Path Alias in Javascript and Typescript",["Date","2022-03-04T00:00:00.000Z"],"Have you ever got tired of writing relative paths that look like ../../../ ? No worries, path alias to the rescue!",[718,911],"typescript","# Introduction\n\nI'm working on Javascript / Typescript code most of the time. One of the things I hate is having to import a file using a relative path. I mean, it's not a problem when you only have `../path/to/file.js`, but it starts to become a headache when you have a deeply nested file the import statements are just full of `../../../path/to/file.js` nonsense. Not to mention the pain when you move the file and having to update the import path. Fortunately, we can avoid this by using a path alias!\n\n# Path Alias\n\nPath Alias, as its name implies, is an alias to a path. Basically, it allows us to define an alias for a path so we don't need to write relative paths anymore. There are multiple ways of achieving this depending on our setup. I will explain how I usually do it.\n\n# Compiler Options in jsconfig.json and tsconfig.json\n\nThis is one of the simplest ways of doing it. This will be picked up by the intellisense so you can get the suggestions when you type the path, which is nice!\n\nYou can define a path alias by setting the `compilerOptions.paths` field. Here's an example:\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"baseUrl\": \".\",\n\t\t\"paths\": {\n\t\t\t\"@/*\": [\"./src/*\"]\n\t\t}\n\t}\n}\n```\n\nWe want to set the `baseUrl` to `.` because we want to resolve any non-absolute import to our current directory, which is the root of the project. The `paths` field is used to define the aliases.\n\nI usually like to just use `@/*` as an alias to `./src/*` because I like to import files relative to the `src` directory. Setting a single alias won't be that useful when you have a deeply nested file that you import multiple times. For example, what if you have a file that lives inside `./src/deeply/nested/module/called/foo`? You don't want to write `@/deeply/nested/module/called/foo` every time, right? Well, you can add multiple aliases in this field. You can just add a new one only for this module.\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"baseUrl\": \".\",\n\t\t\"paths\": {\n\t\t\t\"@/*\": [\"./src/*\"],\n\t\t\t\"#foo\": [\"./src/deeply/nested/module/called/foo\"]\n\t\t}\n\t}\n}\n```\n\nand then you can use it like this.\n\n```javascript\n// you can now do this\nimport { foo } from \"#foo\";\n\n// instead of this nonsense\nimport { foo } from \"../../deeply/nested/module/called/foo\";\n```\n\nAlthough if you have a deeply nested module like that, I think you should try to re-structure your project a bit differently ;)\n\nYou can read more about these options in [Typescript TSConfig Reference](https://www.typescriptlang.org/tsconfig)\n\n# esbuild\n\nesbuild is a performant module bundler written in Go. It is used by Vite under the hood to pre-bundle the dependencies. esbuild will pick up the path alias defined in jsconfig.json or tsconfig.json so you don't need to do anything which is very convenient.\n\n# Vite and Rollup\n\nVite is probably one of the most popular bundlers out there. It's great, I use it all the time to bundle my frontend projects. Honestly, you should try to use this if you haven't.\n\nYou can define your alias by setting the `resolve.path` field in `vite.config.js`. Since this is a regular Javascript/Typescript file, unlike JSON, you can use a function to resolve the path! Here's an example from one of my projects:\n\n```javascript\n// vite.config.js\nimport { defineConfig } from \"vite\";\nimport path from \"path\";\n\nexport default defineConfig({\n\t/* the rest of the config is omitted for brevity */\n\tresolve: {\n\t\talias: {\n\t\t\t\"#\": path.resolve(\"src\"),\n\t\t},\n\t},\n});\n```\n\nSo every time you import a file, the `#` symbol will be resolved to whatever `path.resolve(\"src\")` returns.\n\nVite uses Rollup under the hood, in fact, Vite will pass the `resolve.alias` options to `@rollup/plugin-alias`! So, setting the option in Rollup is going to be very similar. Here's how to do it in Rollup:\n\n```javascript\n// rollup.config.js\nimport alias from \"@rollup/plugin-alias\";\nimport path from \"path\";\n\nexport default {\n\t/* the rest of the config is omitted for brevity */\n\tplugins: [\n\t\talias({\n\t\t\tentries: {\n\t\t\t\t\"#\": path.resolve(\"src\"),\n\t\t\t},\n\t\t}),\n\t],\n};\n```\n\nYou can read more about the available options on [its official documentation](https://github.com/rollup/plugins/tree/master/packages/alias)\n\n# Webpack\n\nWebpack configuration is also very similar to Vite alias. You'd add an alias by setting the `resolve.alias` field in `webpack.config.js`. Example:\n\n```javascript\nconst path = require(\"path\");\n\nmodule.exports = {\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"src\");\n    }\n  }\n}\n```\n\nThere are several other options like using a `$` suffix to indicate an exact match. You can read more about those on [the official webpack documentation](https://webpack.js.org/configuration/resolve/)\n\n# NodeJS\n\nStarting from v12.19.0 and v14.6.0, you can also define path alias without any pre-processing tool like a bundler. Although, you will be limited to using string only to resolve the path and any path alias must begin with a `#` symbol.\n\nThe way to do it is by defining the path alias inside the `imports` field in `package.json` file. Here's an example:\n\n```json\n{\n\t// other fields are omitted for  brevity\n\t\"imports\": {\n\t\t\"#services/*\": \"./src/services/*\",\n\t\t\"#utils/*\": \"./src/utils/*\"\n\t}\n}\n```\n\n# Other\n\nThere are other frameworks that I didn't cover here but some frameworks (NextJS, Astro, etc) respect the aliases defined in jsconfig.json or tsconfig.json. Some other ones, such as Nuxt, has [its own field](https://nuxtjs.org/docs/configuration-glossary/configuration-alias/) to define aliases.\n\n# Closing Note\n\nSince I discovered this feature I immediately apply it to every project that I'm working on because honestly, I don't want to write `../../../` nonsense anymore.\n\nHopefully, you found something useful from this post and have a nice day! ;)","src/content/posts/path-alias-in-javascript-and-typescript.mdx","651ba15452e79938","path-alias-in-javascript-and-typescript.mdx","prettify-screenshot-using-imagemagick",{"id":916,"data":918,"body":923,"filePath":924,"digest":925,"legacyId":926,"deferredRender":15},{"draft":25,"title":919,"date":920,"description":921,"tags":922},"Prettify your screenshot using imagemagick",["Date","2020-08-06T00:00:00.000Z"],"Wanna make your screenshot a bit more fancy? Say no more, Imagemagick got you covered",[645],"# Introduction\n\nLet's make our screenshot prettier by using a software called [Imagemagick](https://imagemagick.org). In this post, we will add some fancy effects like backdrop, shadow, border, and rounded corner with a simple script.\n\n# Prerequisite\n\nBefore we make the script, there are a few things that you'll need to prepare.\n\n-   **Imagemagick** - obviously\n-   **Any screenshot software** - I use [flameshot](https://flameshot.js.org/)\n-   **Clipboard** - I use [xclip](https://github.com/astrand/xclip) (optional)\n\nAfter having all of that, let's make the script.\n\n# Making The Script\n\n## Backdrop\n\nBackdrop is actually just a really thicc border. Here's how to do that on imagemagick.\n\n```bash\nconvert source.png -bordercolor white -border 10 result.png\n```\n\nYou can adjust the color by changing the `bordercolor` value. I use white because it looks nice to me. You can use HEX, RGB, and RGBA format. For more references, go to [their website](https://imagemagick.org/script/color.php).\n\nTo adjust the thickness of it, you change the `border` value. I use 10 here because it's not too big and it's not too small for me.\n\n## Border\n\nPreviously, we made a thicc border as a backdrop, this time we make a thin border before the shadow\n\n```bash\nconvert source.png -bordercolor white -border 4 result.png\n```\n\nIt's basically the same, just with a different value.\n\n## Shadow\n\nTo give you screenshot a shadow is quite simple. Here's how to do it.\n\n```bash\nconvert source.png \\( +clone -background black -shadow 40x5+0+0 \\) \\\n+swap -background none -layers merge +repage result.png; \\\n```\n\nTo change the shadow color, adjust the first `background` value. I use black because black shadow is the only one that is acceptable to me. The `40` here is the shadow opacity, you can change it to whatever you like. The shadow radius here is `5`. This will add to your backdrop thickness. If you have `10` of backdrop and you have `5` of border radius then you'll end up with `15` of backdrop.\n\n## Rounded Corner\n\nIt's quite a lengthy one, but don't worry. The only thing we'd change is the border radius.\n\n```bash\n# rounded corners\nconvert /tmp/image.png \\\n     \\( +clone  -alpha extract \\\n        -draw 'fill black polygon 0,0 0,5 5,0 fill white circle 5,5 5,0' \\\n        \\( +clone -flip \\) -compose Multiply -composite \\\n        \\( +clone -flop \\) -compose Multiply -composite \\\n     \\) -alpha off -compose CopyOpacity -composite /tmp/image.png\n```\n\nThe border radius here is `5`. Change every `5` to whatever you want like `10` for example but `5` is the sweet spot for me. For more technical explanation and details you can refer to [their website](http://www.imagemagick.org/Usage/thumbnails/#rounded)\n\n## Combining Them All\n\nThose are all the parts that we need. Let's combine them together. Make a file called whatever you want and make it executable by using `chmod +x filename` and edit the file.\n\n```bash\n#!/bin/dash\n```\n\nI use `dash` for my script, but `bash` or `zsh` will do just fine. I don't know if it'll work with `fish` though, I suppose it'll work just fine. Add your screenshot program to take the image that we will be using. I'm using [Flameshot](https://flameshot.js.org/) so it will look like this.\n\n```bash\n#!/bin/dash\n\nflameshot gui --raw > /tmp/image.png\n```\n\nI store the image on `/tmp` directory because I will copy it to my clipboard and won't be using the original image.\n\n```bash\n#!/bin/dash\n\nflameshot gui --raw > /tmp/image.png\n\n# rounded corners\nconvert /tmp/image.png \\\n     \\( +clone  -alpha extract \\\n        -draw 'fill black polygon 0,0 0,5 5,0 fill white circle 5,5 5,0' \\\n        \\( +clone -flip \\) -compose Multiply -composite \\\n        \\( +clone -flop \\) -compose Multiply -composite \\\n     \\) -alpha off -compose CopyOpacity -composite /tmp/image.png\n```\n\nThe first effect I apply is the rounded corner and store the result in `/tmp/image.png`.\n\n```bash\n#!/bin/dash\n\nflameshot gui --raw > /tmp/image.png\n\n# rounded corners\nconvert /tmp/image.png \\\n     \\( +clone  -alpha extract \\\n        -draw 'fill black polygon 0,0 0,5 5,0 fill white circle 5,5 5,0' \\\n        \\( +clone -flip \\) -compose Multiply -composite \\\n        \\( +clone -flop \\) -compose Multiply -composite \\\n     \\) -alpha off -compose CopyOpacity -composite /tmp/image.png\n\n# shadow\nconvert /tmp/image.png \\( +clone -background black -shadow 40x5+0+0 \\) \\\n+swap -background none -layers merge +repage /tmp/image.png; \\\n```\n\nNext one is the shadow. I don't use the small border because it looks weird on a smaller screenshot. You can use it if you like.\n\n```bash\n#!/bin/dash\n\nflameshot gui --raw > /tmp/image.png\n\n# rounded corners\nconvert /tmp/image.png \\\n     \\( +clone  -alpha extract \\\n        -draw 'fill black polygon 0,0 0,5 5,0 fill white circle 5,5 5,0' \\\n        \\( +clone -flip \\) -compose Multiply -composite \\\n        \\( +clone -flop \\) -compose Multiply -composite \\\n     \\) -alpha off -compose CopyOpacity -composite /tmp/image.png\n\n# shadow\nconvert /tmp/image.png \\( +clone -background black -shadow 40x5+0+0 \\) \\\n+swap -background none -layers merge +repage /tmp/image.png; \\\n\n# white backdrop\nconvert /tmp/image.png -bordercolor white -border 10 /tmp/image.png\n```\n\nThe last effect I apply is white backdrop. Next step is optional, but if you want to you can add it as well.\n\n```bash\n#!/bin/dash\n\nflameshot gui --raw > /tmp/image.png\n\n# rounded corners\nconvert /tmp/image.png \\\n     \\( +clone  -alpha extract \\\n        -draw 'fill black polygon 0,0 0,5 5,0 fill white circle 5,5 5,0' \\\n        \\( +clone -flip \\) -compose Multiply -composite \\\n        \\( +clone -flop \\) -compose Multiply -composite \\\n     \\) -alpha off -compose CopyOpacity -composite /tmp/image.png\n\n# shadow\nconvert /tmp/image.png \\( +clone -background black -shadow 40x5+0+0 \\) \\\n+swap -background none -layers merge +repage /tmp/image.png; \\\n\n# white backdrop\nconvert /tmp/image.png -bordercolor white -border 10 /tmp/image.png\n\n# copy to clipboard\nxclip -selection clipboard -i /tmp/image.png -t image/png\n```\n\nI added the last line to copy the result into my clipboard so I can easily paste it anywhere and don't have to delete the screenshot when I no longer need it. Here's the result.\n\n![rounded](/assets/posts/prettify-screenshot-using-imagemagick/rounded.png)\n\nHere's another version\n\n![square](/assets/posts/prettify-screenshot-using-imagemagick/square.png)\n\n# Conclusion\n\nImagemagick is a powerful CLI tools to manipulate an image. It can do so much more, if you're interested on that then you can go to [their website](https://www.imagemagick.org/) for some advanced guide. That's all for this post, thanks for reading and have a nice day ツ","src/content/posts/prettify-screenshot-using-imagemagick.mdx","2c62e9af7662c7cf","prettify-screenshot-using-imagemagick.mdx","rest-client-for-vim",{"id":927,"data":929,"body":934,"filePath":935,"digest":936,"legacyId":937,"deferredRender":15},{"draft":25,"title":930,"date":931,"description":932,"tags":933},"Simple TUI-based Rest Client for (Neo)vim",["Date","2020-07-16T00:00:00.000Z"],"A post where I try to find a TUI alternative to Postman. In other word, REST client but in TUI",[706],"# Introduction\n\nI've been learning backend web development stuff lately to create an API and whatnot. We all know that a popular REST client to test API is [Postman](https://postman.com). I like it but it is using Electron which means that it is quite heavy. Well, to be honest it is not that heavy but if I can save more RAM then why won't I find an alternative for it.\n\nI found a really cool extension on vscode where you just need a file with the specified syntax to make a request. You might know that I use Neovim as my main editor, so I'm pretty sure there's a few that works like this. Guess what, there is.\n\n# Rest Clients\n\n## Vim HTTP\n\nI came across this nice plugin called [vim-http](https://github.com/nicwest/vim-http). I like how it works, it has syntax highlighting for .http file which is basically a temporary file that you use to make a request. But the drawback to me is that it doesn't format json response. So I have to format it through the API which I don't like. So in the end, I try to find another restclient.\n\n## Vim Rest Console\n\nI found this plugin called [vim-rest-console](https://github.com/diepm/vim-rest-console), but when I look at its syntax, I don't quite like it. So I never tried it in the end.\n\n## COC Rest Client\n\nI'm using a plugin called coc.nvim, and it usually has a lot of stuff. So I checked if there's any for coc, turns out, there is. It's called [coc-restclient](https://github.com/pr4th4m/coc-restclient).\n\nSince most of coc plugins comes from vscode, this particular plugin works similar like the [one that vscode has](https://marketplace.visualstudio.com/items?itemName=humao.rest-client). Here's an example.\n\n```\nPOST http://localhost:3000/api/user/register HTTP/1.1\nContent-Type: application/json\n\n{\n  \"username\": \"coolguy32\",\n  \"email\": \"im@coolguy.me\",\n  \"password\": \"superstronkpassword\"\n}\n```\n\nThe great thing about this plugin is that, it gives the response in a json formatted file which is what I was looking for. Here's an example of the response after running `:CocCommand rest-client.request`.\n\n```\n{\n  \"Status\": 200,\n  \"Message\": \"OK\"\n}\n\n{\n  \"X-Powered-By\": \"Express\",\n  \"Content-Type\": \"application/json; charset=utf-8\",\n  \"Content-Length\": \"56\",\n  \"ETag\": \"W/\\\"38-Eu4y++fOI89s+z200P0DrHLf1ZE\\\"\",\n  \"Date\": \"Thu, 16 Jul 2020 14:35:10 GMT\",\n  \"Connection\": \"close\"\n}\n\n{\n  \"msg\": \"User 5f10659e630bfa40702160e9 has been created\"\n}\n```\n\nPlease refer to the repository for installation or configuration because they explain it really well, there's no point of me explaining it here :D\n\nimport Update from \"~/components/Update.astro\";\n\n\u003CUpdate date=\"2021-04-19\">\n\nIn the midst of lua hype, I found [this plugin](https://github.com/NTBBloodbath/rest.nvim) which doesn't depend on coc.nvim\nIt has a similar JSON output which is nice\n\n\u003C/Update>\n\n# Conclusion\n\nI'm glad I found this plugin because I am no longer need postman. I might need it for more advanced feature, but for now, simple rest client is fine. I don't have to leave my terminal and go to a separate program for that which is awesome. My current setup is having 3 tmux panes, 1 for Neovim, 1 for running the server and stuff, 1 for the rest client.","src/content/posts/rest-client-for-vim.mdx","17b1364606d9917d","rest-client-for-vim.mdx","site-redesign",{"id":938,"data":940,"body":946,"filePath":947,"digest":948,"legacyId":949,"deferredRender":15},{"draft":25,"title":941,"date":942,"description":943,"tags":944},"I redesigned my website because why not",["Date","2020-05-02T00:00:00.000Z"],"A post where I explain about my site redesign to give it a bit more fresher look",[945,811,671],"gatsby","import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nHi! So I made this blog about 2 months ago and I think now it doesn't have a decent UI/UX at least in my opinion. Now, because I have plenty of free time because of the current pandemic that's been going on for a couple of months. I decided to redesign it and I'll explain why.\n\n# Components Redesign\n\n## Navigation Bar\n\nI changed the background to be a little bit transparent so that I can use a `backdrop-filter` that I recently discovered. It looks really cool, like looking through a white glass.\n\nI added the social media icon to the navbar unlike previously where I put it on the footer so people can could easily see them. The icons are also changed, they have their original shape instead of having a circular background.\n\n## Footer\n\nNothing much changed here except I made it to be more 'informative' I guess. I also removed the previous social media icon which I've already mentioned.\n\n# Pages Redesign\n\n## Home page\n\nPreviously, I have this one big section that fills the entire screen with a logo and a quick description about me. That's not very good in terms of the UX. I decided to make it look more compact by dividing it into 2 sides. Here's the comparison.\n\n![old](/assets/posts/site-redesign/old.png)\n![new](/assets/posts/site-redesign/new.png)\n\nI also don't have a new logo for my username yet. So it is what it is. I'll make that in the future.\n\n\u003CUpdate date=\"2020-09-06\">\n\nI decided to use my github profile picture instead.\n\n\u003C/Update>\n\n## Tags page\n\nI decided to remove the category. I think tags will be enough because I have another plan for the \"category\" thingy. I'll talk about that later on. If you've seen my archives page before, it kinda look like a mess, like seriously. I mean just look at this.\n\n![old](/assets/posts/site-redesign/old-tag.png)\n\nand compare that to this.\n\n![new](/assets/posts/site-redesign/new-tag.png)\n\nThe new page looks _way_ better than the old one. At least in my opinion.\n\n## Post page\n\nI changed the post page slightly. The code block use dark theme even if the site is light theme. I try to give some contrast so the reader can focus on what they read. Other than that, nothing's changed.\n\n## Post list page\n\nI still use the same pagination page from previous website and I just changed the navigation button a little bit. That's all.\n\n## About page\n\nPreviously, I made the about page as sort of a QnA page. I replace it with an explanation about myself instead this time. Go check it yourself ;)\n\n## Books page\n\nI am planning on making this page to be a place where I put some sort of series. I got this idea from [Bandithijo](https://bandithijo.github.io/book/). Check him out by the way, his content is just pure awesomeness.\n\nSo currently, it is a work in progress. \"coming soon\", that's all you got for now.\n\n\u003CUpdate date=\"2020-10-17\">\n\nI changed my mind. I won't make this section. I never have the time to do it unfortunately.\n\n\u003C/Update>\n\n## Other stuff\n\nI fixed some little bugs that's previously happened and what not. Just some tiny little improvements.\n\n# Conclusion\n\nAll in all, I really like the end result. Let me now what you think down below in the new disqus comment section ;)","src/content/posts/site-redesign.mdx","c0856d6210b83eed","site-redesign.mdx","thinkpad-x220",{"id":950,"data":952,"body":957,"filePath":958,"digest":959,"legacyId":960,"deferredRender":15},{"draft":25,"title":953,"date":954,"description":955,"tags":956},"My impression of Lenovo Thinkpad X220",["Date","2020-03-19T00:00:00.000Z"],"I finally became one of those Linux users, the one who has an old Thinkpad with them.",[659],"# Introduction\n\nSo, I have a pretty bad laptop with Intel Celeron N4000 processor which runs super slow. Of course I can't stand that, so I decided to change my laptop to a something better and that is none other than Thinkpad.\n\n# Why did I choose Thinkpad?\n\nWell, if you don't know. Thinkpad is a great laptop with cheap price. Like, really cheap. You can get it under \\$100 and still have quite a decent laptop. Thinkpad is pretty popular in Linux community as far as I know because most of them are really compatible with Linux. It's a go to if you confused whether or not your Linux will be compatible with your laptop or not.\n\nThinkpad is also known with the legendary classic keyboard and trackpoint. The keyboard is so tactile, it's really comfortable to type on unlike most of chichlet keyboard thee days. The trackpoint is also very useful compared to the touchpad. You don't have to leave your home row to move your cursor which is very useful for someone lazy like I am.\n\nDespite being an old laptop (it was released on 2011), it is however a very durable laptop. This bad boy looks really solid the second you look at it. Even though it's made from plastic, it feels like a solid rock. Thinkpad is also very upgradable which makes it very convenient.\n\n# My X220 Review\n\n## Where and how much\n\nI buy this bad boy on a local online store for like Rp1.950.000,00 (\\$ 124). It has a perfect condition. I can't believe how good it is when it arrived. I tought there will be some scratches and what not, but it turns out to be in a perfect condition.\n\nAt first, I want to buy a Thinkpad T420. But I decided to pick X220 because I think it's more portable because of its smaller size.\n\n## First impression\n\nI was so impressed with its condition. No scratches or anything like that. I think it's refurbished but I'm not really sure since the store didn't mentioned it. I'm glad that is has the US keyboard layout, not the one with that ginormous enter key and small space bar. It doesn't have a fingerprint which I won't use anyway. The battery still got 86% health which is awesome. I also got the original charger and not one of those weird ones.\n\n## Features that I love\n\nFirst think first, let's talk about the keyboard. This classic 7 rows keyboard is just awesome. It's so tactile and comfy to type on compared to my old laptop which has an island style keyboard or chichlet like most of other newer laptops have. I could type for hours on this bad boy where if I type on my old one, I got tired quickly. It also have a separate media key to control the volume.\n\nNow let's talk about the Trackpoint. You know, the red dot on Thinkpad keyboard. It's there not for no reason. It's used to move your cursor. As far as my experience go, it's better than using a touchpad because you don't have to move your fingers from the home row. That's very convenient.\n\nThinklight! This feature isn't that quite helpful as far as I use my X220. But I'm pretty sure that it'll be helpful when you work in the dark and want to see your keyboard.\n\nI also like the touch of lights that indicates your battery and sleep outside of the lid. My previous laptop didn't have this feature. This Thinkpad also got many ports. 3 USB 2.0 ports, HDMI port, VGA port, Audio jack, even the obscure one that I don't know what it called lol.\n\n## Performance\n\nThis bad boy has an Intel Core i5 2520M processors. It's not the best but it runs pretty well. Previously, I have a laptop that runs Intel Celeron N4000. It was so sluggish. Now that I have an i5 processor, it runs way better.\n\nAbout the battery. Since it still has 86% health, it can hold up around 4-5 hours in my experience. It runs perfectly without any issue.\n\nIt has 4GB of RAMs. I planning on upgrading it in the future to 8GB. I also planning on upgrading it to mSATA SSD. Currently it runs HDD, but it has no issue though so I don't worry that much.\n\nimport Update from \"~/components/Update.astro\";\n\n\u003CUpdate date=\"2020-08-15\">\n\nI bought an SSD an upgraded my RAM, man it feels _so_ much better.\n\n\u003C/Update>\n\n# Conclusion\n\nAll in all, I'm really satisfied with this laptop. I don't regret buying it, at all. It worth all of my money. I slapp Archlinux to this bad boy as soon as I get it and it has no single issue. Everything is perfect, media button is working, Thinklight is also working. I really hope this bad boy will last for the next 3 years or so. If you want a cheap laptop with a great value, I'd recommend Thinkpad. I didn't give you the full specs for X220 because I'm pretty sure that you're capable to look it up on google. That's it for this short review, have a good day! ;)","src/content/posts/thinkpad-x220.mdx","c8f2568a08827340","thinkpad-x220.mdx","trying-out-sveltekit",{"id":961,"data":963,"body":968,"filePath":969,"digest":970,"legacyId":971,"deferredRender":15},{"draft":25,"title":964,"date":965,"description":966,"tags":967},"I tried Svelte-Kit and here's what I think",["Date","2021-02-13T00:00:00.000Z"],"I've run out of my patience waiting for the stable release and got too hyped for it",[683,671],"[snowpack-v3-link]: https://www.snowpack.dev/posts/2021-01-13-snowpack-3-0\n[snowpack-link]: https://www.snowpack.dev\n[vite-link]: https://vitejs.dev\n[esbuild-link]: https://github.com/evanw/esbuild\n[adapter-node]: https://npmjs.com/package/@sveltejs/adapter-node\n[adapter-static]: https://npmjs.com/package/@sveltejs/adapter-static\n[adapter-vercel]: https://npmjs.com/package/@sveltejs/adapter-vercel\n[frontend-mentor]: https://www.frontendmentor.io/challenges/github-jobs-api-93L-NL6rP\n[spinner-link]: https://icons8.com/cssload/en/horizontal-bars\n[gh-job-repo]: https://github.com/elianiva/gh-job\n[telescope-nvim]: https://github.com/nvim-telescope/telescope.nvim\n[nvim-tree-lua]: https://github.com/kyazdani42/nvim-tree.lua\n[underscore-pr-link]: https://github.com/sveltejs/kit/pull/1370\n\n# Introduction\n\nAs you may or may not know, I love Svelte. I think it's a really good Framework (technically a language but whatever) for building a single page application. Long story short, in October 2020 there's a Svelte Summit in which Rich Harris teased us about Svelte-Kit. It is a new way of building a website using Svelte, it's meant to replace Sapper.\n\nIt has been a few months since that summit and it still hasn't been released yet. So, I've run out of my patience, I want to try this cool and new stuff, and so I did. I made a simple website to try it out.\n\n# My Experience\n\n## Project Setup\n\nSince I never tried it out myself nor do I watch someone else try it, I was quite surprised. It broke from the start. I mean, that's what you get from experimental software. It turns out it was caused by the new release of [Snowpack v3][snowpack-v3-link].\n\nThankfully, the Svelte team is super responsive and fixed it in a couple of days or so. I tried it out and it works.\n\nI was expecting it to be this good but I didn't know that it's _this_ good. So yeah, I'm quite surprised.\n\nBy the way, upon installing I was also surprised by this huge message.\n\n![stop](/assets/posts/trying-out-sveltekit/stop.webp)\n\n## I am Speeeeedd\n\nI never used Snowpack before, man, it is _super fast_. I saw it in action from a video and I know it's fast, but trying it out myself is a different feeling. Starting the dev server is near instant, it only took like 1-2 seconds on my old laptop. I like the direction that we're going with this. [Snowpack][snowpack-link], [Vite][vite-link], and [ESbuild][esbuild-link], they're the future of Web Development ;)\n\n## Hot Module Reloading\n\nThis is one of the best features in my opinion. When you change some part of your website, it doesn't do a full reload. It also keeps the state of your application which is great.\n\nWhen I make my website, I need to give the error message a styling. Without HMR, I would need to either trigger the error every time I changed the CSS or make it to an error state temporarily. Thanks to HMR, I only need to trigger it once and change the style as many times as I want.\n\n## Adapters\n\nSvelte-Kit use this new concept called **adapter**. There are a number of adapters available like [@sveltejs/adapter-node][adapter-node], [@sveltejs/adapter-static][adapter-static], [@sveltejs/adapter-vercel][adapter-vercel], etc.\n\nAs their name suggests, they _adapt_ your code to a specific environment. For example, if you use **adapter-node** then it will spit out a code that could be run on a server using Node for SSR. If you use **adapter-static**, it will spit out a static build, similar to `sapper export` if you've used Sapper before.\n\n## Issues\n\nWhile trying out Svelte-Kit, I found out that Svelte's ESlint plugin doesn't work with Typescript so I couldn't use ESlint for this project. That's just a minor issue though.\n\n# Making A Simple App\n\n## Github Job\n\nI decided to make a simple app that utilises Github Job API. You can view available jobs in form of a card and you can filter based on its name, location, or whether or not it's a full-time job. Here's some screenshot\n\n![preview](/assets/posts/trying-out-sveltekit/preview.webp)\n![preview-2](/assets/posts/trying-out-sveltekit/preview-2.webp)\n\nI took the design from [frontendmentor.io][frontend-mentor] and over-simplify it. It's just an experiment so I wouldn't care that much about the design.\n\nIt also has a dark mode, by the way, I only took the screenshot of the light mode version.\n\n## I Don't Really Like The Reserved Filename\n\nRight now, Svelte-Kit uses `$layout.svelte` for its layout. I don't like this name, it conflicts with the shell variable. I prefer the old one on sapper which uses `_` instead of `$`.\n\nI thought I was editing a `$layout.svelte` file but I was editing a `.svelte` file instead because ZSH thought `$layout` is a variable name. I need to escape it so it would open a `\\$layout.svelte` instead.\n\nTwo plugins that I use for my editor which are [telescope.nvim][telescope-nvim] and [nvim-tree.lua][nvim-tree-lua] has an issue with this filename, it doesn't escape it before opening it. So I fixed them both which then made me distracted and doing other stuff instead of finishing this app :p\n\nimport Update from \"~/components/Update.astro\";\n\n\u003CUpdate date=\"2021-04-10\">\n\nGood news! Since [#1370][underscore-pr-link], SvelteKit uses `__layout.svelte` instead of `$layout.svelte` -- This also applies to the error page.\n\n\u003C/Update>\n\n## Server Routes\n\nGithub API has CORS protection so I had to make my own proxy server. Thankfully, Svelte-Kit did a great job with this one. I only need to create a file with a suffix of `.json.ts` or `.json.js`.\n\nIt's actually the first time I made a server route, but I already knew how it works so it's easy. Though I had to go to Svelte's Discord to find out how to do this in Svelte-Kit.\n\n## Pre-rendering\n\nTo load your data before rendering it to a user, you need to export a `preload` function with a `module` context in Sapper. It's pretty much the same in Svelte-Kit. The only difference is the function signature is changed a bit. It's similar to `getInitialProps` or `getServerSideProps` in NextJS.\n\n## Path Alias\n\nAt first, I don't know how Snowpack works at all. After a little bit of reading through its documentation, turns out you can make an alias for an import path. I use `#` as my prefix for the import path so I could just do something like `#components/SEO.svelte` instead of typing in the full relative path.\n\nI also did this to `tsconfig.json` so I get that sweet path completion from tsserver.\n\n## Dynamic Pages\n\nFor the job detail page, I use the Svelte-Kit dynamic page feature. You would make a file with `[slug].svelte` as its name and you'll have access to the `slug` variable which you can then use to fetch specific data for that page.\n\nThe `slug` page could be whatever you want. So if you have `pages/job/[id]`. So if you have `pages/job/[id].svelte` and you go to `/job/foobar`, you'll have `foobar` as the `id` value. In my case, it's a long random ID that I can use to fetch a specific job detail.\n\nGithub Job API gave me an HTML string that I could directly use using `@html` in Svelte, I don't think this is harmful since it's Github API after all, but you need to be really careful when using `@html` since it opens a possibility for XSS.\n\n## Loading Feedback\n\nI couldn't figure out how to get the current loading state in Svelte-Kit. I used Sapper `preloading` state in the past for my website but I don't know how to do the same thing in Svelte-Kit.\n\nI added a loading animation when you try to find a job using the search bar but that's it. I took it from [here][spinner-link] and convert it to a Svelte component.\n\n## Dark Mode\n\nThe original design has a dark mode, and I'm a big fan of dark mode so, why not implement this just for fun. I've implemented this feature before for my website so it's smooth sailing ;)\n\nI use `localStorage` to store the current theme data and load the state to Svelte's store _before_ the user sees the page so they won't see Flash Of Incorrect Theme or whatever you want to call it by putting the loading mechanism _before_ the HTML body.\n\n## Deployment\n\nI was trying to deploy this app to Vercel but it keeps changing constantly so stuff breaks easily. I decided not to deploy this in the end.\n\n\u003CUpdate date=\"2021-03-21\">\n\nI managed to deploy this app [here](https://svlt.elianiva.my.id) using `@sveltejs/adapter-vercel`. ~~Though I'm using a temporary fork of mine to make it work~~ It's been fixed. It's _really_ satisfying knowing that it finally works!\n\n\u003C/Update>\n\n# Closing Note\n\nSo far, Svelte-Kit lives up to my expectation. I'm really excited to wait for its final stable release. Anyway, [here][gh-job-repo] is the repo if you want to check it out yourself, and thanks for reading this post. Have a wonderful day! ;)","src/content/posts/trying-out-sveltekit.mdx","94d080f337c71228","trying-out-sveltekit.mdx","vim-statusline",{"id":972,"data":974,"body":979,"filePath":980,"digest":981,"legacyId":982,"deferredRender":15},{"draft":25,"title":975,"date":976,"description":977,"tags":978},"Making your own statusline in (Neo)vim",["Date","2020-02-15T00:00:00.000Z"],"A post where I made my own statusline to make my vim looks more personalised",[706],"import Update from \"~/components/Update.astro\";\n\n# Introduction\n\nHi everyone! In this post, I will talk about making your own custom statusline in vim. There are a lot of plugins out there that makes vim statusline looks way better and works out of the box. But, if you make your own, that means you lose one dependency and it feels good to make your own custom one. That makes it unique compared to anyone else.\n\nThe reason why I made this post is also because I want to change my statusline. While my current statusline looks eye candy (to me at least), it takes a whole lot of space. So, I want to simplifiy it and why not make that process as a post. Let's get into it!\n\n\u003CUpdate date=\"2020-11-29\">\n\nI wrote a better version of this in Lua which you can read [here](https://elianiva.my.id/posts/neovim-lua-statusline)\n\nDisclaimer: I don't know if the code here still works or not.\n\n\u003C/Update>\n\n# Prerequisite\n\nFirst of all, we need to prepare a few things :\n\n-   (Neo)Vim Text Editor (Duh, isn't that obvious?).\n-   Terminal that is capable of true colours\n-   Patience\n-   Googling skills incase something doesn't work correctly\n\nAll is set, let's actually make the statusline!\n\n# Creating the statusline\n\n## Deprecating the old one\n\nFirst thing first, I removed my old statusline. You don't need to do it if you don't have it already. If you are curious how my statusline looks, let me show you.\n\n![old statusline](/assets/posts/vim-statusline/old.png)\n\nAs you can see, it looks like a capsule for each module. I took the design from a reddit post that I've found the other day. [Here it is](https://www.reddit.com/r/vimporn/comments/efjcv0/gruvboxxx/?utm_source=share&utm_medium=web2x). It looks sick when I saw it for the first time. But, as time passes I started to think that it wasted quite a lot of space. So I decided to change it\n\n## Making the structure\n\nLet's start with the structure of the statusline. Create 2 functions for your statusline as so.\n\n```vim\n\" We'll use this for the active statusline\nfunction! ActiveLine()\n  let statusline = \"\"\n  return statusline\nendfunction\n\n\" We'll use this for the inactive statusline\nfunction! InactiveLine()\n  let statusline = \"\"\n  return statusline\nendfunction\n```\n\n## Base colour\n\nNext, we'll define the base colour for the background. I chose a lighter colour for the background so it stands out. To add a base colour, you need to add `%#Base#` where `Base` is the name of the color highlight. To set a colour highlight, you'd do:\n\n```vim\n  hi Base guibg=#212333 guifg=#212333\n```\n\nYou can freely change the colours as you like. The colour are set, let's apply it to our statusline. To apply it, you'd do:\n\n```vim\n\" We'll use this for the active statusline\nfunction! ActiveLine()\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n  return statusline\nendfunction\n```\n\n## Modes indicator\n\nLet's make a module for out statusline because so far, what we did is just setting the background colour. The most importan part for me is the indicator for the mode that you're currently in. To do that, you'd add:\n\n```vim\n  let g:currentmode={\n      \\'n' : 'Normal ',\n      \\'no' : 'N·Operator Pending ',\n      \\'v' : 'Visual ',\n      \\'V' : 'V·Line ',\n      \\'^V' : 'V·Block ',\n      \\'s' : 'Select ',\n      \\'S': 'S·Line ',\n      \\'^S' : 'S·Block ',\n      \\'i' : 'Insert ',\n      \\'R' : 'Replace ',\n      \\'Rv' : 'V·Replace ',\n      \\'c' : 'Command ',\n      \\'cv' : 'Vim Ex ',\n      \\'ce' : 'Ex ',\n      \\'r' : 'Prompt ',\n      \\'rm' : 'More ',\n      \\'r?' : 'Confirm ',\n      \\'!' : 'Shell ',\n      \\'t' : 'Terminal '\n      \\}\n\n\" Get current mode\nfunction! ModeCurrent() abort\n    let l:modecurrent = mode()\n    let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V·Block '))\n    let l:current_status_mode = l:modelist\n    return l:current_status_mode\nendfunction\n```\n\nJust calm down, don't get intimidated by the code. It looks like much, but it's just a list to indicate what mode you're currently in. Make sure you place that on top of the `ActiveLine` function. You don't need to understand all of that. All you need to know is, _It just works._\n\nLet's add some colours for that module. It's the same like before, you add `%#Mode#` where `Mode` is the name for highlight group. Set the colour for the highlight as so:\n\n```vim\nhi Mode guibg=#82aaff guifg=#181824 gui=bold\n```\n\nIt will give the `Mode` module a blue background and a dark colour for the text. It will also make the text bold. Let's ppply it to our statusline once again.\n\n```vim\n\" We'll use this for the active statusline\nfunction! ActiveLine()\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Current mode\n  let statusline .= \"%#Mode# %{ModeCurrent()}\"\n  return statusline\nendfunction\n```\n\n## Git integration\n\nBeing able to see your git branch on your statusline is great. So, let's do that! First thing first, you'll need some kind of git plugin to show the git status (I think it's possible without it, but I'm not sure). I'll use a vim plugin called [vim-fugitive](https://github.com/tpope/vim-fugitive). It's not only for this reason, it has a lot of useful command too!\n\nLet's create the module for that. First thing first, the branch name that you're currently in.\n\n```vim\n\" Get current git branch\nfunction! GitBranch(git)\n  if a:git == \"\"\n    return '-'\n  else\n    return a:git\n  endif\nendfunction\n```\n\nCreate the colours for that module and apply it by doing so:\n\n```vim\nhi Git guibg=#292d3e guifg=#929dcb\n\nfunction! ActiveLine()\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Current mode\n  let statusline .= \"%#Mode# %{ModeCurrent()}\"\n\n  \" Current git branch\n  let statusline .= \"%#Git# %{GitBranch(fugitive#head())} %)\"\n  return statusline\nendfunction\n```\n\n## Right Section\n\nAfter creating the left section, let's move to the right part. To move to the right part of the statusline, what you'd do is to add:\n\n```vim\n\" Make the colour highlight normal\nlet statusline .= \"%#Base#\"\nlet statusline .= \"%=\"\n```\n\nWhat that block code is doing is:\n\n-   It normalize the colour of the background\n-   Move the next module to the right\n\n## Filename\n\nI want to make the filename module as the first module for the right section. I also added the feature where if your file isn't saved yet, it'll give a star symbol at the end of the filename, change the colour to white and make it bold.\n\n```vim\n\" Check modified status\nfunction! CheckMod(modi)\n  if a:modi == 1\n    hi Modi guifg=#efefef guibg=#212333 gui=bold\n    hi Filename guifg=#efefef guibg=#212333\n    return expand('%:t').'*'\n  else\n    hi Modi guifg=#929dcb guibg=#212333\n    hi Filename guifg=#929dcb guibg=#212333\n    return expand('%:t')\n  endif\nendfunction\n```\n\nThen we'll add it to our previous statusline like we did for the other modules.\n\n```vim\nfunction! ActiveLine()\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Current mode\n  let statusline .= \"%#Mode# %{ModeCurrent()}\"\n\n  \" Current git branch\n  let statusline .= \"%#Git# %{GitBranch(fugitive#head())} %)\"\n\n  \" Make the colour highlight normal\n  let statusline .= \"%#Base#\"\n  let statusline .= \"%=\"\n\n  \" Current modified status and filename\n  let statusline .= \"%#Modi# %{CheckMod(&modified)} \"\n  return statusline\nendfunction\n```\n\n## Filetype\n\nSimilar to `filename`, filetype module only display a filetype from that file. You know, like `javascript`, `html`, `markdown`, etc. Let's make that module.\n\n```vim\n\" Set the colour\nhi Filetype guibg=#292d3e guifg=#929dcb\n\n\" Get current filetype\nfunction! CheckFT(filetype)\n  if a:filetype == ''\n    return '-'\n  else\n    return tolower(a:filetype)\n  endif\nendfunction\n```\n\nAfter making it, let's apply it to our statusline.\n\n```vim\nfunction! ActiveLine()\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Current mode\n  let statusline .= \"%#Mode# %{ModeCurrent()}\"\n\n  \" Current git branch\n  let statusline .= \"%#Git# %{GitBranch(fugitive#head())} %)\"\n\n  \" Make the colour highlight normal\n  let statusline .= \"%#Base#\"\n  let statusline .= \"%=\"\n\n  \" Current modified status and filename\n  let statusline .= \"%#Modi# %{CheckMod(&modified)} \"\n\n  \" Current filetype\n  let statusline .= \"%#Filetype# %{CheckFT(&filetype)} \"\n  return statusline\nendfunction\n```\n\nThe reason why I use a function just to display a filetype is to make all of the letter lowercase and display `-` when the filetype is unidentified.\n\n## Line Number\n\nLast but not least, it's the line number and line column module. It's used to display the line number that you're currently in. It's a really simple module. Let's make that!\n\n```vim\n\" Colour for line number module\nhi LineCol guibg=#82aaff guifg=#181824 gui=bold\n\n\" Current line and column\nlet statusline .= \"%#LineCol# Ln %l, Col %c \"\n```\n\n## Inactive Line\n\nWe've made the statusline for the active window, let's make one for the inactive window. It's simple.\n\n```vim\nfunction! InactiveLine()\n  \" Set empty statusline and colors\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Full path of the file\n  let statusline .= \"%#LineCol# %F \"\n\n  return statusline\nendfunction\n```\n\n# Apply the statusline\n\nLet's see what we've made so far.\n\n```vim\n\" Statusline colors\nhi Base guibg=#212333 guifg=#212333\nhi Mode guibg=#82aaff guifg=#181824 gui=bold\nhi Git guibg=#292d3e guifg=#929dcb\nhi Filetype guibg=#292d3e guifg=#929dcb\nhi LineCol guibg=#82aaff guifg=#181824 gui=bold\n\" Get current mode\nlet g:currentmode={\n      \\'n' : 'Normal ',\n      \\'no' : 'N·Operator Pending ',\n      \\'v' : 'Visual ',\n      \\'V' : 'V·Line ',\n      \\'^V' : 'V·Block ',\n      \\'s' : 'Select ',\n      \\'S': 'S·Line ',\n      \\'^S' : 'S·Block ',\n      \\'i' : 'Insert ',\n      \\'R' : 'Replace ',\n      \\'Rv' : 'V·Replace ',\n      \\'c' : 'Command ',\n      \\'cv' : 'Vim Ex ',\n      \\'ce' : 'Ex ',\n      \\'r' : 'Prompt ',\n      \\'rm' : 'More ',\n      \\'r?' : 'Confirm ',\n      \\'!' : 'Shell ',\n      \\'t' : 'Terminal '\n      \\}\n\n\" Get current mode\nfunction! ModeCurrent() abort\n    let l:modecurrent = mode()\n    let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V·Block '))\n    let l:current_status_mode = l:modelist\n    return l:current_status_mode\nendfunction\n\n\" Get current git branch\nfunction! GitBranch(git)\n  if a:git == \"\"\n    return '-'\n  else\n    return a:git\n  endif\nendfunction\n\n\" Get current filetype\nfunction! CheckFT(filetype)\n  if a:filetype == ''\n    return '-'\n  else\n    return tolower(a:filetype)\n  endif\nendfunction\n\n\" Check modified status\nfunction! CheckMod(modi)\n  if a:modi == 1\n    hi Modi guifg=#efefef guibg=#212333\n    hi Filename guifg=#efefef guibg=#212333\n    return expand('%:t').'*'\n  else\n    hi Modi guifg=#929dcb guibg=#212333\n    hi Filename guifg=#929dcb guibg=#212333\n    return expand('%:t')\n  endif\nendfunction\n\n\" Set active statusline\nfunction! ActiveLine()\n  \" Set empty statusline and colors\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Current mode\n  let statusline .= \"%#Mode# %{ModeCurrent()}\"\n\n  \" Current git branch\n  let statusline .= \"%#Git# %{GitBranch(fugitive#head())} %)\"\n\n  let statusline .= \"%#Base#\"\n\n  \" Align items to right\n  let statusline .= \"%=\"\n\n  \" Current modified status and filename\n  let statusline .= \"%#Modi# %{CheckMod(&modified)} \"\n\n  \" Current filetype\n  let statusline .= \"%#Filetype# %{CheckFT(&filetype)} \"\n\n  \" Current line and column\n  let statusline .= \"%#LineCol# Ln %l, Col %c \"\n  return statusline\nendfunction\n\nfunction! InactiveLine()\n  \" Set empty statusline and colors\n  let statusline = \"\"\n  let statusline .= \"%#Base#\"\n\n  \" Full path of the file\n  let statusline .= \"%#Filename# %F \"\n\n  return statusline\nendfunction\n```\n\nAs you can see, currently we didn't do anything to our current statusline because we haven't apply it yet. So, let's apply it!\n\n```vim\n\" Change statusline automatically\naugroup Statusline\n  autocmd!\n  autocmd WinEnter,BufEnter * setlocal statusline=%!ActiveLine()\n  autocmd WinLeave,BufLeave * setlocal statusline=%!InactiveLine()\n  autocmd FileType nerdtree setlocal statusline=%!NERDLine()\naugroup END\n```\n\nWe use autocmd to make the statusline changed automatically based of the current window status. Make sure you've set `laststatus` to 2 so your vim will always display the statusline. If you don't know what I mean, add\n\n```vim\nset laststatus=2\n```\n\nto your .vimrc or init.vim\n\nHere's what it looks like when it's finished\n\n![new statusline](/assets/posts/vim-statusline/new.png)\n\nIt doesn't look like an eye candy, but it doesn't take a whole lotta space.\nIf you want the old one, [Here it is](https://github.com/irrellia/dotfiles/blob/0c1ca17af07d7fdf72577a44d2a1e8bbab855d93/.config/nvim/modules/statusline.vim). Just take what you need from that file, it's not that hard to understand ;)\n\n\u003CUpdate date=\"2020-10-15\">\n\nWelp, I accidentally lost my old statusline because I `git push --force` the other day. Sorry :p\n\n\u003C/Update>\n\n# Conclusion\n\nMaking a custom statusline of your own is quite a lengthy process. But, I think it's a fun process nonetheless. If you want to tinker with it even more, just do it! It's a repetitive process once you know the basic. I'm not a vim expert myself, so sorry if I've missed something in this post. Alright then, I'm gonna end this post right here. If you have any question regarding to this post, feel free to hit me up! See ya!","src/content/posts/vim-statusline.mdx","39d2e9c8ed3bff6a","vim-statusline.mdx","website-with-nix-and-ocaml",{"id":983,"data":985,"body":992,"filePath":993,"digest":994,"legacyId":995,"deferredRender":15},{"draft":15,"title":986,"date":987,"description":988,"tags":989},"Building a website using Nix and OCaml",["Date","2024-11-05T00:00:00.000Z"],"Exploring OCaml and Nix to build a website",[990,991,671],"nix","ocaml","Hey!\n\nIt has been a while since I've written anything on this blog hahah. It's been about\n2 years since my last post, I've been really busy with college and work so I\nhaven't got much time to write anything (or do anything besides work and college, really).\n\nIt's been quite stressful recently since I can't really do what I want to do anymore.\nIt's just an endless cycle of work and college (which is doing stuff I already know, it gets boring quite fast).\nI don't get to write anything interesting, just a bunch of boring stuff and I don't feel like I'm learning something new.\nSo, I decided to take a break from it and do different things to learn something new.\n\nA while ago, I started to use [Nix](https://nixos.org/) (again) to manage my dependencies. I\nlike the fact that Nix is declarative and being able to define dependencies, config, etc in a file\nmaking it reproducible. Overall I like Nix a lot, minus the fact that it's using a lot of\nstorage space since each package (or derivation in Nix lingo) is stored in a separate\ndirectory.\n\nI've used Nix before but I didn't really use it for development environment, I just used it\nto manage my dotfiles and packages. This time though, I want to try using it to manage my development\nenvironment. I've also been wanting to try out [OCaml](https://ocaml.org) for a while, so I thought\nwhy not use Nix to manage my OCaml environment, that shouldn't be too hard right?\n(inb4 I spent several hours configuring things due to lack of documentation lol)\n\n> **DISCLAIMER**:\n> I would assume you already somewhat familiar with Nix, if not, here's a few resources to get you started:\n> - [Nix in 100 Seconds](https://youtu.be/FJVFXsNzYZQ?si=rfHV_4I8hVG0QaJf)\n> - [Zero to Nix](https://zero-to-nix.com/)\n\n# Why Nix for development?\n\n> Why can't I just do `sudo dnf install nodejs` and go on with my life? Why this esoteric thing?\n> Why can't I just use `docker` and use it to run my development environment?\n\nWell, there are several reasons for that, I'm not going to go into detail about them, but basically,\nusing Nix to manage your development environment makes it reproducible.\nWhat I mean by that is, if there's someone who wants to contribute, or you want to continue\nthe development in another machine, you can just do `nix develop` and it will give you\na shell with everything you need to start developing.\n\nFor now let's just stick with that, I don't want to go into details about Nix, there's already\na lot of articles and videos out there that explains it much better than me. I've listed\nfew of them below:\n\n- [Per-Project Development Environments with Nix](https://mtlynch.io/notes/nix-dev-environment/)\n- [devenv.sh](https://devenv.sh/) - A wrapper around Nix to make it easier to manage your dev environment\n- [Managing development environments with Nix](https://jeffkreeftmeijer.com/nix-devshells/)\n- [Explore Nix development environments](https://zero-to-nix.com/start/nix-develop)","src/content/posts/website-with-nix-and-ocaml.mdx","54eb244d29ce5231","website-with-nix-and-ocaml.mdx","why-i-use-linux",{"id":996,"data":998,"body":1003,"filePath":1004,"digest":1005,"legacyId":1006,"deferredRender":15},{"draft":25,"title":999,"date":1000,"description":1001,"tags":1002},"Why I use Linux instead of other OS",["Date","2020-02-27T00:00:00.000Z"],"A post where I try to explain why I use this beautiful and awesome operating system called Linux",[645],"# Introduction\n\nHello internet people of the internet! In this post, I will explain the reason why I use Linux and how I know Linux. Well, the correct term here should be GNU/Linux but it's _way_ too long let's be honest. So, whenever I say Linux, what I mean is GNU/Linux. Let's start with how I know Linux.\n\n# Origin\n\n## My first laptop\n\nIt all started when I want to buy my first laptop. Roughly about 9 months ago. It runs Intel Celeron N4000 processor, which is pretty bad (yeah, I know). At that time, I didn't know about Thinkpad which most of people said has the best value for its price. So, I do some quick research on how ~~slow~~ fast this processor runs. It turns out, it's pretty bad.\n\n## How I know Linux\n\nI heard a lot of people say that Windows 10 is heavy for a slow processor like mine. It's bloat, it's too heavy, too many things going on, there's some malicious virus that can easily infect your computer, yaddi yadda. To be honest, I became a bit sad at that time. Then I came across a post on Facebook saying something like \"Try Linux if your laptop/pc isn't powerful enough to run windows.\" Then I start to wonder, what is this guy talking about? Linux? I never heard that before.\n\nI became interested in that. Bare in mind that I don't have any laptop yet. I don't know why I love to read some articles about Linux and joined on several groups even if I don't have any machine that runs Linux (I even help people solve issues that they have on their Linux machine even though I don't have any laptop. That's quite something if you ask me). It's an interesting operating system (mainly because I never heard of it). Somehow, I like the fact that most people don't use it. I like to be different. Finally, after about a month, I bought my very first laptop.\n\n## My first distribution\n\nLinux has so many distributions. Like, a gazillion of them. But from what I observe, there are only a few \"big boys\" that stands out from the others. Some of them are Debian, Ubuntu, Arch, Manjaro, OpenSUSE, Fedora, RHEL, PopOS, etc. I got confused easily on which one is the best for me. Then I decided to check what's that guy is using on Facebook.\n\nThe guy on Facebook runs [Manjaro Linux](https://manjaro.org). I was like, \"Why did he choose that? That's a silly name for Linux.\" Not gonna lie, that's my first impression lol. About a week later, I tried to install one of Linux distribution after getting convinced enough. The one that I chose was [Linux Mint](https://linuxmint.com). At that time, I installed Linux Mint 19.1 XFCE Edition. I was so happy to be able to install Linux. Unfortunately, I lost my first screenshot on Linux Mint.\n\n## Changing distribution\n\nA month has passed. I feel pretty comfortable with Linux. Then, there was this news saying that Ubuntu dropped their support for 32bit libraries. Do you remember that news? I was like, \"Well, that's fine I guess. What's wrong with that?\" Little did I know, 32bit libraries are what most games depend on. Then I started to panic and confused lmao.\n\nI was like, \"Oh come on. I'm already comfortable with my current setup. I still want to play some games but I don't want to change my distribution.\" Yep, that's literally what I said. And you know what? f\\*\\*\\* it. Imma change my distribution. I decided to choose Manjaro since it's not based on Ubuntu. Yep, the one that I've mentioned before. A distribution that I thought has a stupid name (I felt so guilty now lol). Then I started to think, \"Who cares about names anyway. As long as it is usable, it's good.\"\n\nFinally, I installed it. I took a quick screenshot after installing it because I was so excited. Here, take a look!\n\n![manjaro](/assets/posts/why-i-use-linux/manjaro.png)\n\nManjaro is based on Arch. Some people say that it's Arch without all of its fuss. I mean, it's true. At the time I'm writing this, I use Arch. For beginners that want to try Archlinux, it's a good starting point. I ended up using it for nearly 8 months. It was a great experience.\n\n# Why Linux?\n\nSo, why do I use Linux then? Well, let me give you a quick list of why Linux is better than the other OS\n\n-   **It's free**\n\n    Linux is free both in price and free as in freedom. You don't have to pay for license and you can do anyting you want with it. You can customize your Desktop Environment (look and feel) or even build your very own kernel!\n\n-   **It's lightweight**\n\n    Linux is so lightweight. It can bring your old hardware to life. There's this joke that says \"Linux can run on everything\". Starting from [business card](https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/) (yes, there's someone out there who built their business card with Linux inside it) until your high end $50000 beast or whatever.\n\n-   **It's secure**\n\n    Linux is very secure. That's why most of servers around the world is using Linux for it. You don't have to worry to install antivirus to prevent ransomware getting into your system. No need to worry on that stuff.\n\n-   **There's always something to learn**\n\n    Like, seriously. You can always learn something new everyday. There are so much good stuff that you can learn from Linux. If you like something challenging, go ahead and try Linux.\n\n-   **Package Manager**\n\n    Now this is the stuff that makes me really love Linux. Linux has a centralized place to download any app that you want. You don't need to go to some kind of obscure website and find the correct download link. You just need to `apt install` or `pacman -S` any package that you want and it's totally secure.\n\n# Conclusion\n\nAt first, I'm afraid that I can't install Windows on my new laptop. Who would've thought that in the end, I use Archlinux which some people say that it's difficult to install. I think it's not that hard, follow the wiki and you're set (said someone who had failed to install Archlinux 3 times lmao).\n\nAlright, this post will end right here. I might post why I use VIM/Window Managers next time. See ya in the next post everyone, have a good day!","src/content/posts/why-i-use-linux.mdx","853572d5f7bdef00","why-i-use-linux.mdx"]